File,Commit,Author,Commit Message,Start Line,End Line,Previous Author,Previous Commit,Keyword Label,Commit Date,Previous Commit Date
butterknife/gradle.properties,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,3,,,0,2015-09-26 03:41:19,
butterknife/src/main/AndroidManifest.xml,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,2,,,0,2015-09-26 03:41:19,
butterknife-annotations/gradle.properties,2925dd8,Jake Wharton,Deploy annotations module.,1,3,,,0,2015-10-10 07:04:28,
butterknife/src/main/java/butterknife/package-info.java,ceef790,Jake Wharton,Documentation improvements all around.,4,6,,,0,2014-04-15 06:11:17,
butterknife/src/main/java/butterknife/package-info.java,0896401,Jake Wharton,"Combine BindView and BindViews into a single annotation, Bind.",8,8,Jake Wharton,0ffaf1f,0,2015-06-28 02:00:11,2015-06-27 23:50:27
butterknife/src/main/java/butterknife/package-info.java,ceef790,Jake Wharton,Documentation improvements all around.,1,1,,,0,2014-04-15 06:11:17,
butterknife/src/main/java/butterknife/package-info.java,ceef790,Jake Wharton,Documentation improvements all around.,9,10,,,0,2014-04-15 06:11:17,
butterknife/src/main/java/butterknife/package-info.java,ceef790,Jake Wharton,Documentation improvements all around.,12,14,,,0,2014-04-15 06:11:17,
butterknife/src/main/java/butterknife/package-info.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,7,7,Jake Wharton,0896401,0,2016-04-23 07:46:57,2015-06-28 02:00:11
butterknife/src/main/java/butterknife/package-info.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,2,3,Jake Wharton,244a9e7,0,2015-03-15 00:06:02,2014-04-19 05:25:44
butterknife/src/main/java/butterknife/package-info.java,0896401,Jake Wharton,"Combine BindView and BindViews into a single annotation, Bind.",11,11,Jake Wharton,0ffaf1f,0,2015-06-28 02:00:11,2015-06-27 23:50:27
butterknife-annotations/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",6,11,,,0,2015-09-26 03:41:19,
butterknife-annotations/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",2,3,,,0,2015-09-26 03:41:19,
butterknife-annotations/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,1,1,Jake Wharton,dbca571,0,2017-07-28 17:23:19,2017-06-02 19:11:15
butterknife-annotations/build.gradle,01e4e4e,Jake Wharton,Remove legacy support,14,14,Jake Wharton,0efcf39,0,2019-01-04 00:15:29,2018-10-10 21:27:34
butterknife-annotations/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",12,12,,,0,2015-09-26 03:41:19,
butterknife-annotations/build.gradle,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,4,5,John Rodriguez,dfff573,0,2018-10-10 21:27:34,2017-07-28 17:23:19
butterknife-annotations/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",15,15,,,0,2015-09-26 03:41:19,
butterknife-annotations/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,13,13,Gautam Korlam,20aad6c,0,2017-05-08 18:41:11,2016-06-19 19:32:42
butterknife-annotations/build.gradle,2925dd8,Jake Wharton,Deploy annotations module.,16,17,,,0,2015-10-10 07:04:28,
butterknife-annotations/src/main/java/butterknife/BindAnim.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,4,7,Jake Wharton,348f457,0,2017-07-02 19:18:54,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindAnim.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,de32331,0,2019-01-04 00:15:29,2018-09-07 04:38:40
butterknife-annotations/src/main/java/butterknife/BindAnim.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",8,8,Marcel Schnelle,5184ea1,0,2018-09-07 04:38:40,2017-07-02 19:18:54
butterknife-annotations/src/main/java/butterknife/BindAnim.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,1,2,Jake Wharton,348f457,0,2017-07-02 19:18:54,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindAnim.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",16,17,Marcel Schnelle,5184ea1,0,2018-09-07 04:38:40,2017-07-02 19:18:54
butterknife-annotations/src/main/java/butterknife/BindAnim.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,18,21,Jake Wharton,348f457,0,2017-07-02 19:18:54,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindAnim.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,9,15,Jake Wharton,348f457,0,2017-07-02 19:18:54,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindArray.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",1,2,,,0,2015-07-07 23:13:44,
butterknife-annotations/src/main/java/butterknife/BindArray.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,1afc43d,0,2019-01-04 00:15:29,2018-09-10 21:22:21
butterknife-annotations/src/main/java/butterknife/BindArray.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",35,36,,,0,2015-07-07 23:13:44,
butterknife-annotations/src/main/java/butterknife/BindArray.java,1afc43d,Jake Wharton,Fix annotation retention for reflect usage,8,8,Jake Wharton,348f457,1,2018-09-10 21:22:21,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindArray.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",4,7,,,0,2015-07-07 23:13:44,
butterknife-annotations/src/main/java/butterknife/BindArray.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",9,33,,,0,2015-07-07 23:13:44,
butterknife-annotations/src/main/java/butterknife/BindArray.java,1afc43d,Jake Wharton,Fix annotation retention for reflect usage,34,34,Jake Wharton,348f457,1,2018-09-10 21:22:21,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindArray.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,37,37,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/BindArray.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",38,38,,,0,2015-07-07 23:13:44,
butterknife-annotations/src/main/java/butterknife/BindColor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,7,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindColor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,1,2,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindColor.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,fc6aa93,0,2019-01-04 00:15:29,2018-09-07 03:30:39
butterknife-annotations/src/main/java/butterknife/BindColor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,13,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindColor.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",8,8,Jake Wharton,348f457,0,2018-09-07 03:30:39,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindColor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,16,17,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindColor.java,f6d9fb7,Tom Reznik,Javadoc cleanup,14,15,,,0,2015-07-06 19:46:24,
butterknife-annotations/src/main/java/butterknife/BindColor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,21,21,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindColor.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",18,19,Jake Wharton,348f457,0,2018-09-07 03:30:39,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindColor.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,22,22,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/BindColor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,23,23,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindColor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,20,20,,,0,2015-06-27 23:50:27,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,afcac3e,Jake Wharton,Support binding resource types to fields.,1,2,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",8,8,Jake Wharton,348f457,0,2018-09-07 03:30:39,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindDimen.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,fc6aa93,0,2019-01-04 00:15:29,2018-09-07 03:30:39
butterknife-annotations/src/main/java/butterknife/BindDimen.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,7,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,afcac3e,Jake Wharton,Support binding resource types to fields.,16,17,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,f6d9fb7,Tom Reznik,Javadoc cleanup,14,15,,,0,2015-07-06 19:46:24,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",18,19,Jake Wharton,348f457,0,2018-09-07 03:30:39,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindDimen.java,afcac3e,Jake Wharton,Support binding resource types to fields.,21,21,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,20,20,,,0,2015-06-27 23:50:27,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,13,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,afcac3e,Jake Wharton,Support binding resource types to fields.,23,23,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDimen.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,22,22,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,3,,,0,2015-09-26 03:41:19,
butterknife/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,7,7,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
butterknife/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",5,6,,,0,2015-09-26 03:41:19,
butterknife/build.gradle,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,10,10,Jake Wharton,55dc47e,0,2016-09-09 04:41:58,2016-09-08 03:33:17
butterknife/build.gradle,27ac5f6,Niklas Baudy,Fix consumerProguardFiles by moving it to defaultConfig,9,9,Jake Wharton,414ba5f,1,2015-11-23 10:01:31,2015-10-10 00:25:42
butterknife/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,4,4,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
butterknife/build.gradle,ea82b0a,Artem Zinnatullin,Package ProGuard rules into the aar,8,8,Michael Evans,05eae6d,0,2015-09-26 16:42:42,2015-09-26 03:41:19
butterknife/build.gradle,f396de7,Jake Wharton,Point test runners at the right type,11,11,Jake Wharton,01e4e4e,0,2019-02-01 23:08:50,2019-01-04 00:15:29
butterknife/build.gradle,ea82b0a,Artem Zinnatullin,Package ProGuard rules into the aar,12,12,Michael Evans,05eae6d,0,2015-09-26 16:42:42,2015-09-26 03:41:19
butterknife/build.gradle,9a0ba5b,Jake Wharton,Latest Android plugin and Gradle.,13,13,Niklas Baudy,27ac5f6,0,2016-04-23 07:49:06,2015-11-23 10:01:31
butterknife/build.gradle,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,14,18,Jake Wharton,9b59a14,0,2018-10-10 21:27:34,2018-09-06 16:48:44
butterknife/build.gradle,74f40e1,Jake Wharton,"Speed up builds by racing emulator start.  Also since we're splitting the commands, don't run lint release checks during compilation since the 'check' task will do a full lint run anyway.",22,23,John Rodriguez,dfff573,0,2017-08-04 05:31:24,2017-07-28 17:23:19
butterknife/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",30,32,,,0,2015-09-26 03:41:19,
butterknife/build.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,33,33,Jake Wharton,2d6f8a8,0,2018-09-06 16:48:44,2018-02-12 01:29:32
butterknife/build.gradle,9a0ba5b,Jake Wharton,Latest Android plugin and Gradle.,19,21,Niklas Baudy,27ac5f6,0,2016-04-23 07:49:06,2015-11-23 10:01:31
butterknife/build.gradle,2d6f8a8,Jake Wharton,Disable BuildConfig generation.,25,29,macarse,222e272,0,2018-02-12 01:29:32,2017-10-26 19:58:56
butterknife/build.gradle,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,38,38,Jake Wharton,0e710b3,0,2017-10-13 02:47:15,2017-10-07 03:36:16
butterknife/build.gradle,7c39e47,Jared Burrows,Update android gradle plugin 2.2.0,39,40,Jake Wharton,c89c374,0,2016-10-05 09:09:58,2016-09-09 04:41:58
butterknife/build.gradle,9a0ba5b,Jake Wharton,Latest Android plugin and Gradle.,24,24,Jake Wharton,59061ca,0,2016-04-23 07:49:06,2015-10-01 03:10:22
butterknife/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,35,36,Jake Wharton,0b2c1aa,0,2017-07-28 17:23:19,2017-05-08 18:41:11
butterknife/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",41,41,,,0,2015-09-26 03:41:19,
butterknife/build.gradle,01e4e4e,Jake Wharton,Remove legacy support,37,37,Jake Wharton,0efcf39,0,2019-01-04 00:15:29,2018-10-10 21:27:34
butterknife/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,34,34,,,0,2016-06-19 19:32:42,
butterknife-annotations/src/main/java/butterknife/BindFloat.java,c24995b,Jake Wharton,Add @BindFloat annotation.,1,2,,,0,2016-08-26 20:52:56,
butterknife-annotations/src/main/java/butterknife/BindFloat.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,de32331,0,2019-01-04 00:15:29,2018-09-07 04:38:40
butterknife-annotations/src/main/java/butterknife/BindFloat.java,f97d4cd,Jake Wharton,Fix float docs.,15,15,Jake Wharton,c24995b,1,2016-08-26 20:54:00,2016-08-26 20:52:56
butterknife-annotations/src/main/java/butterknife/BindFloat.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",8,8,Jake Wharton,f97d4cd,0,2018-09-07 04:38:40,2016-08-26 20:54:00
butterknife-annotations/src/main/java/butterknife/BindFloat.java,c24995b,Jake Wharton,Add @BindFloat annotation.,4,7,,,0,2016-08-26 20:52:56,
butterknife-annotations/src/main/java/butterknife/BindFloat.java,c24995b,Jake Wharton,Add @BindFloat annotation.,16,19,,,0,2016-08-26 20:52:56,
butterknife-annotations/src/main/java/butterknife/BindFloat.java,c24995b,Jake Wharton,Add @BindFloat annotation.,9,14,,,0,2016-08-26 20:52:56,
butterknife-annotations/src/main/java/butterknife/BindFloat.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",20,21,Jake Wharton,f97d4cd,0,2018-09-07 04:38:40,2016-08-26 20:54:00
butterknife-annotations/src/main/java/butterknife/BindFloat.java,c24995b,Jake Wharton,Add @BindFloat annotation.,22,25,,,0,2016-08-26 20:52:56,
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,de32331,0,2019-01-04 00:15:29,2018-09-07 04:38:40
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",9,9,Jake Wharton,348f457,0,2018-09-07 04:38:40,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",17,18,Jake Wharton,348f457,0,2018-09-07 04:38:40,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,21,21,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,19,20,,,0,2015-07-14 17:38:44,
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,10,16,,,0,2015-07-14 17:38:44,
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,5,8,,,0,2015-07-14 17:38:44,
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,1,3,,,0,2015-07-14 17:38:44,
butterknife-annotations/src/main/java/butterknife/BindBitmap.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,22,22,,,0,2015-07-14 17:38:44,
butterknife-annotations/src/main/java/butterknife/BindBool.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,de32331,0,2019-01-04 00:15:29,2018-09-07 04:38:40
butterknife-annotations/src/main/java/butterknife/BindBool.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",16,17,Jake Wharton,348f457,0,2018-09-07 04:38:40,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindBool.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",8,8,Jake Wharton,348f457,0,2018-09-07 04:38:40,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindBool.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,20,20,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/BindBool.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,7,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindBool.java,afcac3e,Jake Wharton,Support binding resource types to fields.,19,19,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindBool.java,afcac3e,Jake Wharton,Support binding resource types to fields.,1,2,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindBool.java,afcac3e,Jake Wharton,Support binding resource types to fields.,14,15,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindBool.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,12,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindBool.java,afcac3e,Jake Wharton,Support binding resource types to fields.,21,21,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindBool.java,f6d9fb7,Tom Reznik,Javadoc cleanup,13,13,,,0,2015-07-06 19:46:24,
butterknife-annotations/src/main/java/butterknife/BindBool.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,18,18,,,0,2015-06-27 23:50:27,
butterknife-annotations/src/main/java/butterknife/BindInt.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",8,8,Jake Wharton,348f457,0,2018-09-07 04:38:40,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindInt.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",16,17,Jake Wharton,348f457,0,2018-09-07 04:38:40,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindInt.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,de32331,0,2019-01-04 00:15:29,2018-09-07 04:38:40
butterknife-annotations/src/main/java/butterknife/BindInt.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,7,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindInt.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,12,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindInt.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,20,20,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/BindInt.java,afcac3e,Jake Wharton,Support binding resource types to fields.,1,2,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindInt.java,f6d9fb7,Tom Reznik,Javadoc cleanup,13,13,,,0,2015-07-06 19:46:24,
butterknife-annotations/src/main/java/butterknife/BindInt.java,afcac3e,Jake Wharton,Support binding resource types to fields.,14,15,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindInt.java,afcac3e,Jake Wharton,Support binding resource types to fields.,19,19,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindInt.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,18,18,,,0,2015-06-27 23:50:27,
butterknife-annotations/src/main/java/butterknife/BindInt.java,afcac3e,Jake Wharton,Support binding resource types to fields.,21,21,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindFont.java,01e4e4e,Jake Wharton,Remove legacy support,4,6,Jake Wharton,de32331,0,2019-01-04 00:15:29,2018-09-07 04:38:40
butterknife-annotations/src/main/java/butterknife/BindFont.java,01e4e4e,Jake Wharton,Remove legacy support,10,10,Jake Wharton,de32331,0,2019-01-04 00:15:29,2018-09-07 04:38:40
butterknife-annotations/src/main/java/butterknife/BindFont.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,3,3,Jake Wharton,fb7d92b,0,2017-07-07 14:17:45,2017-07-04 04:41:12
butterknife-annotations/src/main/java/butterknife/BindFont.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",12,12,Jake Wharton,ee2043f,0,2018-09-07 04:38:40,2017-07-07 14:17:45
butterknife-annotations/src/main/java/butterknife/BindFont.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,7,9,Jake Wharton,348f457,0,2017-07-04 04:41:12,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindFont.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,1,2,Jake Wharton,348f457,0,2017-07-04 04:41:12,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindFont.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,11,11,Jake Wharton,348f457,0,2017-07-04 04:41:12,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindFont.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,13,19,Jake Wharton,348f457,0,2017-07-04 04:41:12,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindFont.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",20,21,Jake Wharton,ee2043f,0,2018-09-07 04:38:40,2017-07-07 14:17:45
butterknife-annotations/src/main/java/butterknife/BindFont.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,25,36,Jake Wharton,fb7d92b,0,2017-07-07 14:17:45,2017-07-04 04:41:12
butterknife-annotations/src/main/java/butterknife/BindFont.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",24,24,Jake Wharton,ee2043f,0,2018-09-07 04:38:40,2017-07-07 14:17:45
butterknife-annotations/src/main/java/butterknife/BindFont.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,22,23,,,0,2017-07-04 04:41:12,
butterknife-annotations/src/main/java/butterknife/BindFont.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,37,37,,,0,2017-07-04 04:41:12,
butterknife-annotations/src/main/java/butterknife/internal/Constants.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1,8,,,1,2018-04-13 15:23:50,
butterknife-annotations/src/main/java/butterknife/BindViews.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",18,18,Jake Wharton,7d31098,0,2018-09-06 22:01:51,2016-04-23 18:32:56
butterknife-annotations/src/main/java/butterknife/BindViews.java,7d31098,Jake Wharton,@BindViews,4,7,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-annotations/src/main/java/butterknife/BindViews.java,7d31098,Jake Wharton,@BindViews,1,2,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-annotations/src/main/java/butterknife/BindViews.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,0821b0c,0,2019-01-04 00:15:29,2018-09-06 22:01:51
butterknife-annotations/src/main/java/butterknife/BindViews.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",8,8,Jake Wharton,7d31098,0,2018-09-06 22:01:51,2016-04-23 18:32:56
butterknife-annotations/src/main/java/butterknife/BindViews.java,7d31098,Jake Wharton,@BindViews,9,17,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-annotations/src/main/java/butterknife/BindViews.java,7d31098,Jake Wharton,@BindViews,19,22,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-annotations/src/main/java/butterknife/BindView.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,0821b0c,0,2019-01-04 00:15:29,2018-09-06 22:01:51
butterknife-annotations/src/main/java/butterknife/BindView.java,8b97101,Jake Wharton,Initial commit.,4,7,,,0,2013-03-05 08:55:13,
butterknife-annotations/src/main/java/butterknife/BindView.java,8b97101,Jake Wharton,Initial commit.,1,2,,,0,2013-03-05 08:55:13,
butterknife-annotations/src/main/java/butterknife/BindView.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",8,8,Jake Wharton,7d31098,0,2018-09-06 22:01:51,2016-04-23 18:32:56
butterknife-annotations/src/main/java/butterknife/BindView.java,8b97101,Jake Wharton,Initial commit.,9,9,,,0,2013-03-05 08:55:13,
butterknife-annotations/src/main/java/butterknife/BindView.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",13,13,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/BindView.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,14,14,Jake Wharton,348f457,0,2016-04-23 07:46:57,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindView.java,7d31098,Jake Wharton,@BindViews,20,20,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-annotations/src/main/java/butterknife/BindView.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",10,10,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/BindView.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,11,12,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/BindView.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",16,16,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/BindView.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,18,18,Jake Wharton,348f457,0,2016-04-23 07:46:57,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindView.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,19,19,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/BindView.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",17,17,Jake Wharton,7d31098,0,2018-09-06 22:01:51,2016-04-23 18:32:56
butterknife-annotations/src/main/java/butterknife/BindView.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",15,15,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/BindView.java,8b97101,Jake Wharton,Initial commit.,21,21,,,0,2013-03-05 08:55:13,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",10,10,Gautam Korlam,f28b013,0,2018-09-07 03:30:39,2018-04-13 15:23:50
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),8,8,Jake Wharton,2725533,1,2018-04-13 15:23:50,2015-10-09 23:17:56
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,2725533,Jake Wharton,Correct example formatting a bit.,15,16,Jake Wharton,348f457,1,2015-10-09 23:17:56,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,01e4e4e,Jake Wharton,Remove legacy support,3,4,Jake Wharton,fc6aa93,0,2019-01-04 00:15:29,2018-09-07 03:30:39
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,17,17,Michael Evans,05eae6d,0,2015-09-30 01:30:53,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",21,22,Gautam Korlam,f28b013,0,2018-09-07 03:30:39,2018-04-13 15:23:50
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,2725533,Jake Wharton,Correct example formatting a bit.,18,18,Jake Wharton,348f457,1,2015-10-09 23:17:56,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,afcac3e,Jake Wharton,Support binding resource types to fields.,1,2,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,afcac3e,Jake Wharton,Support binding resource types to fields.,5,7,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,9,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,afcac3e,Jake Wharton,Support binding resource types to fields.,11,14,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,25,25,Luka Cindro,45dd9ed,0,2015-10-09 23:07:21,2015-09-30 01:30:53
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,afcac3e,Jake Wharton,Support binding resource types to fields.,24,24,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),28,28,Jake Wharton,2725533,1,2018-04-13 15:23:50,2015-10-09 23:17:56
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,afcac3e,Jake Wharton,Support binding resource types to fields.,19,20,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,23,23,,,0,2015-06-27 23:50:27,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,afcac3e,Jake Wharton,Support binding resource types to fields.,29,29,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindDrawable.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,26,27,,,0,2015-09-30 01:30:53,
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,3,4,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,b9df9cf,John Rodriguez,Add gradle-versions-plugin,1,2,John Rodriguez,ef6f392,0,2017-07-27 08:11:21,2017-07-27 08:10:44
build.gradle,4919bba,Jake Wharton,"Compile 28, support lib 28, androidx 1",6,6,Jake Wharton,b7e5af1,0,2018-09-22 20:58:58,2018-09-11 01:48:04
build.gradle,4dc6409,John Rodriguez,"Bump support library deps  Requires minSdk 14 or tools:overrideLibrary=""android.support.compat""",5,5,John Rodriguez,dd65000,0,2017-07-28 09:47:28,2017-07-28 09:47:28
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,7,7,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",10,10,Alex Krupa,48f1d7e,0,2019-09-05 03:12:28,2019-02-05 19:39:44
build.gradle,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,8,8,Jake Wharton,4919bba,0,2018-09-24 21:24:40,2018-09-22 20:58:58
build.gradle,19f29bf,Jake Wharton,Kotlin 1.2.71,9,9,Jake Wharton,564d686,0,2018-10-10 20:21:45,2018-09-24 21:39:34
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,11,11,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,13,17,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,cfbec9a,Jake Wharton,Update to AGP 3.3 as minimum supported version,18,18,Ivan Gavrilovic,3f675f4,0,2019-09-07 02:23:30,2019-09-05 03:12:28
build.gradle,aba0864,Jared Burrows,"make sure to use latest butterknife release, 8.8.1",12,12,Jared Burrows,e464226,0,2017-08-15 00:22:21,2017-08-15 00:22:20
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,19,19,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,22,22,Jake Wharton,01e4e4e,0,2019-02-05 19:39:44,2019-01-04 00:15:29
build.gradle,01e4e4e,Jake Wharton,Remove legacy support,21,21,Chris Warrington,96ecdb3,0,2019-01-04 00:15:29,2018-11-18 07:08:31
build.gradle,01e4e4e,Jake Wharton,Remove legacy support,24,27,Chris Warrington,96ecdb3,0,2019-01-04 00:15:29,2018-11-18 07:08:31
build.gradle,4d10aa9,Sven,AndroidX support in butterknife gradle plugin (#1324),28,28,Sneh Pandya,d120736,0,2018-09-05 13:23:06,2018-06-11 16:55:08
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,29,34,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,9c95238,John Rodriguez,Bump some dependencies,35,35,John Rodriguez,4e3fe02,0,2018-02-24 00:25:27,2018-02-24 00:25:06
build.gradle,38f5a3a,John Rodriguez,Bump dependencies,38,38,John Rodriguez,f9b1b02,0,2017-12-23 04:05:06,2017-10-25 20:01:05
build.gradle,4919bba,Jake Wharton,"Compile 28, support lib 28, androidx 1",23,23,Jake Wharton,41e0772,0,2018-09-22 20:58:58,2018-09-06 14:15:22
build.gradle,41e0772,Jake Wharton,Dependency updates  * AGP 3.2rc2 with aapt2 disabled explicitly * Kotlin 1.2.61 and JDK 8 artifact instead of JRE 8 * Support libs 27.1.1 * Truth 0.42,37,37,Sven,4d10aa9,0,2018-09-06 14:15:22,2018-09-05 13:23:06
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,42,42,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,38f5a3a,John Rodriguez,Bump dependencies,40,40,John Rodriguez,f9b1b02,0,2017-12-23 04:05:06,2017-10-25 20:01:05
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,36,36,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,9c95238,John Rodriguez,Bump some dependencies,43,43,John Rodriguez,4e3fe02,0,2018-02-24 00:25:27,2018-02-24 00:25:06
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,44,47,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,9c95238,John Rodriguez,Bump some dependencies,41,41,John Rodriguez,4e3fe02,0,2018-02-24 00:25:27,2018-02-24 00:25:06
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,39,39,Jake Wharton,c60f164,0,2017-05-08 18:41:11,2017-01-23 23:15:20
build.gradle,ef6f392,John Rodriguez,Move around buildscript blocks,56,59,Jake Wharton,7e15f59,0,2017-07-27 08:10:44,2017-07-04 03:39:53
build.gradle,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",50,53,Alex Krupa,48f1d7e,0,2019-09-05 03:12:28,2019-02-05 19:39:44
build.gradle,3983013,Jake Wharton,Purge Groovy for Kotlin.,54,54,Jake Wharton,c60f164,0,2017-05-08 21:06:01,2017-01-23 23:15:20
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,55,55,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
build.gradle,3983013,Jake Wharton,Purge Groovy for Kotlin.,48,48,Jake Wharton,0b2c1aa,0,2017-05-08 21:06:01,2017-05-08 18:41:11
build.gradle,c17c16c,Jake Wharton,Add error-prone and NullAway,61,61,Jake Wharton,bebdb4b,1,2018-09-10 21:26:24,2018-09-10 19:35:45
build.gradle,41e0772,Jake Wharton,Dependency updates  * AGP 3.2rc2 with aapt2 disabled explicitly * Kotlin 1.2.61 and JDK 8 artifact instead of JRE 8 * Support libs 27.1.1 * Truth 0.42,49,49,John Rodriguez,4e3fe02,0,2018-09-06 14:15:22,2018-02-24 00:25:06
build.gradle,ef6f392,John Rodriguez,Move around buildscript blocks,66,66,Jake Wharton,7e15f59,0,2017-07-27 08:10:44,2017-07-04 03:39:53
build.gradle,c17c16c,Jake Wharton,Add error-prone and NullAway,68,68,Jake Wharton,bebdb4b,1,2018-09-10 21:26:24,2018-09-10 19:35:45
build.gradle,564d686,Jake Wharton,AGP 3.2,65,65,Jake Wharton,b8791de,0,2018-09-24 21:39:34,2018-09-24 21:24:40
build.gradle,ef6f392,John Rodriguez,Move around buildscript blocks,62,64,Jake Wharton,7e15f59,0,2017-07-27 08:10:44,2017-07-04 03:39:53
build.gradle,01e4e4e,Jake Wharton,Remove legacy support,60,60,Jake Wharton,b8791de,0,2019-01-04 00:15:29,2018-09-24 21:24:40
build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",72,72,,,0,2015-09-26 03:41:19,
build.gradle,ef6f392,John Rodriguez,Move around buildscript blocks,69,69,Jake Wharton,c60f164,0,2017-07-27 08:10:44,2017-01-23 23:15:20
build.gradle,c6bdfd4,Jake Wharton,Propagate constant name/version to magic property name/version.  #Gradle #BestBuildSystem #SoObvious,73,74,,,0,2015-10-10 06:52:54,
build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",75,76,,,0,2015-09-26 03:41:19,
build.gradle,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",77,77,,,1,2016-11-02 15:19:47,
build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,70,71,,,0,2017-05-08 18:41:11,
build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",80,81,,,0,2015-09-26 03:41:19,
build.gradle,c17c16c,Jake Wharton,Add error-prone and NullAway,82,102,Jake Wharton,bebdb4b,1,2018-09-10 21:26:24,2018-09-10 19:35:45
build.gradle,4d10aa9,Sven,AndroidX support in butterknife gradle plugin (#1324),20,20,Jake Wharton,c60f164,0,2018-09-05 13:23:06,2017-01-23 23:15:20
build.gradle,dbca571,Jake Wharton,Update some build things  - Gradle 4.0-rc-1 - Android Gradle plugin 2.3.2 - Travis should use the Gradle plugin to automatically install deps.,78,78,,,0,2017-06-02 19:11:15,
build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,103,104,,,0,2016-06-19 19:32:42,
build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",105,105,,,0,2015-09-26 03:41:19,
build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",115,115,,,0,2015-09-26 03:41:19,
build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,106,111,,,0,2016-06-19 19:32:42,
build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,113,114,,,0,2016-06-19 19:32:42,
build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",120,121,,,0,2015-09-26 03:41:19,
build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",112,112,,,0,2015-09-26 03:41:19,
build.gradle,f9b1b02,John Rodriguez,Bump dependencies,67,67,Jake Wharton,7e15f59,0,2017-10-25 20:01:05,2017-07-04 03:39:53
build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,116,119,,,0,2016-06-19 19:32:42,
build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",122,122,,,0,2015-09-26 03:41:19,
build.gradle,d120736,Sneh Pandya,Move jcenter() to be last in the repository list,79,79,,,0,2018-06-11 16:55:08,
butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1,16,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,18,22,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/internal/ListenerMethod.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,17,17,,,0,2015-08-10 06:39:51,
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,1,9,,,0,2013-11-19 00:02:56,
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,16,21,Michael Evans,05eae6d,1,2016-05-06 05:18:03,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",11,12,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",14,15,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,10,10,,,0,2013-11-21 01:57:59,
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",22,24,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,13,13,Michael Evans,05eae6d,1,2016-05-06 05:18:03,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,25,35,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,36,36,,,0,2013-11-19 00:02:56,
butterknife-annotations/src/main/java/butterknife/BindString.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",8,8,Jake Wharton,348f457,0,2018-09-06 22:01:51,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindString.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",16,16,Jake Wharton,348f457,0,2018-09-06 22:01:51,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/BindString.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,0821b0c,0,2019-01-04 00:15:29,2018-09-06 22:01:51
butterknife-annotations/src/main/java/butterknife/BindString.java,afcac3e,Jake Wharton,Support binding resource types to fields.,14,15,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindString.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,19,19,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/BindString.java,afcac3e,Jake Wharton,Support binding resource types to fields.,1,2,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindString.java,f6d9fb7,Tom Reznik,Javadoc cleanup,13,13,,,0,2015-07-06 19:46:24,
butterknife-annotations/src/main/java/butterknife/BindString.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,7,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindString.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,12,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindString.java,afcac3e,Jake Wharton,Support binding resource types to fields.,18,18,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/BindString.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,17,17,,,0,2015-06-27 23:50:27,
butterknife-annotations/src/main/java/butterknife/BindString.java,afcac3e,Jake Wharton,Support binding resource types to fields.,20,20,,,0,2015-03-15 07:44:45,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,6,6,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,31f940d,0,2019-01-04 00:15:29,2018-09-07 16:34:04
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,1,2,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,7,11,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",12,12,Jake Wharton,348f457,0,2018-09-07 16:34:04,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,5,5,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,13,14,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,16,16,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,15,15,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,17,17,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,22,23,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,24,25,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,92542c3,Frederick,Update OnFocusChange.java  Typo in the code example (OnFocusChange -d),18,18,,,0,2014-11-01 13:56:01,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,26,26,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,20,21,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",28,28,Jake Wharton,348f457,0,2018-09-07 16:34:04,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,27,27,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",29,29,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,42,42,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,30,32,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,33,33,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,43,43,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,34,39,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,40,41,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,6a15c27,Jake Wharton,More listeners.,44,44,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnFocusChange.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",19,19,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,5,5,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,13,14,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,7,11,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,1,2,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",12,12,Jake Wharton,348f457,0,2018-09-07 16:34:04,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,31f940d,0,2019-01-04 00:15:29,2018-09-07 16:34:04
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,6,6,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,17,18,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,25,26,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,27,27,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,22,24,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,15,16,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,20,21,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",29,29,Jake Wharton,348f457,0,2018-09-07 16:34:04,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,44,44,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",30,33,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,28,28,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,35,40,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,34,34,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,6a15c27,Jake Wharton,More listeners.,45,45,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,43,43,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,41,42,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",19,19,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,10,14,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,5,9,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1,2,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,348f457,0,2019-01-04 00:15:29,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,15,16,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,17,18,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,20,29,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",19,19,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,45,45,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,31,33,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,46,46,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,35,44,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,34,34,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,49,50,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,47,48,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,51,51,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,57,67,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,52,52,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",30,30,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,69,75,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,68,68,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemSelected.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,53,56,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,31f940d,0,2019-01-04 00:15:29,2018-09-07 16:34:04
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,1,2,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,7,11,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,5,5,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",12,12,Jake Wharton,348f457,0,2018-09-07 16:34:04,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,6,6,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,13,14,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,20,22,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,17,18,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,26,27,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,30,30,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,28,29,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,15,16,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,23,25,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",32,32,Jake Wharton,348f457,0,2018-09-07 16:34:04,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,31,31,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",33,36,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,45,45,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,38,44,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",19,19,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,46,46,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,37,37,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,49,49,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,47,48,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,6a15c27,Jake Wharton,More listeners.,51,51,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnEditorAction.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,50,50,,,0,2015-10-09 23:07:21,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1,2,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,5,10,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,b8791de,0,2019-01-04 00:15:29,2018-09-24 21:24:40
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,15,16,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,12,13,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,14,14,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,11,11,Jake Wharton,01e4e4e,0,2019-02-05 19:39:44,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,31,31,Jake Wharton,01e4e4e,0,2019-02-05 19:39:44,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,27,28,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,29,30,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,32,32,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,18,25,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",26,26,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",17,17,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,33,33,Jake Wharton,72405e7,0,2018-09-24 21:24:40,2018-09-10 21:04:06
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,2e3760e,Christian Becker,Change OnPageChange to use add/removeOnPageChangeListener,34,35,Jake Wharton,348f457,0,2016-06-22 06:18:49,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,36,36,Jake Wharton,72405e7,0,2018-09-24 21:24:40,2018-09-10 21:04:06
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,37,39,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,44,45,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,40,40,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,42,43,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,46,46,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,47,47,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,48,48,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,41,41,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,49,54,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,55,55,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,56,65,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,66,66,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnPageChange.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,67,73,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,1,2,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,5,5,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",12,12,Jake Wharton,348f457,0,2018-09-07 16:34:04,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,7,11,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,13,14,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,31f940d,0,2019-01-04 00:15:29,2018-09-07 16:34:04
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,17,18,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,15,16,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,6,6,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,20,22,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,28,29,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,26,27,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,30,30,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",32,32,Jake Wharton,348f457,0,2018-09-07 16:34:04,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",33,34,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,23,25,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,31,31,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,37,37,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,35,36,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,46,46,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,50,50,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,47,47,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",19,19,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,38,45,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,48,49,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,6a15c27,Jake Wharton,More listeners.,52,52,,,0,2013-11-21 16:26:42,
butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,51,51,,,0,2015-10-09 23:07:21,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,6,11,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,Jeremy Tecson,32aaf83,0,2019-01-04 00:15:29,2018-07-27 01:06:37
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,12,12,Jake Wharton,01e4e4e,0,2019-02-04 23:32:46,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1,3,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,16,17,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,13,14,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,4,4,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,32aaf83,Jeremy Tecson,Fix typo,15,15,Serj Lotutovici,b04891f,1,2018-07-27 01:06:37,2016-05-06 05:18:03
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,19,26,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,33,34,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,36,38,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,35,35,Jake Wharton,01e4e4e,0,2019-02-04 23:32:46,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",18,18,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,29,32,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,4d8bc37,Anton Rieder,Fix Javadoc for OnTextChanged.java,27,27,,,1,2015-02-08 19:07:27,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,39,39,Jake Wharton,348f457,1,2016-05-06 05:18:03,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,40,43,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,44,44,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,48,49,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,45,45,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,51,51,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,50,50,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,46,47,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,76,76,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,53,63,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,52,52,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,64,64,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,65,75,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,77,83,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnTextChanged.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",28,28,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/Optional.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",8,14,,,0,2015-10-12 17:46:19,
butterknife-annotations/src/main/java/butterknife/Optional.java,44dd832,Jake Wharton,Add visibility checks to reflect,7,7,Zac Sweers,a02a908,0,2018-09-07 03:06:24,2015-10-12 17:46:19
butterknife-annotations/src/main/java/butterknife/Optional.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",1,6,,,0,2015-10-12 17:46:19,
butterknife-annotations/src/main/java/butterknife/Optional.java,44dd832,Jake Wharton,Add visibility checks to reflect,15,16,Zac Sweers,a02a908,0,2018-09-07 03:06:24,2015-10-12 17:46:19
butterknife-annotations/src/main/java/butterknife/Optional.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",17,18,,,0,2015-10-12 17:46:19,
butterknife-compiler/gradle.properties,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,3,,,0,2015-09-26 03:41:19,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,8e38433,0,2019-01-04 00:15:29,2018-09-10 21:11:41
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,5,11,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,13,16,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,12,12,Jake Wharton,348f457,0,2018-09-10 21:11:41,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,1,2,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,47cb863,Nelson Osacky,fix documentation for @OnTouch,17,17,,,1,2015-03-06 06:10:31,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,20,24,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,25,26,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,27,28,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,29,30,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,43,43,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,32,42,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,31,31,Jake Wharton,348f457,0,2018-09-10 21:11:41,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnTouch.java,47cb863,Nelson Osacky,fix documentation for @OnTouch,19,19,,,1,2015-03-06 06:10:31,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,49,49,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,3f84474,Jake Wharton,Add touch listener callback support.,44,47,,,0,2014-05-21 00:20:32,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",18,18,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnTouch.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,48,48,,,0,2015-10-09 23:07:21,
butterknife-compiler/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",2,3,,,0,2015-09-26 03:41:19,
butterknife-compiler/build.gradle,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",6,6,Jake Wharton,348f457,1,2016-04-02 04:53:49,2015-10-09 23:07:21
butterknife-compiler/build.gradle,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,4,5,Jake Wharton,77824fb,0,2018-10-10 21:27:34,2017-10-07 03:41:14
butterknife-compiler/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,1,1,Jake Wharton,0b2c1aa,0,2017-07-28 17:23:19,2017-05-08 18:41:11
butterknife-compiler/build.gradle,77824fb,Jake Wharton,Depend directly on Guava from the compiler.,10,10,Jake Wharton,4db9358,0,2017-10-07 03:41:14,2017-07-31 20:47:30
butterknife-compiler/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",7,7,,,0,2015-09-26 03:41:19,
butterknife-compiler/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,8,9,Madis Pink,aea1492,0,2017-07-28 17:23:19,2017-03-07 20:56:08
butterknife-compiler/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",14,14,,,0,2015-09-26 03:41:19,
butterknife-compiler/build.gradle,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",15,17,Jake Wharton,0efcf39,0,2019-09-05 03:12:28,2018-10-10 21:27:34
butterknife-compiler/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",20,29,,,0,2015-09-26 03:41:19,
butterknife-compiler/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,18,19,Jake Wharton,0b2c1aa,0,2017-07-28 17:23:19,2017-05-08 18:41:11
butterknife-compiler/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,13,13,Jake Wharton,3474f0f,0,2016-06-19 19:32:42,2015-10-01 04:38:48
butterknife-compiler/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,12,12,Jake Wharton,3474f0f,0,2017-05-08 18:41:11,2015-10-01 04:38:48
butterknife-compiler/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,11,11,Jake Wharton,3474f0f,0,2017-07-28 17:23:19,2015-10-01 04:38:48
butterknife-compiler/src/main/java/butterknife/compiler/FieldAnimationBinding.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,1,28,,,0,2017-07-02 19:18:54,
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,12,13,Jake Wharton,53a4d91,0,2016-08-23 15:56:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,8b97101,Jake Wharton,Initial commit.,6,6,,,0,2013-03-05 08:55:13,
butterknife/src/main/java/butterknife/ButterKnife.java,8b97101,Jake Wharton,Initial commit.,1,3,,,0,2013-03-05 08:55:13,
butterknife/src/main/java/butterknife/ButterKnife.java,e7d2365,Jake Wharton,Support dialog injection.,4,4,,,0,2014-05-04 08:35:08,
butterknife/src/main/java/butterknife/ButterKnife.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,5,5,,,0,2013-07-18 07:35:50,
butterknife/src/main/java/butterknife/ButterKnife.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,15,15,,,0,2014-04-14 07:02:54,
butterknife/src/main/java/butterknife/ButterKnife.java,8b97101,Jake Wharton,Initial commit.,14,14,,,0,2013-03-05 08:55:13,
butterknife/src/main/java/butterknife/ButterKnife.java,01e4e4e,Jake Wharton,Remove legacy support,7,11,Maciej Kaznowski,e9c1533,0,2019-01-04 00:15:29,2018-11-25 06:31:27
butterknife/src/main/java/butterknife/ButterKnife.java,8b97101,Jake Wharton,Initial commit.,16,16,,,0,2013-03-05 08:55:13,
butterknife/src/main/java/butterknife/ButterKnife.java,8b97101,Jake Wharton,Initial commit.,17,17,,,0,2013-03-05 08:55:13,
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",18,18,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",21,21,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",23,24,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,5233a90,Jake Wharton,Javadoc cleanup,22,22,Jake Wharton,afcac3e,0,2015-04-17 04:18:10,2015-03-15 07:44:45
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,25,26,Zac Sweers,1bc7bc1,0,2016-04-23 07:46:57,2016-04-02 04:53:49
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,19,20,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",27,30,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,31,31,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
butterknife/src/main/java/butterknife/ButterKnife.java,5233a90,Jake Wharton,Javadoc cleanup,35,35,Jake Wharton,afcac3e,0,2015-04-17 04:18:10,2015-03-15 07:44:45
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",32,34,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,36,39,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",40,40,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,44,45,,,0,2014-04-14 07:02:54,
butterknife/src/main/java/butterknife/ButterKnife.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,41,42,,,0,2014-04-14 07:02:54,
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,43,43,Zac Sweers,1bc7bc1,0,2016-04-23 07:46:57,2016-04-02 04:53:49
butterknife/src/main/java/butterknife/ButterKnife.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,46,46,,,0,2014-04-14 07:02:54,
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",48,59,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,47,47,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",64,64,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,053159f,ytRino,Fix Javadoc,69,71,Jake Wharton,0ffaf1f,1,2015-07-02 08:45:39,2015-06-27 23:50:27
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",66,66,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,afcac3e,Jake Wharton,Support binding resource types to fields.,67,68,Tom Reznik,7f0f4f0,0,2015-03-15 07:44:45,2015-03-14 05:04:59
butterknife/src/main/java/butterknife/ButterKnife.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",73,73,,,0,2013-11-21 13:58:16,
butterknife/src/main/java/butterknife/ButterKnife.java,018c2dd,Jake Wharton,Final.,74,74,,,0,2014-04-10 16:49:03,
butterknife/src/main/java/butterknife/ButterKnife.java,afcac3e,Jake Wharton,Support binding resource types to fields.,72,72,Jake Wharton,ec778ad,0,2015-03-15 07:44:45,2015-03-15 00:06:02
butterknife/src/main/java/butterknife/ButterKnife.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,76,76,,,0,2014-04-14 07:02:54,
butterknife/src/main/java/butterknife/ButterKnife.java,af2ce88,Jake Wharton,Rename main class to 'ButterKnife'.,75,75,,,0,2013-11-18 13:27:28,
butterknife/src/main/java/butterknife/ButterKnife.java,8b97101,Jake Wharton,Initial commit.,77,78,,,0,2013-03-05 08:55:13,
butterknife/src/main/java/butterknife/ButterKnife.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,85,86,,,0,2013-07-18 07:35:50,
butterknife/src/main/java/butterknife/ButterKnife.java,741824d,Jake Wharton,Cache injector lookup by class.,84,84,,,0,2013-03-05 17:42:24,
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,60,60,,,0,2015-03-15 00:06:02,
butterknife/src/main/java/butterknife/ButterKnife.java,af2ce88,Jake Wharton,Rename main class to 'ButterKnife'.,87,87,,,0,2013-11-18 13:27:28,
butterknife/src/main/java/butterknife/ButterKnife.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,79,81,,,0,2013-07-18 07:35:50,
butterknife/src/main/java/butterknife/ButterKnife.java,066eaaa,Jake Wharton,Add custom exception type for injection failure.  Clarify some javadocs around the inject methods with this new exception as well as parameters.,90,90,,,1,2013-03-05 19:32:19,
butterknife/src/main/java/butterknife/ButterKnife.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,92,92,,,0,2014-04-19 09:25:39,
butterknife/src/main/java/butterknife/ButterKnife.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,88,89,,,0,2013-07-18 07:35:50,
butterknife/src/main/java/butterknife/ButterKnife.java,066eaaa,Jake Wharton,Add custom exception type for injection failure.  Clarify some javadocs around the inject methods with this new exception as well as parameters.,95,95,,,1,2013-03-05 19:32:19,
butterknife/src/main/java/butterknife/ButterKnife.java,066eaaa,Jake Wharton,Add custom exception type for injection failure.  Clarify some javadocs around the inject methods with this new exception as well as parameters.,93,93,,,1,2013-03-05 19:32:19,
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,91,91,Jake Wharton,7de8cf7,0,2016-04-23 07:46:57,2015-10-10 00:06:43
butterknife/src/main/java/butterknife/ButterKnife.java,f4ff41b,Jake Wharton,Spread on more annotations.,96,96,Malyshev Yegor,b051410,0,2016-06-19 20:11:28,2016-05-26 20:30:12
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",99,99,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",97,97,Jake Wharton,7de8cf7,1,2016-04-02 04:53:49,2015-10-10 00:06:43
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,94,94,Tho Nguyen,bcf359f,0,2015-03-15 00:06:02,2015-01-20 08:08:56
butterknife/src/main/java/butterknife/ButterKnife.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,100,102,,,0,2013-03-05 19:08:11,
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,103,103,Serj Lotutovici,d4c2754,0,2016-04-23 07:46:57,2015-11-24 17:04:10
butterknife/src/main/java/butterknife/ButterKnife.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,104,104,,,0,2014-04-19 09:25:39,
butterknife/src/main/java/butterknife/ButterKnife.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,98,98,Malyshev Yegor,b051410,0,2016-08-23 02:02:21,2016-05-26 20:30:12
butterknife/src/main/java/butterknife/ButterKnife.java,05fee10,Jake Wharton,Add view injection and injection using activity support.  Closes #6.,107,107,,,0,2013-03-07 07:24:45,
butterknife/src/main/java/butterknife/ButterKnife.java,05fee10,Jake Wharton,Add view injection and injection using activity support.  Closes #6.,105,105,,,0,2013-03-07 07:24:45,
butterknife/src/main/java/butterknife/ButterKnife.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",109,109,Serj Lotutovici,d4c2754,1,2016-04-02 04:53:49,2015-11-24 17:04:10
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",110,110,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,f4ff41b,Jake Wharton,Spread on more annotations.,108,108,Serj Lotutovici,d4c2754,0,2016-06-19 20:11:28,2015-11-24 17:04:10
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,106,106,Tho Nguyen,bcf359f,0,2015-03-15 00:06:02,2015-01-20 08:08:56
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,114,114,Zac Sweers,1bc7bc1,0,2016-04-23 07:46:57,2016-04-02 04:53:49
butterknife/src/main/java/butterknife/ButterKnife.java,e7d2365,Jake Wharton,Support dialog injection.,118,118,,,0,2014-05-04 08:35:08,
butterknife/src/main/java/butterknife/ButterKnife.java,05fee10,Jake Wharton,Add view injection and injection using activity support.  Closes #6.,111,113,,,0,2013-03-07 07:24:45,
butterknife/src/main/java/butterknife/ButterKnife.java,e7d2365,Jake Wharton,Support dialog injection.,115,116,,,0,2014-05-04 08:35:08,
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,117,117,Tho Nguyen,bcf359f,0,2015-03-15 00:06:02,2015-01-20 08:08:56
butterknife/src/main/java/butterknife/ButterKnife.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",120,120,Serj Lotutovici,d4c2754,1,2016-04-02 04:53:49,2015-11-24 17:04:10
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",122,122,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,e7d2365,Jake Wharton,Support dialog injection.,123,125,,,0,2014-05-04 08:35:08,
butterknife/src/main/java/butterknife/ButterKnife.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,121,121,Jake Wharton,91cb862,0,2016-08-23 02:02:21,2016-06-20 06:18:53
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,65,65,,,0,2016-04-23 07:46:57,
butterknife/src/main/java/butterknife/ButterKnife.java,f4ff41b,Jake Wharton,Spread on more annotations.,119,119,Zac Sweers,1bc7bc1,0,2016-06-19 20:11:28,2016-04-02 04:53:49
butterknife/src/main/java/butterknife/ButterKnife.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",61,63,,,0,2015-10-12 17:46:19,
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,126,126,Zac Sweers,1bc7bc1,0,2016-04-23 07:46:57,2016-04-02 04:53:49
butterknife/src/main/java/butterknife/ButterKnife.java,066eaaa,Jake Wharton,Add custom exception type for injection failure.  Clarify some javadocs around the inject methods with this new exception as well as parameters.,128,128,,,1,2013-03-05 19:32:19,
butterknife/src/main/java/butterknife/ButterKnife.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,127,127,,,0,2014-04-19 09:25:39,
butterknife/src/main/java/butterknife/ButterKnife.java,85c324a,Jake Wharton,Flip ordering for consistency.,130,130,,,0,2013-03-07 07:26:14,
butterknife/src/main/java/butterknife/ButterKnife.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,136,137,,,0,2013-03-05 19:08:11,
butterknife/src/main/java/butterknife/ButterKnife.java,f4ff41b,Jake Wharton,Spread on more annotations.,132,132,Malyshev Yegor,b051410,0,2016-06-19 20:11:28,2016-05-26 20:30:12
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,129,129,Jake Wharton,4daa4e4,0,2015-03-15 00:06:02,2015-03-03 21:37:33
butterknife/src/main/java/butterknife/ButterKnife.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,134,134,Jake Wharton,91cb862,0,2016-08-23 02:02:21,2016-06-20 06:18:53
butterknife/src/main/java/butterknife/ButterKnife.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,131,131,,,0,2013-03-05 19:08:11,
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",135,135,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,05fee10,Jake Wharton,Add view injection and injection using activity support.  Closes #6.,138,138,,,0,2013-03-07 07:24:45,
butterknife/src/main/java/butterknife/ButterKnife.java,05fee10,Jake Wharton,Add view injection and injection using activity support.  Closes #6.,141,141,,,0,2013-03-07 07:24:45,
butterknife/src/main/java/butterknife/ButterKnife.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",133,133,Serj Lotutovici,d4c2754,1,2016-04-02 04:53:49,2015-11-24 17:04:10
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,139,139,Zac Sweers,1bc7bc1,0,2016-04-23 07:46:57,2016-04-02 04:53:49
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",140,140,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,05fee10,Jake Wharton,Add view injection and injection using activity support.  Closes #6.,144,144,,,0,2013-03-07 07:24:45,
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",143,143,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,05fee10,Jake Wharton,Add view injection and injection using activity support.  Closes #6.,149,149,,,0,2013-03-07 07:24:45,
butterknife/src/main/java/butterknife/ButterKnife.java,f4ff41b,Jake Wharton,Spread on more annotations.,145,145,Malyshev Yegor,b051410,0,2016-06-19 20:11:28,2016-05-26 20:30:12
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",146,148,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,58ad74f,Jake Wharton,Docs. Fix tests. Etc.,151,151,,,1,2013-06-04 05:15:19,
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,142,142,Jake Wharton,4daa4e4,0,2015-03-15 00:06:02,2015-03-03 21:37:33
butterknife/src/main/java/butterknife/ButterKnife.java,159fe07,Jake Wharton,Add test to ensure zero-target injections work.,150,150,,,0,2013-03-25 05:31:51,
butterknife/src/main/java/butterknife/ButterKnife.java,e7d2365,Jake Wharton,Support dialog injection.,154,154,,,0,2014-05-04 08:35:08,
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",153,153,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",156,156,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,e7d2365,Jake Wharton,Support dialog injection.,157,157,,,0,2014-05-04 08:35:08,
butterknife/src/main/java/butterknife/ButterKnife.java,ccc57f4,Dandre' Allison,Scopes targetClass correctly,160,160,,,0,2013-03-25 01:54:23,
butterknife/src/main/java/butterknife/ButterKnife.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,152,152,Serj Lotutovici,d4c2754,0,2016-04-23 07:46:57,2015-11-24 17:04:10
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,161,184,Jake Wharton,53a4d91,0,2016-08-23 15:56:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,36601bd,Jake Wharton,"Inline createBinding into bind(Object, View)  No need for the extra stack frame when the signatures are the same and the latter simply delegated to the former.",159,159,Jake Wharton,eb7e695,0,2018-09-06 21:03:44,2018-09-06 17:49:36
butterknife/src/main/java/butterknife/ButterKnife.java,f4ff41b,Jake Wharton,Spread on more annotations.,158,158,Malyshev Yegor,b051410,0,2016-06-19 20:11:28,2016-05-26 20:30:12
butterknife/src/main/java/butterknife/ButterKnife.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,155,155,Tho Nguyen,bcf359f,0,2015-03-15 00:06:02,2015-01-20 08:08:56
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,191,192,Jake Wharton,53a4d91,0,2016-08-23 15:56:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,187,189,Jake Wharton,53a4d91,0,2016-08-23 15:56:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,e9c1533,Maciej Kaznowski,Explicitly check BINDINGS if it has cached a null result,190,190,Jay Newstrom,e32dca3,0,2018-11-25 06:31:27,2018-09-08 23:44:18
butterknife/src/main/java/butterknife/ButterKnife.java,7795c1c,Simon Vig Therkildsen,Add Views#reset method for nulling injected variables,193,194,,,0,2013-05-13 18:36:42,
butterknife/src/main/java/butterknife/ButterKnife.java,7f01c9d,Jake Wharton,Ensure injection happens on classes who do not have any injections but their superclasses do.  Closes #28.,185,186,,,0,2013-04-24 01:43:36,
butterknife/src/main/java/butterknife/ButterKnife.java,e32dca3,Jay Newstrom,Stop search at androidx.,195,196,Jake Wharton,36601bd,0,2018-09-08 23:44:18,2018-09-06 21:03:44
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,198,198,Jake Wharton,53a4d91,0,2016-08-23 15:56:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,197,197,,,0,2013-07-18 07:35:50,
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,203,204,Jake Wharton,53a4d91,0,2016-08-23 15:56:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,7795c1c,Simon Vig Therkildsen,Add Views#reset method for nulling injected variables,199,200,,,0,2013-05-13 18:36:42,
butterknife/src/main/java/butterknife/ButterKnife.java,7795c1c,Simon Vig Therkildsen,Add Views#reset method for nulling injected variables,205,205,,,0,2013-05-13 18:36:42,
butterknife/src/main/java/butterknife/ButterKnife.java,bcf359f,Tho Nguyen,"Performance tuning for finding injector/resettor  Instead of looping through the class inheritance hierarchy twice for 2 call (inject & reset), do it only once.",202,202,,,0,2015-01-20 08:08:56,
butterknife/src/main/java/butterknife/ButterKnife.java,ff84679,wuzhong,"use getClassLoader().loadClass() replace for Class.forName , because our atlas has bundle classLoader",201,201,Jake Wharton,53a4d91,0,2017-04-05 07:13:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,206,206,,,0,2013-07-18 07:35:50,
butterknife/src/main/java/butterknife/ButterKnife.java,7795c1c,Simon Vig Therkildsen,Add Views#reset method for nulling injected variables,210,210,,,0,2013-05-13 18:36:42,
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,207,209,Jake Wharton,53a4d91,0,2016-08-23 15:56:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,211,212,Jake Wharton,53a4d91,0,2016-08-23 15:56:29,2016-08-23 02:02:21
butterknife/src/main/java/butterknife/ButterKnife.java,8b97101,Jake Wharton,Initial commit.,214,214,,,0,2013-03-05 08:55:13,
butterknife/src/main/java/butterknife/ButterKnife.java,7795c1c,Simon Vig Therkildsen,Add Views#reset method for nulling injected variables,213,213,,,0,2013-05-13 18:36:42,
butterknife/src/main/java/butterknife/ButterKnife.java,29551fc,Jake Wharton,Remove the need for the binder class.,82,83,Jake Wharton,37f3be7,0,2016-08-23 15:56:29,2015-06-30 22:44:17
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,159fe07,Jake Wharton,Add test to ensure zero-target injections work.,1,2,,,0,2013-03-25 05:31:51,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,3,3,Jake Wharton,29551fc,0,2016-09-09 04:41:58,2016-08-23 15:56:29
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,159fe07,Jake Wharton,Add test to ensure zero-target injections work.,8,8,,,0,2013-03-25 05:31:51,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,7f01c9d,Jake Wharton,Ensure injection happens on classes who do not have any injections but their superclasses do.  Closes #28.,7,7,,,0,2013-04-24 01:43:36,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,58ad74f,Jake Wharton,Docs. Fix tests. Etc.,6,6,,,1,2013-06-04 05:15:19,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,4,4,,,0,2014-04-14 07:02:54,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,Maciej Kaznowski,e9c1533,0,2019-01-04 00:15:29,2018-11-25 06:31:27
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,7f01c9d,Jake Wharton,Ensure injection happens on classes who do not have any injections but their superclasses do.  Closes #28.,11,11,,,0,2013-04-24 01:43:36,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,58ad74f,Jake Wharton,Docs. Fix tests. Etc.,16,16,,,1,2013-06-04 05:15:19,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,af2ce88,Jake Wharton,Rename main class to 'ButterKnife'.,12,12,,,0,2013-11-18 13:27:28,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,13,14,Jake Wharton,29551fc,0,2016-09-09 04:41:58,2016-08-23 15:56:29
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,7f01c9d,Jake Wharton,Ensure injection happens on classes who do not have any injections but their superclasses do.  Closes #28.,18,19,,,0,2013-04-24 01:43:36,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,15,15,,,0,2015-06-27 23:50:27,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,159fe07,Jake Wharton,Add test to ensure zero-target injections work.,21,24,,,0,2013-03-25 05:31:51,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,c17c16c,Jake Wharton,Add error-prone and NullAway,27,27,Jake Wharton,eb7e695,1,2018-09-10 21:26:24,2018-09-06 17:49:36
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,7f01c9d,Jake Wharton,Ensure injection happens on classes who do not have any injections but their superclasses do.  Closes #28.,29,30,,,0,2013-04-24 01:43:36,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,e9c1533,Maciej Kaznowski,Explicitly check BINDINGS if it has cached a null result,26,26,Jake Wharton,c17c16c,0,2018-11-25 06:31:27,2018-09-10 21:26:24
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,c17c16c,Jake Wharton,Add error-prone and NullAway,25,25,Jake Wharton,29551fc,1,2018-09-10 21:26:24,2016-08-23 15:56:29
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,e9c1533,Maciej Kaznowski,Explicitly check BINDINGS if it has cached a null result,20,20,Jake Wharton,29551fc,0,2018-11-25 06:31:27,2016-08-23 15:56:29
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,e9c1533,Maciej Kaznowski,Explicitly check BINDINGS if it has cached a null result,28,28,Jake Wharton,c17c16c,0,2018-11-25 06:31:27,2018-09-10 21:26:24
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,32,33,Jake Wharton,29551fc,0,2016-09-09 04:41:58,2016-08-23 15:56:29
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,35,35,Jake Wharton,29551fc,0,2016-09-09 04:41:58,2016-08-23 15:56:29
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,159fe07,Jake Wharton,Add test to ensure zero-target injections work.,37,38,,,0,2013-03-25 05:31:51,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,31,31,,,0,2015-06-27 23:50:27,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",9,9,,,1,2016-04-02 04:53:49,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",10,10,,,0,2015-10-01 03:10:22,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,17,17,,,0,2016-08-23 15:56:29,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,34,34,,,0,2016-08-23 15:56:29,
butterknife/src/androidTest/java/butterknife/ButterKnifeTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,36,36,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,8,9,Gautam Korlam,20aad6c,0,2016-09-09 02:40:56,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,3,6,Gautam Korlam,20aad6c,0,2016-09-09 02:40:56,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),7,7,Jake Wharton,c89c374,1,2018-04-13 15:23:50,2016-09-09 04:41:58
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,2,2,,,0,2015-09-30 01:30:53,
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,11,11,,,0,2015-09-30 01:30:53,
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,Luka Cindro,45dd9ed,0,2015-09-30 02:54:34,2015-09-30 01:30:53
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,20aad6c,Gautam Korlam,Support Android Library Projects,12,12,Jake Wharton,3946d1e,0,2016-06-19 19:32:42,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,20aad6c,Gautam Korlam,Support Android Library Projects,10,10,Jake Wharton,3946d1e,0,2016-06-19 19:32:42,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,13,13,,,0,2015-09-30 01:30:53,
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,01e4e4e,Jake Wharton,Remove legacy support,14,14,Jake Wharton,b8791de,0,2019-01-04 00:15:29,2018-09-24 21:24:40
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,15,19,,,0,2015-09-30 01:30:53,
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,20,20,Gautam Korlam,20aad6c,0,2016-09-09 02:40:56,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,28,28,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,26,27,,,0,2015-09-30 01:30:53,
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,24,24,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,21,23,,,0,2015-09-30 01:30:53,
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,25,25,Gautam Korlam,20aad6c,0,2016-09-09 02:40:56,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),29,29,Jake Wharton,c89c374,1,2018-04-13 15:23:50,2016-09-09 04:41:58
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,30,32,Gautam Korlam,20aad6c,0,2016-09-09 02:40:56,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,33,35,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,01e4e4e,Jake Wharton,Remove legacy support,36,36,Jake Wharton,b8791de,0,2019-01-04 00:15:29,2018-09-24 21:24:40
butterknife-compiler/src/main/java/butterknife/compiler/FieldDrawableBinding.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,37,38,,,0,2015-09-30 01:30:53,
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,1,2,,,0,2017-07-07 14:17:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,b8791de,0,2019-01-04 00:15:29,2018-09-24 21:24:40
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,40,49,,,0,2017-07-07 14:17:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),9,9,Jake Wharton,1ec7d8d,0,2018-06-14 19:57:14,2017-08-04 17:11:15
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,4,7,,,0,2017-07-07 14:17:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,1ec7d8d,Jake Wharton,Correct @BindFont code generation pre-API 26.,50,50,Jake Wharton,ee2043f,1,2017-08-04 17:11:15,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,8,8,Warren Smith,f0b7351,0,2018-09-24 21:24:40,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,10,38,,,0,2017-07-07 14:17:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,01e4e4e,Jake Wharton,Remove legacy support,39,39,Jake Wharton,b8791de,0,2019-01-04 00:15:29,2018-09-24 21:24:40
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,57,62,,,0,2017-07-07 14:17:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,01e4e4e,Jake Wharton,Remove legacy support,56,56,Jake Wharton,b8791de,0,2019-01-04 00:15:29,2018-09-24 21:24:40
butterknife-compiler/src/main/java/butterknife/compiler/FieldTypefaceBinding.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,51,55,,,0,2017-07-07 14:17:45,
butterknife-annotations/src/main/java/butterknife/OnClick.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,cd17a87,0,2019-01-04 00:15:29,2018-09-07 02:54:16
butterknife-annotations/src/main/java/butterknife/OnClick.java,912fecf,Jake Wharton,Add @OnClick method injection.,1,2,,,0,2013-07-10 06:11:01,
butterknife-annotations/src/main/java/butterknife/OnClick.java,912fecf,Jake Wharton,Add @OnClick method injection.,7,9,,,0,2013-07-10 06:11:01,
butterknife-annotations/src/main/java/butterknife/OnClick.java,912fecf,Jake Wharton,Add @OnClick method injection.,11,11,,,0,2013-07-10 06:11:01,
butterknife-annotations/src/main/java/butterknife/OnClick.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,12,12,Jake Wharton,348f457,0,2018-09-07 02:54:16,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnClick.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,5,5,,,0,2013-11-21 01:57:59,
butterknife-annotations/src/main/java/butterknife/OnClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",10,10,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnClick.java,912fecf,Jake Wharton,Add @OnClick method injection.,13,13,,,0,2013-07-10 06:11:01,
butterknife-annotations/src/main/java/butterknife/OnClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,6,6,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",14,14,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",16,17,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnClick.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",26,26,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",19,20,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnClick.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,15,15,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnClick.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,28,28,Jake Wharton,348f457,0,2018-09-07 02:54:16,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",24,25,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,21,23,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnClick.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",29,31,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/OnClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,27,27,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,33,33,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnClick.java,43f6a81,Jake Wharton,Rename deboucing click listener.,32,32,,,0,2014-10-27 23:49:35,
butterknife-annotations/src/main/java/butterknife/OnClick.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,40,40,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/OnClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,37,38,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,35,36,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnClick.java,9b34d19,Pierre-Yves Ricau,Debouncing click listeners  Avoids double OnClick calls when the main thread hangs.,34,34,,,0,2014-08-06 23:08:33,
butterknife-annotations/src/main/java/butterknife/OnClick.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",18,18,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnClick.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,39,39,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnClick.java,912fecf,Jake Wharton,Add @OnClick method injection.,41,41,,,0,2013-07-10 06:11:01,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,5431667,0,2019-01-04 00:15:29,2018-09-07 13:36:32
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,11,11,,,0,2013-11-19 21:42:17,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,12,12,Jake Wharton,348f457,0,2018-09-07 13:36:32,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,1,2,,,0,2013-11-19 21:42:17,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,7,9,,,0,2013-11-19 21:42:17,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,13,13,,,0,2013-11-19 21:42:17,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,5,5,,,0,2013-11-21 01:57:59,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",10,10,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",14,14,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,6,6,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,15,16,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",20,21,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",17,18,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",24,25,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",26,26,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,28,28,Jake Wharton,348f457,0,2018-09-07 13:36:32,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,22,23,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",29,32,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,45,45,Michael Evans,05eae6d,0,2015-10-09 23:07:21,2015-09-26 03:41:19
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,27,27,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",19,19,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,42,43,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,34,41,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,44,44,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,33,33,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnItemClick.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,46,46,,,0,2013-11-19 21:42:17,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,7c8c369,Jake Wharton,Emit proper references to R types.,7,7,Gautam Korlam,20aad6c,0,2016-06-19 19:49:08,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,2,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,7c8c369,Jake Wharton,Emit proper references to R types.,4,5,Gautam Korlam,20aad6c,0,2016-06-19 19:49:08,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,6,6,Jake Wharton,4a93e50,0,2018-04-10 15:14:21,2016-07-11 00:21:43
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,4a93e50,Jake Wharton,Do not emit imports for 'android.R' classes.,12,12,Gautam Korlam,e770b83,0,2016-07-11 00:21:43,2016-06-21 05:33:34
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,20aad6c,Gautam Korlam,Support Android Library Projects,8,11,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,13,13,Jake Wharton,4a93e50,0,2018-04-10 15:14:21,2016-07-11 00:21:43
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,c17c16c,0,2019-01-04 00:15:29,2018-09-10 21:26:24
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,4a93e50,Jake Wharton,Do not emit imports for 'android.R' classes.,14,14,Gautam Korlam,e770b83,0,2016-07-11 00:21:43,2016-06-21 05:33:34
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,7c8c369,Jake Wharton,Emit proper references to R types.,15,16,Gautam Korlam,20aad6c,0,2016-06-19 19:49:08,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,8813451,Jake Wharton,Omit warning suppression when all resource references are qualified.,17,17,Jake Wharton,7c8c369,0,2016-06-20 19:00:36,2016-06-19 19:49:08
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,7c8c369,Jake Wharton,Emit proper references to R types.,19,19,Gautam Korlam,20aad6c,0,2016-06-19 19:49:08,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,20,20,Jake Wharton,4a93e50,0,2018-04-10 15:14:21,2016-07-11 00:21:43
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,20aad6c,Gautam Korlam,Support Android Library Projects,21,22,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,7c8c369,Jake Wharton,Emit proper references to R types.,24,24,Gautam Korlam,20aad6c,0,2016-06-19 19:49:08,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,20aad6c,Gautam Korlam,Support Android Library Projects,38,40,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,20aad6c,Gautam Korlam,Support Android Library Projects,18,18,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,c17c16c,Jake Wharton,Add error-prone and NullAway,23,23,Gautam Korlam,b4cfd88,1,2018-09-10 21:26:24,2018-04-10 15:14:21
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,25,37,Jake Wharton,4a93e50,0,2018-04-10 15:14:21,2016-07-11 00:21:43
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,7c8c369,Jake Wharton,Emit proper references to R types.,41,41,,,0,2016-06-19 19:49:08,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,20aad6c,Gautam Korlam,Support Android Library Projects,42,44,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,7c8c369,Jake Wharton,Emit proper references to R types.,45,45,,,0,2016-06-19 19:49:08,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,20aad6c,Gautam Korlam,Support Android Library Projects,50,51,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,20aad6c,Gautam Korlam,Support Android Library Projects,46,48,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/Id.java,e770b83,Gautam Korlam,Do not allow toString() operation on Id,49,49,,,0,2016-06-21 05:33:34,
butterknife-compiler/src/main/java/butterknife/compiler/MemberViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,1,7,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,5,9,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,2,2,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,13,20,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,11,11,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,Jake Wharton,48798f6,0,2015-09-30 02:54:34,2015-08-11 23:10:29
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,22,23,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,10,10,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,27,27,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,12,12,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,3,4,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,21,21,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,28,28,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,26,26,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/Parameter.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,24,25,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,7,7,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,11,11,Jake Wharton,e9dfe17,0,2019-02-05 17:05:58,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,2,2,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,8,8,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,10,10,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,Serj Lotutovici,66e050d,0,2015-09-30 02:54:34,2015-08-02 00:51:58
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,9,9,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,3,6,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,15,15,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,12,12,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,19,20,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,17,17,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,21,21,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,13,14,Jake Wharton,e9dfe17,0,2019-02-05 17:05:58,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,18,18,Jake Wharton,e9dfe17,0,2019-02-05 17:05:58,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,22,24,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,25,26,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,31,32,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,36,39,Jake Wharton,e9dfe17,0,2019-02-05 17:05:58,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,27,28,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,34,35,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,7f8c132,Jake Wharton,Remove unused interface method on Binding.,33,33,,,0,2014-04-14 05:47:15,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,40,40,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,29,30,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/MethodViewBinding.java,95f2303,Tom Reznik,Use Java 7 language level.,16,16,,,0,2015-07-29 21:00:47,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,Jake Wharton,48798f6,0,2015-09-30 02:54:34,2015-08-11 23:10:29
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,3,3,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,2,2,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,8d7f081,Christian Becker,Use Finder.find*ViewAsType instead of performing a manual cast,4,4,Jake Wharton,3946d1e,0,2016-06-29 19:44:49,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,8,11,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,6,6,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,15,20,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,23,23,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,21,22,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,12,12,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,7,7,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,13,14,Jake Wharton,d05a1bb,0,2018-09-06 22:56:28,2017-07-18 06:28:05
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,5,5,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,c58aa07,Jake Wharton,Support optional view bag injection.,26,26,,,0,2014-05-21 00:03:04,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,25,25,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,27,27,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,29,30,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,24,24,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,28,28,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,31,33,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,34,34,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,36,37,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,c58aa07,Jake Wharton,Support optional view bag injection.,35,35,,,0,2014-05-21 00:03:04,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,38,38,Jake Wharton,0fe8995,0,2017-07-18 06:28:05,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,48,48,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,46,46,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,49,55,Jake Wharton,0fe8995,0,2017-07-18 06:28:05,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,47,47,Jake Wharton,0fe8995,0,2017-07-18 06:28:05,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,39,45,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,63,71,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,62,62,Jake Wharton,0fe8995,0,2017-07-18 06:28:05,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,56,61,Christian Becker,8d7f081,0,2016-09-09 05:14:19,2016-06-29 19:44:49
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,74,74,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,75,75,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,8d7f081,Christian Becker,Use Finder.find*ViewAsType instead of performing a manual cast,72,72,,,0,2016-06-29 19:44:49,
butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,73,73,,,0,2016-09-09 05:14:19,
butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,12,12,,,0,2016-09-09 02:40:56,
butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,9,9,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,1,8,,,0,2016-09-09 02:40:56,
butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,11,11,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/ResourceBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,10,10,,,0,2016-09-09 02:40:56,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,2,2,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,edcf4a9,Jake Wharton,Skip storing to local when not needed. Cast explicitly to target.,3,4,Jake Wharton,3b83992,0,2016-05-07 23:13:44,2016-05-07 20:50:31
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,8,8,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,10,11,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,7,7,Jake Wharton,edcf4a9,0,2016-11-08 15:12:12,2016-05-07 23:13:44
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,18,18,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,Jake Wharton,48798f6,0,2015-09-30 02:54:34,2015-08-11 23:10:29
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,13,17,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,23,23,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,24,25,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,edcf4a9,Jake Wharton,Skip storing to local when not needed. Cast explicitly to target.,26,32,Jake Wharton,3b83992,0,2016-05-07 23:13:44,2016-05-07 20:50:31
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,35,36,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,19,21,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,33,34,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,9,9,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,7f8c132,Jake Wharton,Remove unused interface method on Binding.,37,37,,,0,2014-04-14 05:47:15,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,38,40,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,12,12,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,5,6,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,22,22,,,0,2015-08-11 23:10:29,
butterknife-gradle-plugin/gradle.properties,20aad6c,Gautam Korlam,Support Android Library Projects,1,3,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,Serj Lotutovici,66e050d,0,2015-09-30 02:54:34,2015-08-02 00:51:58
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,2,2,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,3,10,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,12,15,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,11,11,Jared Burrows,f4949e3,1,2018-09-10 21:26:24,2017-05-11 19:47:30
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,19,19,Jared Burrows,f4949e3,1,2018-09-10 21:26:24,2017-05-11 19:47:30
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,17,18,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,16,16,Jared Burrows,f4949e3,1,2018-09-10 21:26:24,2017-05-11 19:47:30
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,77,77,Jared Burrows,f4949e3,1,2018-09-10 21:26:24,2017-05-11 19:47:30
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,20,28,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,29,29,Jared Burrows,f4949e3,1,2018-09-10 21:26:24,2017-05-11 19:47:30
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,30,76,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),79,79,Jake Wharton,e9dfe17,0,2017-05-11 19:47:30,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,116,116,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,80,115,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-compiler/src/main/java/butterknife/compiler/ViewBinding.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,78,78,Jake Wharton,3946d1e,0,2016-11-08 15:12:12,2015-09-30 02:54:34
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",1,3,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",4,4,Jake Wharton,01e4e4e,0,2019-12-18 16:23:01,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",9,14,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,c58b01c,Jake Wharton,Use US locale to uppercase annotation first letter,8,8,Chris Warrington,96ecdb3,0,2018-12-20 02:20:48,2018-11-18 07:08:31
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",25,41,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",5,7,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",15,23,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,01e4e4e,Jake Wharton,Remove legacy support,24,24,Jake Wharton,c58b01c,0,2019-01-04 00:15:29,2018-12-20 02:20:48
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",42,42,Jake Wharton,01e4e4e,0,2019-12-18 16:23:01,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",43,47,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",48,48,Jake Wharton,01e4e4e,0,2019-12-18 16:23:01,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",49,59,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",61,61,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",65,65,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,c58b01c,Jake Wharton,Use US locale to uppercase annotation first letter,62,64,Chris Warrington,96ecdb3,0,2018-12-20 02:20:48,2018-11-18 07:08:31
butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.kt,01e4e4e,Jake Wharton,Remove legacy support,60,60,Jake Wharton,c58b01c,0,2019-01-04 00:15:29,2018-12-20 02:20:48
butterknife-gradle-plugin/build.gradle,3983013,Jake Wharton,Purge Groovy for Kotlin.,2,2,Jake Wharton,0b2c1aa,0,2017-05-08 21:06:01,2017-05-08 18:41:11
butterknife-gradle-plugin/build.gradle,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",1,1,John Rodriguez,dfff573,0,2018-01-26 18:01:41,2017-07-28 17:23:19
butterknife-gradle-plugin/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,10,10,Jake Wharton,dbca571,0,2017-07-28 17:23:19,2017-06-02 19:11:15
butterknife-gradle-plugin/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,3,3,Jared Burrows,ece57bd,0,2016-06-19 19:32:42,2016-05-21 04:27:10
butterknife-gradle-plugin/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,6,7,Jared Burrows,ece57bd,0,2016-06-19 19:32:42,2016-05-21 04:27:10
butterknife-gradle-plugin/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,9,9,Jared Burrows,ece57bd,0,2016-06-19 19:32:42,2016-05-21 04:27:10
butterknife-gradle-plugin/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,13,13,Jared Burrows,ece57bd,0,2016-06-19 19:32:42,2016-05-21 04:27:10
butterknife-gradle-plugin/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,11,11,Jake Wharton,dbca571,0,2017-07-28 17:23:19,2017-06-02 19:11:15
butterknife-gradle-plugin/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,14,15,Jake Wharton,dbca571,0,2017-07-28 17:23:19,2017-06-02 19:11:15
butterknife-gradle-plugin/build.gradle,41e0772,Jake Wharton,Dependency updates  * AGP 3.2rc2 with aapt2 disabled explicitly * Kotlin 1.2.61 and JDK 8 artifact instead of JRE 8 * Support libs 27.1.1 * Truth 0.42,12,12,Sven,4d10aa9,0,2018-09-06 14:15:22,2018-09-05 13:23:06
butterknife-gradle-plugin/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,4,5,Jared Burrows,ece57bd,0,2017-05-08 18:41:11,2016-05-21 04:27:10
butterknife-gradle-plugin/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,17,17,Jake Wharton,dbca571,0,2017-07-28 17:23:19,2017-06-02 19:11:15
butterknife-gradle-plugin/build.gradle,4d10aa9,Sven,AndroidX support in butterknife gradle plugin (#1324),16,16,John Rodriguez,dfff573,0,2018-09-05 13:23:06,2017-07-28 17:23:19
butterknife-gradle-plugin/build.gradle,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",20,28,Jake Wharton,01e4e4e,0,2019-12-18 16:23:01,2019-01-04 00:15:29
butterknife-gradle-plugin/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,18,19,Jared Burrows,ece57bd,0,2016-06-19 19:32:42,2016-05-21 04:27:10
butterknife-gradle-plugin/build.gradle,3983013,Jake Wharton,Purge Groovy for Kotlin.,8,8,Jared Burrows,ece57bd,0,2017-05-08 21:06:01,2016-05-21 04:27:10
butterknife-gradle-plugin/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,29,29,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,2fbe84a,Jake Wharton,Add support for feature variants in the feature plugin.,5,6,John Rodriguez,dfff573,0,2017-08-04 03:55:12,2017-07-28 17:23:19
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",10,11,Jake Wharton,b8791de,0,2018-11-18 07:08:31,2018-09-24 21:24:40
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",12,12,Ravi Agarwal,596d05b,0,2018-01-26 18:01:41,2018-01-08 22:07:55
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,7,9,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,1,4,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,13,16,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,18,23,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,bb9f6ec,Jake Wharton,Switch to a proper source-generating task for R2.,17,17,Jake Wharton,2fbe84a,0,2017-08-04 04:55:45,2017-08-04 03:55:12
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,bb9f6ec,Jake Wharton,Switch to a proper source-generating task for R2.,26,37,Jake Wharton,2fbe84a,0,2017-08-04 04:55:45,2017-08-04 03:55:12
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,2fbe84a,Jake Wharton,Add support for feature variants in the feature plugin.,24,25,John Rodriguez,dfff573,0,2017-08-04 03:55:12,2017-07-28 17:23:19
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,57,57,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,40,43,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",44,55,Ravi Agarwal,596d05b,0,2018-01-26 18:01:41,2018-01-08 22:07:55
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,2fbe84a,Jake Wharton,Add support for feature variants in the feature plugin.,38,39,Jake Wharton,ba17509,0,2017-08-04 03:55:12,2017-05-11 19:48:59
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,bb9f6ec,Jake Wharton,Switch to a proper source-generating task for R2.,56,56,Jake Wharton,2fbe84a,0,2017-08-04 04:55:45,2017-08-04 03:55:12
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,bb9f6ec,Jake Wharton,Switch to a proper source-generating task for R2.,58,60,Jake Wharton,2fbe84a,0,2017-08-04 04:55:45,2017-08-04 03:55:12
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",61,61,Ravi Agarwal,596d05b,0,2018-01-26 18:01:41,2018-01-08 22:07:55
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,bb9f6ec,Jake Wharton,Switch to a proper source-generating task for R2.,62,62,Jake Wharton,2fbe84a,0,2017-08-04 04:55:45,2017-08-04 03:55:12
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",69,75,Jake Wharton,b8791de,0,2018-11-18 07:08:31,2018-09-24 21:24:40
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,cfbec9a,Jake Wharton,Update to AGP 3.3 as minimum supported version,67,68,Jake Wharton,01e4e4e,0,2019-09-07 02:23:30,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",77,78,Jake Wharton,b8791de,0,2018-11-18 07:08:31,2018-09-24 21:24:40
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,bb9f6ec,Jake Wharton,Switch to a proper source-generating task for R2.,64,66,Jake Wharton,2fbe84a,0,2017-08-04 04:55:45,2017-08-04 03:55:12
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,cfbec9a,Jake Wharton,Update to AGP 3.3 as minimum supported version,76,76,Jake Wharton,01e4e4e,0,2019-09-07 02:23:30,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",82,83,Jake Wharton,b8791de,0,2018-11-18 07:08:31,2018-09-24 21:24:40
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,cfbec9a,Jake Wharton,Update to AGP 3.3 as minimum supported version,79,79,Jake Wharton,01e4e4e,0,2019-09-07 02:23:30,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",80,81,Jake Wharton,b8791de,0,2018-11-18 07:08:31,2018-09-24 21:24:40
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,dfff573,John Rodriguez,Update to AGP 3.0.0a8,63,63,,,0,2017-07-28 17:23:19,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,86,91,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,cfbec9a,Jake Wharton,Update to AGP 3.3 as minimum supported version,85,85,Jake Wharton,01e4e4e,0,2019-09-07 02:23:30,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,93,94,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,01e4e4e,Jake Wharton,Remove legacy support,92,92,Chris Warrington,96ecdb3,0,2019-01-04 00:15:29,2018-11-18 07:08:31
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt,bb9f6ec,Jake Wharton,Switch to a proper source-generating task for R2.,84,84,,,0,2017-08-04 04:55:45,
butterknife-gradle-plugin/src/main/resources/META-INF/gradle-plugins/com.jakewharton.butterknife.properties,20aad6c,Gautam Korlam,Support Android Library Projects,1,1,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",8,26,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",1,2,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",3,3,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",27,27,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",28,30,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",4,5,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/ResourceSymbolListReader.kt,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",6,7,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/AndroidManifest.xml,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",1,1,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",11,13,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,d74d3b3,Lóránt Pintér,Make R2Generator task cacheable by default,14,14,Lóránt Pintér,aeba09e,0,2019-11-19 20:53:02,2019-11-19 20:51:18
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,d74d3b3,Lóránt Pintér,Make R2Generator task cacheable by default,5,5,Lóránt Pintér,aeba09e,0,2019-11-19 20:53:02,2019-11-19 20:51:18
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",15,19,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",1,4,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,aeba09e,Lóránt Pintér,Fix input path sensitivity for R2Generator task,20,20,Jake Wharton,01e4e4e,1,2019-11-19 20:51:18,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,aeba09e,Lóránt Pintér,Fix input path sensitivity for R2Generator task,9,10,Jake Wharton,01e4e4e,1,2019-11-19 20:51:18,2019-01-04 00:15:29
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",6,8,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,01e4e4e,Jake Wharton,Remove legacy support,40,40,Chris Warrington,96ecdb3,0,2019-01-04 00:15:29,2018-11-18 07:08:31
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",33,39,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",21,23,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",24,31,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",43,46,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",41,41,,,0,2018-11-18 07:08:31,
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,01e4e4e,Jake Wharton,Remove legacy support,32,32,Chris Warrington,96ecdb3,0,2019-01-04 00:15:29,2018-11-18 07:08:31
butterknife-gradle-plugin/src/main/java/butterknife/plugin/R2Generator.kt,01e4e4e,Jake Wharton,Remove legacy support,42,42,,,0,2019-01-04 00:15:29,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,cd17a87,0,2019-01-04 00:15:29,2018-09-07 02:54:16
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,7,9,,,0,2013-11-21 10:32:23,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,1,2,,,0,2013-11-21 10:32:23,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",10,10,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,12,12,Jake Wharton,348f457,0,2018-09-07 02:54:16,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,11,11,,,0,2013-11-21 10:32:23,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,5,5,,,0,2013-11-21 10:32:23,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,3,3,,,0,2014-10-27 21:43:11,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",14,14,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,6,6,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",17,18,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,25,26,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,13,13,,,0,2013-11-21 10:32:23,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,30,31,Jake Wharton,348f457,0,2018-09-07 02:54:16,2015-10-09 23:07:21
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",20,22,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,15,16,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,23,24,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,42,42,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",27,28,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,f94577d,Warren Smith,"Fixed literal text, if copy/pasted now builds.",19,19,,,1,2015-05-05 18:06:33,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",29,29,,,0,2013-11-21 13:58:16,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",32,35,,,0,2014-04-10 06:02:20,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,36,36,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,48,48,,,0,2013-11-21 10:32:23,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,43,43,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,37,41,,,0,2014-04-19 05:25:44,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,44,45,,,0,2014-04-19 08:49:07,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,7d3a1d5,Jake Wharton,Javadoc scrub and update.,46,46,,,0,2014-04-19 09:25:39,
butterknife-annotations/src/main/java/butterknife/OnLongClick.java,348f457,Jake Wharton,Add support annotations to bind/listener annotations.  ...with a gross hack!,47,47,,,0,2015-10-09 23:07:21,
butterknife-gradle-plugin/src/test/fixtures/suffix_parsed_properly/src/main/java/butterknife/test/ButteryActivity.java,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",1,21,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/AndroidHome.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",1,25,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/fixtures/suffix_parsed_properly/src/main/res/layout/activity_layout.xml,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",1,15,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/build.gradle,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",1,7,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/build.gradle,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,15,15,Jake Wharton,9b59a14,0,2018-10-10 21:27:34,2018-09-06 16:48:44
butterknife-gradle-plugin/src/test/build.gradle,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",16,17,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/build.gradle,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",8,11,Jake Wharton,01e4e4e,0,2019-12-18 16:23:01,2019-01-04 00:15:29
butterknife-gradle-plugin/src/test/build.gradle,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",20,55,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/build.gradle,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",12,14,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/build.gradle,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",56,62,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/build.gradle,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,18,19,Jake Wharton,9b59a14,0,2018-10-10 21:27:34,2018-09-06 16:48:44
butterknife-gradle-plugin/src/test/build.gradle,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",64,65,Jake Wharton,01e4e4e,0,2019-12-18 16:23:01,2019-01-04 00:15:29
butterknife-gradle-plugin/src/test/build.gradle,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",66,66,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/build.gradle,01e4e4e,Jake Wharton,Remove legacy support,63,63,Jake Wharton,0efcf39,0,2019-01-04 00:15:29,2018-10-10 21:27:34
butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",16,34,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",1,12,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",35,35,Nelson Osacky,aaafa2d,0,2018-11-18 07:08:31,2018-01-26 18:01:41
butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",36,42,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/BuildFilesRule.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",13,15,Nelson Osacky,aaafa2d,0,2018-11-18 07:08:31,2018-01-26 18:01:41
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FixturesTest.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",1,21,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FixturesTest.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",24,26,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FixturesTest.kt,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",27,28,Nelson Osacky,aaafa2d,0,2019-12-18 16:23:01,2018-01-26 18:01:41
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FixturesTest.kt,aaafa2d,Nelson Osacky,"Parse manifest to determine package name.  We don't want to use the applicationId to find the location of the R.java file because the R.java file's location is based on the package name not the applicationId.  The applicationId can change based on the variant, but the R.java file's location will not change.  Added some tests to make sure this works based on the FixturesTest in SQLDelight.  Fixes #1177",29,54,,,0,2018-01-26 18:01:41,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FixturesTest.kt,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",22,23,Nelson Osacky,aaafa2d,0,2019-12-18 16:23:01,2018-01-26 18:01:41
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,1,9,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,01e4e4e,Jake Wharton,Remove legacy support,11,11,Chris Warrington,96ecdb3,0,2019-01-04 00:15:29,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,12,15,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",16,17,Jake Wharton,b8791de,0,2018-11-18 07:08:31,2018-09-24 21:24:40
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,18,20,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,22,23,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,10,10,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,01e4e4e,Jake Wharton,Remove legacy support,24,24,Chris Warrington,96ecdb3,0,2019-01-04 00:15:29,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,01e4e4e,Jake Wharton,Remove legacy support,21,21,Chris Warrington,96ecdb3,0,2019-01-04 00:15:29,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,31,31,,,0,2017-05-08 21:06:01,
butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt,3983013,Jake Wharton,Purge Groovy for Kotlin.,25,30,,,0,2017-05-08 21:06:01,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,9,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,14,28,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,10,12,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindAnimTest.java,2a7ae33,Jake Wharton,Checked change integration test,13,13,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,2,5,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,6,6,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,10,10,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,11,11,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,9,9,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,8,8,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,12,13,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,14,17,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,2a7ae33,Jake Wharton,Checked change integration test,18,18,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,29,34,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,28,28,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,19,27,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBitmapTest.java,01e4e4e,Jake Wharton,Remove legacy support,7,7,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,2,3,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,4,4,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,6,6,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,7,7,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,9,9,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,8,8,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,17,25,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,26,26,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,2a7ae33,Jake Wharton,Checked change integration test,16,16,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,56,56,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,10,15,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,42,55,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,27,40,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,41,41,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,57,62,,,0,2017-10-13 02:47:15,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,3,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,19,20,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",23,23,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,51d433d,Nathanael Silverman,"Generate R2 entries for anim, layout, menu, plurals, style, and styleable",24,25,Gautam Korlam,20aad6c,0,2017-07-02 19:09:32,2016-06-19 19:32:42
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,51d433d,Nathanael Silverman,"Generate R2 entries for anim, layout, menu, plurals, style, and styleable",21,22,Gautam Korlam,20aad6c,0,2017-07-02 19:09:32,2016-06-19 19:32:42
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,26,27,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",28,28,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,4,18,Nathanael Silverman,51d433d,0,2018-09-24 21:24:40,2017-07-02 19:09:32
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,29,32,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",33,33,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,34,37,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",38,38,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,39,42,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,49,52,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",43,43,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,44,47,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",48,48,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",53,53,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",58,58,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,59,62,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,54,57,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,51d433d,Nathanael Silverman,"Generate R2 entries for anim, layout, menu, plurals, style, and styleable",64,67,Gautam Korlam,20aad6c,0,2017-07-02 19:09:32,2016-06-19 19:32:42
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",73,73,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,79,82,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",63,63,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",68,68,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,51d433d,Nathanael Silverman,"Generate R2 entries for anim, layout, menu, plurals, style, and styleable",74,77,Gautam Korlam,20aad6c,0,2017-07-02 19:09:32,2016-06-19 19:32:42
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,51d433d,Nathanael Silverman,"Generate R2 entries for anim, layout, menu, plurals, style, and styleable",69,72,Gautam Korlam,20aad6c,0,2017-07-02 19:09:32,2016-06-19 19:32:42
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",78,78,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",83,83,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",88,88,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,51d433d,Nathanael Silverman,"Generate R2 entries for anim, layout, menu, plurals, style, and styleable",84,87,Gautam Korlam,20aad6c,0,2017-07-02 19:09:32,2016-06-19 19:32:42
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,96ecdb3,Chris Warrington,"Support for Android Gradle Plugin 3.3.  Android Gradle Plugin 3.3 includes direct bytecode generation of the R class in libraries, which breaks previous R2 generator as it relies on the generated source.  Switch to reading the symbol table (R.txt), dropping support for plugins before 3.1, where the internal getter for the symbol table was moved.  Filed https://issuetracker.google.com/118668005 to introduce an API in the Android Gradle Plugin to avoid the use of internal classes.",94,95,Jake Wharton,b8791de,0,2018-11-18 07:08:31,2018-09-24 21:24:40
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,51d433d,Nathanael Silverman,"Generate R2 entries for anim, layout, menu, plurals, style, and styleable",89,92,Gautam Korlam,20aad6c,0,2017-07-02 19:09:32,2016-06-19 19:32:42
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",93,93,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,20aad6c,Gautam Korlam,Support Android Library Projects,97,98,,,0,2016-06-19 19:32:42,
butterknife-gradle-plugin/src/test/resources/fixtures/R2.java,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",96,96,Chris Warrington,96ecdb3,0,2019-12-18 16:23:01,2018-11-18 07:08:31
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,7,7,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,8,8,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,2,3,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,9,9,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,6,6,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,4,4,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,10,15,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,2a7ae33,Jake Wharton,Checked change integration test,16,16,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,26,26,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,17,25,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,27,32,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindBoolTest.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,2,3,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,5,5,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,9,9,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,4,4,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,7,7,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,8,8,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,16,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,10,10,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,2a7ae33,Jake Wharton,Checked change integration test,17,17,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,19,19,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,25,26,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,18,18,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,27,27,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,20,23,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,28,32,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,24,24,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,01e4e4e,Jake Wharton,Remove legacy support,6,6,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,48,48,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,33,41,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,42,42,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindColorTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,43,47,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,4,4,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,7,7,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,6,6,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,2,3,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,8,8,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,9,9,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,10,15,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,2a7ae33,Jake Wharton,Checked change integration test,16,16,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,26,26,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,17,25,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,27,40,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,42,47,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,41,41,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDimenTest.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,16,20,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,15,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,22,53,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFontTest.java,2a7ae33,Jake Wharton,Checked change integration test,21,21,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,9,9,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,7,7,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,4,4,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,2,3,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,8,8,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,5,5,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,10,10,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,11,13,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,01e4e4e,Jake Wharton,Remove legacy support,6,6,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,2a7ae33,Jake Wharton,Checked change integration test,17,17,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,28,33,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,27,27,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,14,16,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,18,26,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,2,3,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,9,9,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,7,7,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,4,4,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,5,5,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,8,8,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,01e4e4e,Jake Wharton,Remove legacy support,6,6,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,10,10,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,18,28,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,2a7ae33,Jake Wharton,Checked change integration test,17,17,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,16,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,30,35,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindFloatTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,29,29,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,9,9,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,7,7,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,2,4,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,10,10,Jake Wharton,59061ca,0,2016-09-09 01:55:24,2015-10-01 03:10:22
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,5,5,Jake Wharton,59061ca,0,2016-09-09 01:55:24,2015-10-01 03:10:22
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,11,11,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,12,14,Jake Wharton,63d79fd,0,2016-11-08 15:12:12,2016-09-09 01:55:24
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,18,18,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,15,15,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,21,21,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,17,17,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,19,20,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,24,25,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,22,23,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,26,26,Jake Wharton,63d79fd,0,2016-11-08 15:12:12,2016-09-09 01:55:24
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,27,28,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,33,35,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,30,32,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,36,37,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",6,6,,,0,2015-10-01 03:10:22,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",16,16,,,0,2015-10-01 03:10:22,
butterknife-compiler/src/test/java/butterknife/compiler/BindingSetTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,29,29,,,0,2015-03-15 07:44:45,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,10,17,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java,2a7ae33,Jake Wharton,Checked change integration test,18,18,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,36,47,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java,2a7ae33,Jake Wharton,Checked change integration test,35,35,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,9,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewsTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,19,34,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,8,8,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,2,3,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,7,7,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,9,9,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,4,4,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,6,6,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,10,15,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,17,25,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,27,32,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,2a7ae33,Jake Wharton,Checked change integration test,16,16,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,26,26,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindIntTest.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java,2a7ae33,Jake Wharton,Checked change integration test,17,17,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,18,27,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,8,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindViewTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,9,16,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnCheckedChangedTest.java,2a7ae33,Jake Wharton,Checked change integration test,1,238,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemClickTest.java,fd57f27,Alex Krupa,Add @OnItemClick integration test,1,265,,,0,2019-02-22 20:40:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemLongClickTest.java,a521951,Alex Krupa,Add @OnItemLongClick integration test,1,267,Alex Krupa,fd57f27,0,2019-02-22 20:47:07,2019-02-22 20:40:49
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemSelectedTest.java,87c26f0,Alex Krupa,Add @OnItemSelected integration test,1,387,,,0,2019-02-18 19:17:18,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,6,6,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,8,8,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,1,1,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,2,3,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,7,7,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,10,15,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,9,9,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,4,4,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,2a7ae33,Jake Wharton,Checked change integration test,16,16,Jake Wharton,dbfa768,0,2019-02-08 20:40:21,2019-02-07 22:19:09
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,17,25,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,27,32,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,dbfa768,Jake Wharton,Move resource binding tests to be integration,26,26,Jake Wharton,01e4e4e,0,2019-02-07 22:19:09,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/BindStringTest.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,,,0,2019-01-04 00:15:29,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java,9d4cf03,Alex Krupa,Add @OnTouch integration test,91,299,Jake Wharton,2a7ae33,0,2019-02-22 18:24:53,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java,8e6db6c,Jake Wharton,Test OnTouch argument support,56,90,Alex Krupa,9d4cf03,0,2020-08-07 14:16:10,2019-02-22 18:24:53
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java,9d4cf03,Alex Krupa,Add @OnTouch integration test,1,55,Jake Wharton,2a7ae33,0,2019-02-22 18:24:53,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,4007d61,Jake Wharton,Port long click tests to be functional,1,4,,,0,2019-02-05 18:21:11,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,4007d61,Jake Wharton,Port long click tests to be functional,6,7,,,0,2019-02-05 18:21:11,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,2a7ae33,Jake Wharton,Checked change integration test,8,8,,,0,2019-02-08 20:40:21,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,2a7ae33,Jake Wharton,Checked change integration test,5,5,,,0,2019-02-08 20:40:21,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,4007d61,Jake Wharton,Port long click tests to be functional,9,9,,,0,2019-02-05 18:21:11,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,2a7ae33,Jake Wharton,Checked change integration test,10,13,,,0,2019-02-08 20:40:21,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,4007d61,Jake Wharton,Port long click tests to be functional,14,14,,,0,2019-02-05 18:21:11,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,2a7ae33,Jake Wharton,Checked change integration test,15,19,,,0,2019-02-08 20:40:21,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,51e872d,lonny,Avoid all @OnClick events may not working,20,28,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,4007d61,Jake Wharton,Port long click tests to be functional,29,30,,,0,2019-02-05 18:21:11,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,4007d61,Jake Wharton,Port long click tests to be functional,36,36,,,0,2019-02-05 18:21:11,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/ViewTree.java,4007d61,Jake Wharton,Port long click tests to be functional,31,35,,,0,2019-02-05 18:21:11,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,34,34,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,17,33,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,35,35,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,11,16,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,10,10,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,1,9,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,36,36,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,37,62,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,99,99,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,64,64,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,100,100,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,65,65,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,63,63,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,66,98,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,102,128,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,101,101,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,129,129,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,160,160,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,132,159,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,130,130,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,162,162,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,163,176,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,161,161,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,177,177,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,131,131,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,178,178,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,180,219,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,4007d61,Jake Wharton,Port long click tests to be functional,221,257,Jake Wharton,01e4e4e,0,2019-02-05 18:21:11,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,179,179,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnLongClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,220,220,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,6,7,Jake Wharton,c24995b,0,2016-09-08 03:33:17,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,4,5,Warren Smith,f0b7351,1,2018-09-10 21:26:24,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,8,11,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,b8791de,0,2019-01-04 00:15:29,2018-09-24 21:24:40
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,afcac3e,Jake Wharton,Support binding resource types to fields.,2,2,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,13,13,Jake Wharton,c24995b,0,2016-09-08 03:33:17,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,12,12,Jake Wharton,55dc47e,0,2016-09-09 02:40:56,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,Serj Lotutovici,66e050d,0,2015-09-30 02:54:34,2015-08-02 00:51:58
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,14,14,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,16,16,Jake Wharton,c17c16c,0,2018-09-24 21:24:40,2018-09-10 21:26:24
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,15,15,Jake Wharton,c24995b,0,2016-09-08 03:33:17,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),17,17,Jake Wharton,ee2043f,0,2018-06-14 19:57:14,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,23,23,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,21,22,Jake Wharton,c24995b,0,2016-09-08 03:33:17,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,18,18,Jake Wharton,c17c16c,0,2018-09-24 21:24:40,2018-09-10 21:26:24
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),19,20,Jake Wharton,ee2043f,0,2018-06-14 19:57:14,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,24,29,Jake Wharton,c24995b,0,2016-09-08 03:33:17,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,afcac3e,Jake Wharton,Support binding resource types to fields.,30,30,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,32,37,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,38,38,Warren Smith,f0b7351,1,2018-09-10 21:26:24,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,39,39,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,41,41,Jake Wharton,c24995b,0,2016-09-08 03:33:17,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,43,43,Jake Wharton,c24995b,0,2016-09-08 03:33:17,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,afcac3e,Jake Wharton,Support binding resource types to fields.,40,40,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,afcac3e,Jake Wharton,Support binding resource types to fields.,44,44,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,42,42,Warren Smith,f0b7351,1,2018-09-10 21:26:24,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,56,56,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,45,54,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,57,58,Warren Smith,f0b7351,1,2018-09-10 21:26:24,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,59,62,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,67,71,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,66,66,Jake Wharton,c24995b,0,2016-09-09 02:40:56,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,65,65,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,63,63,Warren Smith,f0b7351,1,2018-09-10 21:26:24,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,afcac3e,Jake Wharton,Support binding resource types to fields.,73,73,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,75,77,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,74,74,,,0,2015-09-30 04:39:18,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,89,90,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,55,55,Jake Wharton,0c9a1d7,1,2018-09-10 21:26:24,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,64,64,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,93,99,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c17c16c,Jake Wharton,Add error-prone and NullAway,31,31,Jake Wharton,c24995b,1,2018-09-10 21:26:24,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,72,72,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,101,102,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c24995b,Jake Wharton,Add @BindFloat annotation.,83,84,,,0,2016-08-26 20:52:56,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,78,82,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,105,105,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,afcac3e,Jake Wharton,Support binding resource types to fields.,108,108,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,85,88,,,0,2016-09-09 02:40:56,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,107,107,,,0,2015-09-30 04:39:18,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,91,92,,,0,2016-09-09 02:40:56,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,103,104,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,100,100,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,106,106,,,0,2016-09-08 03:33:17,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,1,2,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,11,23,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,26,34,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,10,10,Jake Wharton,3ef792c,0,2019-01-04 00:15:29,2018-09-11 18:58:50
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,5,9,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,24,25,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,3,3,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,4,4,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,36,41,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,35,35,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,42,45,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,46,46,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,52,68,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,70,75,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,47,51,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,76,79,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,81,85,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,86,104,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,80,80,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,106,113,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,123,123,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,124,127,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,118,118,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,119,122,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,114,117,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,147,162,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,105,105,,,0,2019-02-08 20:40:21,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,128,138,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,69,69,,,0,2019-02-08 20:40:21,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,163,173,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,175,180,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,140,146,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,191,193,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,181,184,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,185,185,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,186,190,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,174,174,Jake Wharton,4007d61,0,2019-02-08 20:40:21,2019-02-05 18:21:11
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,201,204,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,195,200,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,211,239,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,205,205,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,206,210,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,139,139,,,0,2019-02-08 20:40:21,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,240,258,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,51e872d,lonny,Avoid all @OnClick events may not working,259,277,Jake Wharton,2a7ae33,0,2020-08-03 14:27:46,2019-02-08 20:40:21
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,278,278,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,279,279,,,0,2018-09-11 18:58:50,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnClickTest.java,2a7ae33,Jake Wharton,Checked change integration test,194,194,,,0,2019-02-08 20:40:21,
butterknife-integration-test/src/androidTest/proguard.pro,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1,2,,,0,2018-09-06 22:01:51,
butterknife-integration-test/src/androidTest/proguard.pro,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,3,3,Jake Wharton,0821b0c,0,2018-09-07 19:25:06,2018-09-06 22:01:51
butterknife-integration-test/src/androidTest/proguard.pro,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,5,5,,,0,2018-09-07 19:25:06,
butterknife-integration-test/src/androidTest/proguard.pro,a154685,Jake Wharton,Silence some ProGuard warnings we do not care about,4,4,Jake Wharton,421d9f9,0,2019-02-05 18:30:32,2018-09-07 19:25:06
butterknife-integration-test/src/androidTest/res/color/colors.xml,acf89ad,Jake Wharton,Port more resource binding to functional tests.,1,11,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,6,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,7,7,Jake Wharton,421d9f9,0,2019-01-04 00:15:29,2018-09-07 19:25:06
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",12,13,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",11,11,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",10,10,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,3,3,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",14,14,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",16,16,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,15,15,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",20,21,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,8,9,,,0,2016-06-19 19:32:42,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,22,22,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,17,19,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,25,25,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",23,24,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",26,27,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,28,28,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",50,50,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/unbinder/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",29,49,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/res/drawable/circle.xml,acf89ad,Jake Wharton,Port more resource binding to functional tests.,1,13,,,0,2017-10-13 04:53:52,
butterknife-integration-test/src/androidTest/res/font/inconsolata_regular.ttf,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,467,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindAnimFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTest/res/values/values.xml,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,1,18,,,0,2017-10-13 02:47:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindArrayFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,31,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBitmapFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindBoolFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,1,1,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,2,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,9,12,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,4,4,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,5,6,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,7,8,Jake Wharton,3ef792c,0,2018-10-10 20:22:03,2018-09-11 18:58:50
butterknife-integration-test/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,13,14,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,15,16,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,17,17,Jake Wharton,0821b0c,0,2018-09-07 19:25:06,2018-09-06 22:01:51
butterknife-integration-test/build.gradle,f396de7,Jake Wharton,Point test runners at the right type,18,18,Jake Wharton,01e4e4e,0,2019-02-01 23:08:50,2019-01-04 00:15:29
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,19,25,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,74f40e1,Jake Wharton,"Speed up builds by racing emulator start.  Also since we're splitting the commands, don't run lint release checks during compilation since the 'check' task will do a full lint run anyway.",29,30,John Rodriguez,dfff573,0,2017-08-04 05:31:24,2017-07-28 17:23:19
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,27,28,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,41e0772,Jake Wharton,Dependency updates  * AGP 3.2rc2 with aapt2 disabled explicitly * Kotlin 1.2.61 and JDK 8 artifact instead of JRE 8 * Support libs 27.1.1 * Truth 0.42,26,26,Jake Wharton,0e710b3,0,2018-09-06 14:15:22,2017-10-07 03:36:16
butterknife-integration-test/build.gradle,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",34,34,Jake Wharton,41e0772,0,2018-09-06 22:01:51,2018-09-06 14:15:22
butterknife-integration-test/build.gradle,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,36,37,Jake Wharton,0821b0c,0,2018-09-07 19:25:06,2018-09-06 22:01:51
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,35,35,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,31,33,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/build.gradle,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",38,45,Jake Wharton,41e0772,0,2018-09-06 22:01:51,2018-09-06 14:15:22
butterknife-integration-test/build.gradle,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",60,63,Jake Wharton,41e0772,0,2018-09-06 22:01:51,2018-09-06 14:15:22
butterknife-integration-test/build.gradle,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,64,64,Jake Wharton,421d9f9,0,2018-09-11 18:58:50,2018-09-07 19:25:06
butterknife-integration-test/build.gradle,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",46,48,Jake Wharton,41e0772,0,2018-09-06 22:01:51,2018-09-06 14:15:22
butterknife-integration-test/build.gradle,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,66,67,Jake Wharton,0821b0c,0,2018-09-07 19:25:06,2018-09-06 22:01:51
butterknife-integration-test/build.gradle,01e4e4e,Jake Wharton,Remove legacy support,68,69,Jake Wharton,7d3558a,0,2019-01-04 00:15:29,2018-10-10 20:22:03
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,57,59,,,0,2016-07-21 16:15:27,
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,70,70,,,0,2016-07-21 16:15:27,
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,49,50,,,0,2016-07-21 16:15:27,
butterknife-integration-test/build.gradle,6771eae,Jared Burrows,integration test for lint errors,65,65,,,0,2016-07-21 16:15:27,
butterknife-integration-test/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,51,56,,,0,2017-07-28 17:23:19,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindColorFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDimenFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindDrawableFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,11,14,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,15,15,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,16,51,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFontFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,10,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindFloatFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindIntFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindStringFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,9,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,10,13,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,15,100,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewsFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,14,14,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,1,7,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,8,11,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,13,30,,,0,2019-02-08 16:24:15,
butterknife-integration-test/src/androidTestReflect/java/com/example/butterknife/functional/BindViewFailureTest.java,2a7ae33,Jake Wharton,Checked change integration test,12,12,Jake Wharton,e7a0482,0,2019-02-08 20:40:21,2019-02-08 16:24:15
butterknife-integration-test/src/main/AndroidManifest.xml,6771eae,Jared Burrows,integration test for lint errors,1,24,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleAdapter.java,6771eae,Jared Burrows,integration test for lint errors,1,64,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/SimpleApp.java,6771eae,Jared Burrows,integration test for lint errors,1,11,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java,6771eae,Jared Burrows,integration test for lint errors,1,2,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java,6771eae,Jared Burrows,integration test for lint errors,3,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java,6771eae,Jared Burrows,integration test for lint errors,5,15,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/A.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jared Burrows,6771eae,0,2019-01-04 00:15:29,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java,6771eae,Jared Burrows,integration test for lint errors,1,2,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java,6771eae,Jared Burrows,integration test for lint errors,3,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java,6771eae,Jared Burrows,integration test for lint errors,5,16,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/B.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jared Burrows,6771eae,0,2019-01-04 00:15:29,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java,6771eae,Jared Burrows,integration test for lint errors,5,18,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java,6771eae,Jared Burrows,integration test for lint errors,1,2,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java,6771eae,Jared Burrows,integration test for lint errors,3,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/C.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jared Burrows,6771eae,0,2019-01-04 00:15:29,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jared Burrows,6771eae,0,2019-01-04 00:15:29,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java,6771eae,Jared Burrows,integration test for lint errors,1,2,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java,6771eae,Jared Burrows,integration test for lint errors,3,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/D.java,6771eae,Jared Burrows,integration test for lint errors,5,16,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,12,18,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,5,10,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,22,26,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,1,4,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,b583f9d,Jake Wharton,Switch to ViewCollections in IT,11,11,Jared Burrows,6771eae,0,2018-09-06 20:19:44,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,20,20,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,21,21,Jake Wharton,0efcf39,0,2019-11-20 03:13:41,2018-10-10 21:27:34
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,b583f9d,Jake Wharton,Switch to ViewCollections in IT,19,19,Jared Burrows,6771eae,0,2018-09-06 20:19:44,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,27,32,Jake Wharton,b583f9d,0,2018-10-10 21:27:34,2018-09-06 20:19:44
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,36,44,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,33,34,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,46,50,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,35,35,Jake Wharton,0efcf39,0,2019-11-20 03:13:41,2018-10-10 21:27:34
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,45,45,Jake Wharton,0efcf39,0,2019-11-20 03:13:41,2018-10-10 21:27:34
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,6771eae,Jared Burrows,integration test for lint errors,52,77,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/library/SimpleActivity.java,b583f9d,Jake Wharton,Switch to ViewCollections in IT,51,51,Jared Burrows,6771eae,0,2018-09-06 20:19:44,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java,6771eae,Jared Burrows,integration test for lint errors,1,2,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java,6771eae,Jared Burrows,integration test for lint errors,3,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java,6771eae,Jared Burrows,integration test for lint errors,5,16,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/E.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jared Burrows,6771eae,0,2019-01-04 00:15:29,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java,6771eae,Jared Burrows,integration test for lint errors,1,2,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jared Burrows,6771eae,0,2019-01-04 00:15:29,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java,6771eae,Jared Burrows,integration test for lint errors,5,16,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/F.java,6771eae,Jared Burrows,integration test for lint errors,3,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/proguard.pro,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,5,7,,,0,2018-09-07 19:25:06,
butterknife-integration-test/src/main/proguard.pro,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,12,18,,,0,2018-09-07 19:25:06,
butterknife-integration-test/src/main/proguard.pro,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,1,2,,,0,2018-09-07 19:25:06,
butterknife-integration-test/src/main/proguard.pro,dbfa768,Jake Wharton,Move resource binding tests to be integration,19,22,Jake Wharton,a154685,0,2019-02-07 22:19:09,2019-02-05 18:30:32
butterknife-integration-test/src/main/proguard.pro,3ef792c,Jake Wharton,Migrate @OnClick codegen tests to functional tests,8,11,Jake Wharton,421d9f9,0,2018-09-11 18:58:50,2018-09-07 19:25:06
butterknife-integration-test/src/main/proguard.pro,a154685,Jake Wharton,Silence some ProGuard warnings we do not care about,3,4,Jake Wharton,3ef792c,0,2019-02-05 18:30:32,2018-09-11 18:58:50
butterknife-integration-test/src/main/res/layout/simple_activity.xml,6771eae,Jared Burrows,integration test for lint errors,1,9,,,0,2016-07-21 16:15:27,
butterknife-integration-test/src/main/res/layout/simple_activity.xml,6771eae,Jared Burrows,integration test for lint errors,11,40,,,0,2016-07-21 16:15:27,
butterknife-integration-test/src/main/res/layout/simple_activity.xml,8c86529,Дмитрий Конуров,Properly handle R references as static imports,10,10,Jared Burrows,6771eae,0,2019-11-20 03:13:41,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java,6771eae,Jared Burrows,integration test for lint errors,3,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java,6771eae,Jared Burrows,integration test for lint errors,14,24,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java,6771eae,Jared Burrows,integration test for lint errors,5,8,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java,6771eae,Jared Burrows,integration test for lint errors,1,2,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java,6771eae,Jared Burrows,integration test for lint errors,10,12,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jared Burrows,6771eae,0,2019-01-04 00:15:29,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,9,9,Jake Wharton,01e4e4e,0,2019-11-20 03:13:41,2019-01-04 00:15:29
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/G.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,13,13,Jake Wharton,01e4e4e,0,2019-11-20 03:13:41,2019-01-04 00:15:29
butterknife-integration-test/src/main/res/layout/simple_list_item.xml,6771eae,Jared Burrows,integration test for lint errors,1,20,,,0,2016-07-21 16:15:27,
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java,01e4e4e,Jake Wharton,Remove legacy support,4,4,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java,6771eae,Jared Burrows,integration test for lint errors,1,2,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java,6771eae,Jared Burrows,integration test for lint errors,12,18,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java,6771eae,Jared Burrows,integration test for lint errors,5,10,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java,4919bba,Jake Wharton,"Compile 28, support lib 28, androidx 1",11,11,Jared Burrows,6771eae,0,2018-09-22 20:58:58,2016-07-21 16:15:27
butterknife-integration-test/src/main/java/com/example/butterknife/unbinder/H.java,6771eae,Jared Burrows,integration test for lint errors,3,3,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
butterknife-integration-test/src/main/res/values/strings.xml,6771eae,Jared Burrows,integration test for lint errors,1,8,,,0,2016-07-21 16:15:27,
butterknife-lint/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,6,7,,,0,2016-06-19 19:32:42,
butterknife-lint/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,2,3,,,0,2016-06-19 19:32:42,
butterknife-lint/build.gradle,34df2ad,John Rodriguez,Fix custom lint checks,8,9,John Rodriguez,dfff573,1,2017-09-17 06:52:43,2017-07-28 17:23:19
butterknife-lint/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,1,1,Jake Wharton,0b2c1aa,0,2017-07-28 17:23:19,2017-05-08 18:41:11
butterknife-lint/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,15,20,,,0,2016-06-19 19:32:42,
butterknife-lint/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,10,10,,,0,2016-06-19 19:32:42,
butterknife-lint/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,4,5,Gautam Korlam,20aad6c,0,2017-05-08 18:41:11,2016-06-19 19:32:42
butterknife-lint/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,11,14,Jake Wharton,0b2c1aa,0,2017-07-28 17:23:19,2017-05-08 18:41:11
butterknife-lint/build.gradle,34df2ad,John Rodriguez,Fix custom lint checks,21,21,John Rodriguez,dfff573,1,2017-09-17 06:52:43,2017-07-28 17:23:19
butterknife-lint/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,22,29,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,3,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java,20aad6c,Gautam Korlam,Support Android Library Projects,21,21,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java,20aad6c,Gautam Korlam,Support Android Library Projects,5,16,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java,84db08e,John Rodriguez,Update Lint checks to new APIs,4,4,Gautam Korlam,20aad6c,0,2018-02-24 00:25:10,2016-06-19 19:32:42
butterknife-lint/src/main/java/butterknife/lint/LintRegistry.java,84db08e,John Rodriguez,Update Lint checks to new APIs,17,20,Gautam Korlam,20aad6c,0,2018-02-24 00:25:10,2016-06-19 19:32:42
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,a5bdf20,John Rodriguez,Migrate lint tests to new TestLintTask style,3,4,Jake Wharton,dbca571,0,2017-07-30 02:27:12,2017-06-02 19:11:15
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,2,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,5,5,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,63,63,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,a5bdf20,John Rodriguez,Migrate lint tests to new TestLintTask style,6,10,Jake Wharton,dbca571,0,2017-07-30 02:27:12,2017-06-02 19:11:15
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,dbca571,Jake Wharton,Update some build things  - Gradle 4.0-rc-1 - Android Gradle plugin 2.3.2 - Travis should use the Gradle plugin to automatically install deps.,24,62,Felipe Lima,2f48dc4,0,2017-06-02 19:11:15,2016-11-22 15:26:05
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,a5bdf20,John Rodriguez,Migrate lint tests to new TestLintTask style,22,23,Jake Wharton,dbca571,0,2017-07-30 02:27:12,2017-06-02 19:11:15
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,dbca571,Jake Wharton,Update some build things  - Gradle 4.0-rc-1 - Android Gradle plugin 2.3.2 - Travis should use the Gradle plugin to automatically install deps.,11,21,Felipe Lima,2f48dc4,0,2017-06-02 19:11:15,2016-11-22 15:26:05
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,a5bdf20,John Rodriguez,Migrate lint tests to new TestLintTask style,64,72,Jake Wharton,dbca571,0,2017-07-30 02:27:12,2017-06-02 19:11:15
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,73,74,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,114,115,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,136,137,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,91,92,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,a5bdf20,John Rodriguez,Migrate lint tests to new TestLintTask style,75,90,Jake Wharton,dbca571,0,2017-07-30 02:27:12,2017-06-02 19:11:15
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,a5bdf20,John Rodriguez,Migrate lint tests to new TestLintTask style,93,113,Jake Wharton,dbca571,0,2017-07-30 02:27:12,2017-06-02 19:11:15
butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java,a5bdf20,John Rodriguez,Migrate lint tests to new TestLintTask style,116,135,Jake Wharton,dbca571,0,2017-07-30 02:27:12,2017-06-02 19:11:15
butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,9,11,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,6,,,0,2016-06-19 19:32:42,
butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java,dbca571,Jake Wharton,Update some build things  - Gradle 4.0-rc-1 - Android Gradle plugin 2.3.2 - Travis should use the Gradle plugin to automatically install deps.,7,7,Gautam Korlam,20aad6c,0,2017-06-02 19:11:15,2016-06-19 19:32:42
butterknife-lint/src/test/java/butterknife/lint/LintRegistryTest.java,a5bdf20,John Rodriguez,Migrate lint tests to new TestLintTask style,8,8,Jake Wharton,dbca571,0,2017-07-30 02:27:12,2017-06-02 19:11:15
butterknife-reflect/gradle.properties,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1,3,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/AndroidManifest.xml,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1,1,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",5,7,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1,2,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java,01e4e4e,Jake Wharton,Remove legacy support,3,4,Jake Wharton,c17c16c,0,2019-01-04 00:15:29,2018-09-10 21:26:24
butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java,c17c16c,Jake Wharton,Add error-prone and NullAway,10,10,Jake Wharton,0821b0c,1,2018-09-10 21:26:24,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",9,9,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",11,23,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/CompositeUnbinder.java,c17c16c,Jake Wharton,Add error-prone and NullAway,8,8,Jake Wharton,0821b0c,1,2018-09-10 21:26:24,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/EmptyTextWatcher.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,1,15,,,0,2019-02-04 23:32:46,
butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",18,19,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",6,16,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1,4,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",5,5,Jake Wharton,0821b0c,0,2018-09-07 04:40:42,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/FieldUnbinder.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",17,17,Jake Wharton,0821b0c,0,2018-09-07 04:40:42,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,1,5,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,10,10,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,11,11,Jake Wharton,cd17a87,0,2019-02-04 23:32:46,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,12,13,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,21,23,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,14,20,Jake Wharton,cd17a87,0,2019-02-04 23:32:46,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,24,24,Jake Wharton,cd17a87,0,2019-02-04 23:32:46,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,25,26,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ListenerUnbinder.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,6,9,Jake Wharton,cd17a87,0,2019-02-04 23:32:46,2018-09-07 02:54:16
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,2,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,4,4,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,10,12,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,3,3,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,5,8,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,24,27,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,9,9,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,15,15,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,29,41,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,16,23,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,28,28,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,13,14,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,42,43,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,49,49,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,54,54,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,44,45,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,51,52,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,46,48,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,50,50,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,53,53,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,56,56,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,55,55,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,63,68,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,61,61,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,60,60,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,69,69,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,57,59,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,62,62,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,70,70,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,71,74,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,75,75,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,77,83,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,76,76,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,93,94,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,100,101,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,84,92,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,98,99,Jake Wharton,91cb862,0,2016-11-22 15:26:05,2016-06-20 06:18:53
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,20aad6c,Gautam Korlam,Support Android Library Projects,111,112,,,0,2016-06-19 19:32:42,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,95,97,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,67eb67f,John Rodriguez,Port lint checks to UAST,103,104,Felipe Lima,2f48dc4,0,2017-07-30 02:27:03,2016-11-22 15:26:05
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,105,110,,,0,2016-11-22 15:26:05,
butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java,2f48dc4,Felipe Lima,Migrate to new PSI API,102,102,,,0,2016-11-22 15:26:05,
butterknife-runtime/gradle.properties,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,1,3,,,0,2018-09-06 16:48:44,
butterknife-runtime/build.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,39,43,Jake Wharton,2d6f8a8,0,2018-09-06 16:48:44,2018-02-12 01:29:32
butterknife-runtime/build.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,10,17,Jake Wharton,2d6f8a8,0,2018-09-06 16:48:44,2018-02-12 01:29:32
butterknife-runtime/build.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,1,8,Jake Wharton,2d6f8a8,0,2018-09-06 16:48:44,2018-02-12 01:29:32
butterknife-runtime/build.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,23,37,Jake Wharton,2d6f8a8,0,2018-09-06 16:48:44,2018-02-12 01:29:32
butterknife-runtime/build.gradle,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,18,22,Jake Wharton,72405e7,0,2018-10-10 21:27:34,2018-09-10 21:04:06
butterknife-runtime/build.gradle,01e4e4e,Jake Wharton,Remove legacy support,44,44,Jake Wharton,0efcf39,0,2019-01-04 00:15:29,2018-10-10 21:27:34
butterknife-runtime/build.gradle,01e4e4e,Jake Wharton,Remove legacy support,38,38,Jake Wharton,0efcf39,0,2019-01-04 00:15:29,2018-10-10 21:27:34
butterknife-runtime/build.gradle,f396de7,Jake Wharton,Point test runners at the right type,9,9,Jake Wharton,01e4e4e,0,2019-02-01 23:08:50,2019-01-04 00:15:29
butterknife-runtime/build.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,54,70,Jake Wharton,2d6f8a8,0,2018-09-06 16:48:44,2018-02-12 01:29:32
butterknife-runtime/build.gradle,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,53,53,Jake Wharton,2d6f8a8,0,2018-09-10 21:04:06,2018-02-12 01:29:32
butterknife-runtime/build.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,45,52,Jake Wharton,2d6f8a8,0,2018-09-06 16:48:44,2018-02-12 01:29:32
butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,25,27,Jake Wharton,c17c16c,0,2018-10-10 21:27:34,2018-09-10 21:26:24
butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",28,206,Jake Wharton,c89c374,0,2018-09-06 17:49:36,2016-09-09 04:41:58
butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",7,24,Jake Wharton,c89c374,0,2018-09-06 17:49:36,2016-09-09 04:41:58
butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",1,3,Jake Wharton,c89c374,0,2018-09-06 17:49:36,2016-09-09 04:41:58
butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java,01e4e4e,Jake Wharton,Remove legacy support,6,6,Jake Wharton,0efcf39,0,2019-01-04 00:15:29,2018-10-10 21:27:34
butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",4,5,Jake Wharton,c89c374,0,2018-09-06 17:49:36,2016-09-09 04:41:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,c020171,Jake Wharton,Robolectric 2.x updates.,3,3,,,0,2013-06-04 04:56:20,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,2,2,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,7,7,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,4,4,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,8,8,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,Jake Wharton,421d9f9,0,2019-01-04 00:15:29,2018-09-07 19:25:06
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,12,13,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,11,11,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,15,15,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,14,14,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,17,18,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,fa89384,Jake Wharton,Add test verifying the view holder injection works correctly.,22,23,,,0,2013-03-28 00:20:13,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",10,10,,,0,2015-10-01 03:10:22,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",19,21,,,0,2015-10-01 03:10:22,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,1,,,0,2016-06-19 19:32:42,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,9,9,,,0,2016-06-19 19:32:42,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,6771eae,Jared Burrows,integration test for lint errors,6,6,,,0,2016-07-21 16:15:27,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleAdapterTest.java,7c39e47,Jared Burrows,Update android gradle plugin 2.2.0,16,16,,,0,2016-10-05 09:09:58,
butterknife-runtime/src/main/java/butterknife/Action.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",3,3,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/Action.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",1,2,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/Action.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",6,11,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/Action.java,01e4e4e,Jake Wharton,Remove legacy support,4,5,Jake Wharton,eb7e695,0,2019-01-04 00:15:29,2018-09-06 17:49:36
butterknife-runtime/src/main/AndroidManifest.xml,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,1,2,Michael Evans,05eae6d,0,2018-09-06 16:48:44,2015-09-26 03:41:19
butterknife-reflect/build.gradle,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1,11,Jake Wharton,9b59a14,0,2018-09-06 22:01:51,2018-09-06 16:48:44
butterknife-reflect/build.gradle,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,32,32,Jake Wharton,7d3558a,0,2019-02-05 19:39:44,2018-10-10 20:22:03
butterknife-reflect/build.gradle,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",17,31,Jake Wharton,9b59a14,0,2018-09-06 22:01:51,2018-09-06 16:48:44
butterknife-reflect/build.gradle,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,12,16,Jake Wharton,0821b0c,0,2018-10-10 20:22:03,2018-09-06 22:01:51
butterknife-reflect/build.gradle,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",33,35,,,0,2018-09-06 22:01:51,
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,43f6a81,Jake Wharton,Rename deboucing click listener.,11,11,,,0,2014-10-27 23:49:35,
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,12,12,Jake Wharton,9b59a14,0,2018-10-10 21:27:34,2018-09-06 16:48:44
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,9b34d19,Pierre-Yves Ricau,Debouncing click listeners  Avoids double OnClick calls when the main thread hangs.,1,2,,,0,2014-08-06 23:08:33,
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,c54b70a,Jake Wharton,Clean up the docs to remove implementation details.,8,9,,,0,2014-10-28 01:05:49,
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,9b34d19,Pierre-Yves Ricau,Debouncing click listeners  Avoids double OnClick calls when the main thread hangs.,10,10,,,0,2014-08-06 23:08:33,
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,9b34d19,Pierre-Yves Ricau,Debouncing click listeners  Avoids double OnClick calls when the main thread hangs.,5,7,,,0,2014-08-06 23:08:33,
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,51e872d,lonny,Avoid all @OnClick events may not working,3,4,Jake Wharton,0efcf39,0,2020-08-03 14:27:46,2018-10-10 21:27:34
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,9b34d19,Pierre-Yves Ricau,Debouncing click listeners  Avoids double OnClick calls when the main thread hangs.,16,19,,,0,2014-08-06 23:08:33,
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,9b34d19,Pierre-Yves Ricau,Debouncing click listeners  Avoids double OnClick calls when the main thread hangs.,26,31,,,0,2014-08-06 23:08:33,
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,51e872d,lonny,Avoid all @OnClick events may not working,13,15,Jake Wharton,0efcf39,0,2020-08-03 14:27:46,2018-10-10 21:27:34
butterknife-runtime/src/main/java/butterknife/internal/DebouncingOnClickListener.java,51e872d,lonny,Avoid all @OnClick events may not working,20,25,Jake Wharton,0efcf39,0,2020-08-03 14:27:46,2018-10-10 21:27:34
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,11,12,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,5,9,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,3,3,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,2,2,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,4a08c48,mike castleman,"ImmutableViewList should implement RandomAccess  get() has constant-time performace, so the class should implement RandomAccess on the off chance that it ever makes a difference.",4,4,,,0,2014-05-30 16:28:11,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,13,13,,,0,2015-01-20 10:09:08,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,14,25,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,10,10,,,0,2015-01-20 10:09:08,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,27,33,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/main/java/butterknife/internal/ImmutableList.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,26,26,,,0,2015-01-20 10:09:08,
butterknife-runtime/src/main/java/butterknife/Setter.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",3,3,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/Setter.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",7,10,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/Setter.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",1,2,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/Setter.java,01e4e4e,Jake Wharton,Remove legacy support,4,6,Jake Wharton,c17c16c,0,2019-01-04 00:15:29,2018-09-10 21:26:24
butterknife-runtime/src/main/java/butterknife/Setter.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",12,12,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/Setter.java,c17c16c,Jake Wharton,Add error-prone and NullAway,11,11,Jake Wharton,eb7e695,1,2018-09-10 21:26:24,2018-09-06 17:49:36
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",8,68,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",1,2,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",3,4,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,c17c16c,Jake Wharton,Add error-prone and NullAway,69,69,Jake Wharton,eb7e695,1,2018-09-10 21:26:24,2018-09-06 17:49:36
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",70,77,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",79,86,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,01e4e4e,Jake Wharton,Remove legacy support,5,7,Jake Wharton,c17c16c,0,2019-01-04 00:15:29,2018-09-10 21:26:24
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,c17c16c,Jake Wharton,Add error-prone and NullAway,78,78,Jake Wharton,eb7e695,1,2018-09-10 21:26:24,2018-09-06 17:49:36
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",88,95,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",97,107,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,c17c16c,Jake Wharton,Add error-prone and NullAway,87,87,Jake Wharton,eb7e695,1,2018-09-10 21:26:24,2018-09-06 17:49:36
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,c17c16c,Jake Wharton,Add error-prone and NullAway,108,108,Jake Wharton,eb7e695,1,2018-09-10 21:26:24,2018-09-06 17:49:36
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",119,124,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,c17c16c,Jake Wharton,Add error-prone and NullAway,118,118,Jake Wharton,eb7e695,1,2018-09-10 21:26:24,2018-09-06 17:49:36
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,eb7e695,Jake Wharton,"Move Action, Setter, and collection helpers to runtime",109,117,,,0,2018-09-06 17:49:36,
butterknife-runtime/src/main/java/butterknife/ViewCollections.java,c17c16c,Jake Wharton,Add error-prone and NullAway,96,96,Jake Wharton,eb7e695,1,2018-09-10 21:26:24,2018-09-06 17:49:36
butterknife-runtime/src/main/java/butterknife/Unbinder.java,f4ff41b,Jake Wharton,Spread on more annotations.,4,4,,,0,2016-06-19 20:11:28,
butterknife-runtime/src/main/java/butterknife/Unbinder.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/main/java/butterknife/Unbinder.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",8,8,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/main/java/butterknife/Unbinder.java,0efcf39,Jake Wharton,Make all artifacts use Java 8 bytecode,9,9,Jake Wharton,9b59a14,0,2018-10-10 21:27:34,2018-09-06 16:48:44
butterknife-runtime/src/main/java/butterknife/Unbinder.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,6,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/main/java/butterknife/Unbinder.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",10,10,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/main/java/butterknife/Unbinder.java,f4ff41b,Jake Wharton,Spread on more annotations.,7,7,,,0,2016-06-19 20:11:28,
butterknife-runtime/src/main/java/butterknife/Unbinder.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,0efcf39,0,2019-01-04 00:15:29,2018-10-10 21:27:34
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,2,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,6,7,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,10,11,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,01e4e4e,Jake Wharton,Remove legacy support,5,5,Jake Wharton,8b11d8a,0,2019-01-04 00:15:29,2018-09-07 04:49:03
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,4,4,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,3,3,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,9,9,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,12,12,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,15,24,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,47,47,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,25,25,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,26,27,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,13,14,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,37,46,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,28,36,,,0,2016-08-23 02:02:21,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,e370252,Jake Wharton,Add test to verify activity injection works.,2,2,,,0,2013-03-28 00:27:37,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,e370252,Jake Wharton,Add test to verify activity injection works.,8,8,,,0,2013-03-28 00:27:37,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,e370252,Jake Wharton,Add test to verify activity injection works.,9,9,,,0,2013-03-28 00:27:37,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,7,7,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,421d9f9,0,2019-01-04 00:15:29,2018-09-07 19:25:06
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,e370252,Jake Wharton,Add test to verify activity injection works.,11,11,,,0,2013-03-28 00:27:37,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,12,15,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,421d9f9,Jake Wharton,Migrate tests to run on device  And destroy Robolectric use.,17,17,Jared Burrows,7c39e47,0,2018-09-07 19:25:06,2016-10-05 09:09:58
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,e370252,Jake Wharton,Add test to verify activity injection works.,24,24,,,0,2013-03-28 00:27:37,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,26,26,Jake Wharton,01e4e4e,0,2019-11-20 03:13:41,2019-01-04 00:15:29
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,16,16,,,0,2015-06-27 23:50:27,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",10,10,,,0,2015-10-01 03:10:22,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,7795c1c,Simon Vig Therkildsen,Add Views#reset method for nulling injected variables,32,32,,,0,2013-05-13 18:36:42,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",25,25,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,1,,,0,2016-06-19 19:32:42,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,e370252,Jake Wharton,Add test to verify activity injection works.,39,40,,,0,2013-03-28 00:27:37,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,7795c1c,Simon Vig Therkildsen,Add Views#reset method for nulling injected variables,34,38,,,0,2013-05-13 18:36:42,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",18,23,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,4,5,,,0,2016-06-19 19:32:42,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",27,30,,,0,2015-10-01 03:10:22,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",33,33,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",31,31,,,1,2016-04-02 04:53:49,
butterknife-integration-test/src/androidTest/java/com/example/butterknife/library/SimpleActivityTest.java,6771eae,Jared Burrows,integration test for lint errors,6,6,,,0,2016-07-21 16:15:27,
butterknife-runtime/src/test/java/butterknife/BindAnimTest.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,1,14,,,0,2017-07-02 19:18:54,
butterknife-runtime/src/test/java/butterknife/BindAnimTest.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,15,30,,,0,2017-07-02 19:18:54,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,6,6,,,0,2015-09-30 04:39:18,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,2,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,4,5,,,0,2015-09-30 04:39:18,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,16,17,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3f4dd3a,Jake Wharton,Use copyOfRange helper  Instead of creating and copying a subset of the array manually. This also expands the tests to ensure the original instance is returned unmodifed when no nulls are present.,15,15,Jake Wharton,01e4e4e,0,2019-03-22 19:44:12,2019-01-04 00:15:29
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,19,19,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,01e4e4e,Jake Wharton,Remove legacy support,8,14,Jake Wharton,c16a510,0,2019-01-04 00:15:29,2018-09-06 22:56:28
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,21,21,,,0,2015-09-30 04:39:18,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,825dce6,Jake Wharton,Annotation more constraints.,24,24,,,0,2015-10-10 00:47:57,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,7,7,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,32,32,,,0,2015-09-30 04:39:18,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,18,18,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,33,33,,,0,2015-09-30 04:39:18,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,3,3,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,c24995b,Jake Wharton,Add @BindFloat annotation.,20,20,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,22,23,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,25,31,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,39,40,,,0,2015-09-30 04:39:18,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,52,52,,,0,2015-09-30 04:39:18,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,53,53,Jake Wharton,9b59a14,0,2018-09-06 22:56:28,2018-09-06 16:48:44
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,34,38,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,54,54,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,57,61,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,c24995b,Jake Wharton,Add @BindFloat annotation.,41,41,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3f4dd3a,Jake Wharton,Use copyOfRange helper  Instead of creating and copying a subset of the array manually. This also expands the tests to ensure the original instance is returned unmodifed when no nulls are present.,62,63,Jake Wharton,01e4e4e,0,2019-03-22 19:44:12,2019-01-04 00:15:29
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,d1ad52e,Jake Wharton,Support minSdkVersion 8. Whaaaaaaa?,55,56,,,0,2015-10-10 01:18:52,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,c0a611b,Jake Wharton,"Switch copyOfRange(x, 0, y) to copyOf(x, y)",64,64,Jake Wharton,3f4dd3a,0,2019-09-12 13:57:43,2019-03-22 19:44:12
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,44,44,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,c24995b,Jake Wharton,Add @BindFloat annotation.,45,51,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,42,42,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,c24995b,Jake Wharton,Add @BindFloat annotation.,43,43,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,67,71,Jake Wharton,9b59a14,0,2018-09-06 22:56:28,2018-09-06 16:48:44
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,65,66,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,138,142,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,117,117,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,7bf9bb3,Jake Wharton,"Revert ""Revert ""Merge pull request #898 from kbsriram/erasure-fix""""  This reverts commit 619dab674b90ce2fe22846bbe1753b8d5459f379.",115,116,,,1,2017-07-04 04:15:04,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,72,114,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,119,137,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/main/java/butterknife/internal/Utils.java,7bf9bb3,Jake Wharton,"Revert ""Revert ""Merge pull request #898 from kbsriram/erasure-fix""""  This reverts commit 619dab674b90ce2fe22846bbe1753b8d5459f379.",118,118,,,1,2017-07-04 04:15:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",8,11,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1,4,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",5,7,Jake Wharton,44dd832,0,2018-09-07 03:30:39,2018-09-07 03:06:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",15,15,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",12,12,Jake Wharton,44dd832,0,2018-09-07 03:30:39,2018-09-07 03:06:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,13,14,Jake Wharton,60022fa,0,2019-02-04 23:32:46,2019-02-01 23:10:12
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,17,17,Jay Newstrom,e32dca3,0,2018-09-10 21:11:41,2018-09-08 23:44:18
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",16,16,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",18,18,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",19,19,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,21,21,Jake Wharton,367807f,0,2018-09-07 13:36:32,2018-09-07 04:40:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,01e4e4e,Jake Wharton,Remove legacy support,24,28,Jake Wharton,7d3558a,0,2019-01-04 00:15:29,2018-10-10 20:22:03
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",22,23,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,29,29,Jake Wharton,4007d61,0,2019-02-05 19:39:44,2019-02-05 18:21:11
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",31,31,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",30,30,Jake Wharton,cd17a87,0,2018-09-07 03:30:39,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,32,32,,,0,2018-09-07 03:06:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,20,20,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",33,34,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,35,35,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,36,36,,,0,2018-09-07 03:06:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,41,41,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,44,46,,,0,2018-09-07 03:06:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",38,40,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,37,37,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",42,43,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",49,133,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,47,48,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,134,137,Jake Wharton,0821b0c,0,2018-09-07 03:06:24,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",138,139,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",142,145,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",176,184,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,ac6ead3,Jake Wharton,Allow multiple method and only one field binding in reflect,146,154,Jake Wharton,fc6aa93,0,2018-09-07 03:52:34,2018-09-07 03:30:39
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e32dca3,Jay Newstrom,Stop search at androidx.,140,141,Jake Wharton,31f940d,0,2018-09-08 23:44:18,2018-09-07 16:34:04
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,ac6ead3,Jake Wharton,Allow multiple method and only one field binding in reflect,167,175,Jake Wharton,fc6aa93,0,2018-09-07 03:52:34,2018-09-07 03:30:39
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",155,166,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,ac6ead3,Jake Wharton,Allow multiple method and only one field binding in reflect,185,190,Jake Wharton,cd17a87,0,2018-09-07 03:52:34,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",191,192,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,194,194,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,196,196,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,ac6ead3,Jake Wharton,Allow multiple method and only one field binding in reflect,193,193,,,0,2018-09-07 03:52:34,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",197,199,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,ac6ead3,Jake Wharton,Allow multiple method and only one field binding in reflect,200,202,,,0,2018-09-07 03:52:34,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,ac6ead3,Jake Wharton,Allow multiple method and only one field binding in reflect,195,195,,,0,2018-09-07 03:52:34,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,ac6ead3,Jake Wharton,Allow multiple method and only one field binding in reflect,207,207,Jake Wharton,cd17a87,0,2018-09-07 03:52:34,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",203,206,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,217,217,Jay Newstrom,e32dca3,0,2018-09-10 21:11:41,2018-09-08 23:44:18
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,208,210,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,218,220,Jake Wharton,4007d61,0,2019-02-05 19:39:44,2019-02-05 18:21:11
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,ac6ead3,Jake Wharton,Allow multiple method and only one field binding in reflect,227,227,Jake Wharton,cd17a87,0,2018-09-07 03:52:34,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",228,244,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,221,223,Jake Wharton,60022fa,0,2019-02-04 23:32:46,2019-02-01 23:10:12
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,226,226,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",211,216,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",246,248,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",258,258,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",261,269,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,245,245,Jake Wharton,cd17a87,0,2018-09-07 03:06:24,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",260,260,,,0,2018-09-07 04:40:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,224,225,,,0,2018-09-10 21:11:41,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,270,270,Jake Wharton,cd17a87,0,2018-09-07 03:06:24,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,249,257,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",289,290,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",271,283,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,291,303,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",319,331,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",304,306,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,307,314,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,284,288,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",315,317,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",336,343,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",332,332,Jake Wharton,de32331,0,2018-09-07 04:40:42,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",345,348,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,344,344,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",333,335,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,349,349,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",356,356,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",350,350,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,351,355,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",357,357,Jake Wharton,de32331,0,2018-09-07 04:40:42,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",358,384,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",400,400,Jake Wharton,de32331,0,2018-09-07 04:40:42,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,393,398,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",399,399,Jake Wharton,44dd832,0,2018-09-07 04:38:40,2018-09-07 03:06:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,385,390,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",391,392,Jake Wharton,44dd832,0,2018-09-07 04:38:40,2018-09-07 03:06:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,420,424,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",401,419,Jake Wharton,44dd832,0,2018-09-07 04:38:40,2018-09-07 03:06:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",426,426,Jake Wharton,de32331,0,2018-09-07 04:40:42,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",425,425,Jake Wharton,44dd832,0,2018-09-07 04:38:40,2018-09-07 03:06:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,446,450,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",427,445,Jake Wharton,44dd832,0,2018-09-07 04:38:40,2018-09-07 03:06:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",452,452,Jake Wharton,de32331,0,2018-09-07 04:40:42,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",451,451,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",453,456,Jake Wharton,ac6ead3,0,2018-09-07 04:38:40,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",457,473,Jake Wharton,0821b0c,0,2018-09-07 03:30:39,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",481,501,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",479,479,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,502,506,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,60022fa,Jake Wharton,"Remove enforcement of required views in reflection backend  Almost all of the nullabiliy annotations don't have runtime retention so this only causes problems. Also you'll get an NPE and it'll be obvious anyway, it just won't be eager.",318,318,Jake Wharton,ac6ead3,0,2019-02-01 23:10:12,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",480,480,Jake Wharton,ac6ead3,0,2018-09-07 04:40:42,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",507,507,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,474,478,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,531,535,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",508,508,Jake Wharton,ac6ead3,0,2018-09-07 04:40:42,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",536,536,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",538,541,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",509,530,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",542,556,Jake Wharton,44dd832,0,2018-09-07 04:38:40,2018-09-07 03:06:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",537,537,Jake Wharton,ac6ead3,0,2018-09-07 04:40:42,2018-09-07 03:52:34
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",562,562,Jake Wharton,0821b0c,0,2018-09-07 04:38:40,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,557,561,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",563,563,Jake Wharton,de32331,0,2018-09-07 04:40:42,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,60022fa,Jake Wharton,"Remove enforcement of required views in reflection backend  Almost all of the nullabiliy annotations don't have runtime retention so this only causes problems. Also you'll get an NPE and it'll be obvious anyway, it just won't be eager.",259,259,,,0,2019-02-01 23:10:12,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",564,582,Jake Wharton,cd17a87,0,2018-09-07 04:38:40,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,583,599,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",600,600,Jake Wharton,0821b0c,0,2018-09-07 04:38:40,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",608,626,Jake Wharton,cd17a87,0,2018-09-07 04:38:40,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",606,606,Jake Wharton,0821b0c,0,2018-09-07 04:38:40,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,601,605,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",607,607,Jake Wharton,0821b0c,0,2018-09-07 04:40:42,2018-09-06 22:01:51
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",632,632,Jake Wharton,cd17a87,0,2018-09-07 04:38:40,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",634,637,Jake Wharton,cd17a87,0,2018-09-07 04:38:40,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",638,642,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,627,631,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",633,633,Jake Wharton,cd17a87,0,2018-09-07 04:40:42,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",648,650,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",645,647,Jake Wharton,cd17a87,0,2018-09-07 04:38:40,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,643,643,,,0,2018-09-07 03:06:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",644,644,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,de32331,Jake Wharton,"Add remaining field binding to reflect  Animation, array, bitmap, boolean, color, float, font, and int.",651,651,Jake Wharton,cd17a87,0,2018-09-07 04:38:40,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",652,652,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",659,659,Jake Wharton,de32331,0,2018-09-07 04:40:42,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",660,660,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,fc6aa93,Jake Wharton,"Add color, dimen, and drawable to reflect",658,658,,,0,2018-09-07 03:30:39,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",664,678,Jake Wharton,5431667,0,2018-09-07 16:34:04,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,e7a0482,Jake Wharton,More integration tests to exercise reflect backend,653,657,Alex Krupa,48f1d7e,0,2019-02-08 16:24:15,2019-02-05 19:39:44
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",661,663,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,686,691,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,697,698,Jake Wharton,de32331,0,2018-09-07 13:36:32,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",682,685,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,696,696,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,692,692,,,0,2018-09-07 03:06:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,699,699,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,693,695,Jake Wharton,5431667,0,2018-09-07 16:11:42,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,700,701,Jake Wharton,c17c16c,0,2018-10-10 20:22:03,2018-09-10 21:26:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,702,705,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,679,681,Jake Wharton,bd4aa5d,0,2018-10-10 20:22:03,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,710,711,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",706,706,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",708,709,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,712,712,,,0,2018-09-07 03:06:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,707,707,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",715,715,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,713,714,Jake Wharton,5431667,0,2018-09-07 16:11:42,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",717,719,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,716,716,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,721,725,Jake Wharton,c17c16c,0,2018-10-10 20:22:03,2018-09-10 21:26:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,720,720,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,727,728,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,746,747,Jake Wharton,c17c16c,0,2018-10-10 20:22:03,2018-09-10 21:26:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",729,745,Jake Wharton,bd4aa5d,0,2018-09-07 16:34:04,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,4007d61,Jake Wharton,Port long click tests to be functional,726,726,Jake Wharton,60022fa,0,2019-02-05 18:21:11,2019-02-01 23:10:12
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,759,761,Jake Wharton,5431667,0,2018-09-07 16:11:42,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,750,751,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",748,749,Jake Wharton,367807f,0,2018-09-07 16:34:04,2018-09-07 04:40:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,752,758,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,762,766,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,4007d61,Jake Wharton,Port long click tests to be functional,795,795,Alex Krupa,9c0e6a9,0,2019-02-05 18:21:11,2019-02-04 23:32:46
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",774,788,Jake Wharton,5431667,0,2018-09-07 16:34:04,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",796,814,Jake Wharton,5431667,0,2018-09-07 16:34:04,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,770,773,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,789,794,Jake Wharton,5431667,0,2018-10-10 20:22:03,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,767,769,Jake Wharton,367807f,0,2018-10-10 20:22:03,2018-09-07 04:40:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,815,819,Jake Wharton,8e38433,0,2018-10-10 20:22:03,2018-09-10 21:11:41
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",821,825,Jake Wharton,5431667,0,2018-09-07 16:34:04,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,826,880,Jake Wharton,4007d61,0,2019-02-05 19:39:44,2019-02-05 18:21:11
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,932,945,Jake Wharton,5431667,0,2018-09-10 21:11:41,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,948,950,Jake Wharton,c17c16c,0,2018-10-10 20:22:03,2018-09-10 21:26:24
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,50fe5d0,Brandon Lerner,"Fix IllegalArgumentException @ butterknife-reflect  Looks like we aren't passing through the MotionEvent.class when using butterknife-reflect.  While this shouldn't effect any production builds since folks shouldn't be using this in prod, it can cause `@OnTouch` annotations to crash when using in debug builds for users that use it.",947,947,Jake Wharton,e7a0482,1,2020-08-05 23:40:11,2019-02-08 16:24:15
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,946,946,Jake Wharton,bd4aa5d,0,2018-10-10 20:22:03,2018-09-07 16:11:42
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,960,960,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,957,959,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,961,961,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,952,956,Jake Wharton,de32331,0,2018-09-10 21:11:41,2018-09-07 04:38:40
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,962,964,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,965,965,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,966,967,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,968,968,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,969,969,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,881,931,Jake Wharton,5431667,0,2019-02-04 23:32:46,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,970,970,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,971,978,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,979,991,,,0,2018-09-07 03:06:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,44dd832,Jake Wharton,Add visibility checks to reflect,1012,1015,,,0,2018-09-07 03:06:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,992,1011,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,1098,1117,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,1016,1096,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,1125,1125,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,1127,1139,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,c17c16c,Jake Wharton,Add error-prone and NullAway,1097,1097,,,1,2018-09-10 21:26:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",1126,1126,,,0,2018-09-07 04:40:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,367807f,Jake Wharton,"Rename uncheckedThing to tryThing  It's not unchecked, we just remove the checked exception.",1118,1118,,,0,2018-09-07 04:40:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1119,1124,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,4007d61,Jake Wharton,Port long click tests to be functional,951,951,Jake Wharton,5431667,0,2019-02-05 18:21:11,2018-09-07 13:36:32
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,cd17a87,Jake Wharton,Add OnClick and OnLongClick to reflect frontend,1142,1142,,,0,2018-09-07 02:54:16,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",1140,1140,,,0,2018-09-07 16:34:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,5431667,Jake Wharton,Add item click to reflect  This makes the integration test fully functional when backed by the reflect backend.,1148,1148,,,0,2018-09-07 13:36:32,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",1144,1144,,,0,2018-09-07 16:34:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,1143,1143,,,0,2018-10-10 20:22:03,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,1141,1141,,,0,2018-10-10 20:22:03,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",1146,1146,,,0,2018-09-07 16:34:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,4007d61,Jake Wharton,Port long click tests to be functional,820,820,Jake Wharton,cd17a87,0,2019-02-05 18:21:11,2018-09-07 02:54:16
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",1150,1150,,,0,2018-09-07 16:34:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,1147,1147,,,0,2018-10-10 20:22:03,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",1152,1152,,,0,2018-09-07 16:34:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,1149,1149,,,0,2018-10-10 20:22:03,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,1151,1151,,,0,2018-10-10 20:22:03,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,1164,1164,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,1145,1145,,,0,2018-10-10 20:22:03,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,1154,1154,,,0,2018-09-10 21:11:41,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",1165,1166,,,0,2018-09-07 16:34:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,1167,1167,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",1168,1170,,,0,2018-09-07 16:34:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,1153,1153,,,0,2018-10-10 20:22:03,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,7d3558a,Jake Wharton,Use Java 8 bytecode in reflect module,1155,1155,,,0,2018-10-10 20:22:03,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,31f940d,Jake Wharton,"Add checked change, editor action, focus, and item long click to reflect",1173,1174,,,0,2018-09-07 16:34:04,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,1171,1172,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,1183,1187,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,1189,1196,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,8e38433,Jake Wharton,Add @OnTouch to reflect backend,1182,1182,,,0,2018-09-10 21:11:41,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,1160,1163,,,0,2019-02-04 23:32:46,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,c17c16c,Jake Wharton,Add error-prone and NullAway,1188,1188,,,1,2018-09-10 21:26:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,1156,1159,,,0,2019-02-05 19:39:44,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",1208,1208,,,0,2018-09-06 22:01:51,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,1198,1207,,,0,2018-09-07 16:11:42,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,c17c16c,Jake Wharton,Add error-prone and NullAway,1197,1197,,,1,2018-09-10 21:26:24,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,48f1d7e,Alex Krupa,Add @OnPageChange support to reflect backend,1175,1177,,,0,2019-02-05 19:39:44,
butterknife-reflect/src/main/java/butterknife/ButterKnife.java,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,1178,1181,,,0,2019-02-04 23:32:46,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,4,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,2,2,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,10,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,12,12,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,20,20,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,22,22,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,23,23,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,24,24,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",21,21,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,26,27,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,11,,,0,2017-10-13 02:47:15,
butterknife-runtime/src/test/java/butterknife/BindDimenTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,25,25,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,4,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,2,2,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,10,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,12,12,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,20,20,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,22,22,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,23,23,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",21,21,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,24,24,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,26,27,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,11,,,0,2017-10-13 02:47:15,
butterknife-runtime/src/test/java/butterknife/BindBoolTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,25,25,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,2,2,,,0,2015-07-14 17:38:44,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,4,4,,,0,2015-07-14 17:38:44,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,12,12,,,0,2015-07-14 17:38:44,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,9,10,,,0,2015-07-14 17:38:44,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,22,24,,,0,2015-07-14 17:38:44,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,20,20,,,0,2015-07-14 17:38:44,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,26,27,,,0,2015-07-14 17:38:44,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",21,21,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,25,25,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindBitmapTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,11,11,,,0,2017-10-13 04:53:52,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,4,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,2,2,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,10,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,01e4e4e,Jake Wharton,Remove legacy support,26,27,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,25,25,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,12,14,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,17,24,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,15,15,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,68,75,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,11,,,0,2017-10-13 02:47:15,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,01e4e4e,Jake Wharton,Remove legacy support,77,78,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,113,113,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,76,76,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,65,66,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,62,64,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,67,67,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,121,121,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,28,61,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",114,115,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,123,123,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",118,120,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,124,124,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,127,128,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",116,116,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,125,125,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",122,122,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,79,112,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,117,117,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindColorTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,126,126,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindFloatTest.java,c24995b,Jake Wharton,Add @BindFloat annotation.,1,10,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/test/java/butterknife/BindFloatTest.java,c24995b,Jake Wharton,Add @BindFloat annotation.,15,15,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/test/java/butterknife/BindFloatTest.java,c24995b,Jake Wharton,Add @BindFloat annotation.,12,14,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/test/java/butterknife/BindFloatTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,11,,,0,2017-10-13 02:47:15,
butterknife-runtime/src/test/java/butterknife/BindFloatTest.java,c24995b,Jake Wharton,Add @BindFloat annotation.,17,24,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/test/java/butterknife/BindFloatTest.java,c24995b,Jake Wharton,Add @BindFloat annotation.,26,27,,,0,2016-08-26 20:52:56,
butterknife-runtime/src/test/java/butterknife/BindFloatTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,25,25,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindFloatTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",4,4,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",2,2,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",9,10,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",12,12,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,16,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,01e4e4e,Jake Wharton,Remove legacy support,28,29,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",18,21,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,27,27,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,0792044,Jake Wharton,Always generate a binding class.,22,26,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,31,31,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,0792044,Jake Wharton,Always generate a binding class.,30,30,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,11,,,0,2017-10-13 02:47:15,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,17,17,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,0792044,Jake Wharton,Always generate a binding class.,32,33,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,34,34,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",45,45,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,35,35,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,36,36,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,40,40,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,42,43,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,37,39,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,41,41,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,44,44,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",48,49,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",56,56,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,47,47,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",57,57,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",54,55,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,46,46,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",59,59,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,0792044,Jake Wharton,Always generate a binding class.,50,50,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,0792044,Jake Wharton,Always generate a binding class.,52,52,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",61,61,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",63,65,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,0792044,Jake Wharton,Always generate a binding class.,53,53,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",51,51,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",73,73,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",68,68,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",70,72,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",66,67,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",74,74,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",75,79,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,58,58,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,60,60,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,62,62,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",81,82,,,0,2015-07-07 23:13:44,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,69,69,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindArrayTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,80,80,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,01e4e4e,Jake Wharton,Remove legacy support,28,29,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,01e4e4e,Jake Wharton,Remove legacy support,82,83,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,1,5,,,0,2017-07-04 04:41:12,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,30,64,,,0,2017-07-04 04:41:12,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,12,26,,,0,2017-07-04 04:41:12,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,27,27,,,0,2017-07-04 04:41:12,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,6,11,,,0,2017-07-04 04:41:12,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,65,80,,,0,2017-07-07 14:17:45,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,84,118,,,0,2017-07-07 14:17:45,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,81,81,,,0,2017-07-07 14:17:45,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,119,133,,,0,2017-07-04 04:41:12,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,152,152,,,0,2017-07-04 04:41:12,
butterknife-runtime/src/test/java/butterknife/BindFontTest.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,134,151,,,0,2017-07-07 14:17:45,
butterknife-runtime/src/test/java/butterknife/ClasspathParentBindTest.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",1,258,,,0,2019-08-28 09:33:47,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,2,2,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,4,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,12,12,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,10,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,20,20,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,23,23,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,24,24,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,22,22,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",21,21,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,26,27,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,25,25,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindIntTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,11,,,0,2017-10-13 02:47:15,
butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java,01e4e4e,Jake Wharton,Remove legacy support,29,30,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java,01e4e4e,Jake Wharton,Remove legacy support,85,86,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",31,83,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",28,28,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",87,120,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",1,27,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendActivityTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",84,84,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java,01e4e4e,Jake Wharton,Remove legacy support,32,33,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java,01e4e4e,Jake Wharton,Remove legacy support,91,92,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",31,31,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",90,90,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",1,30,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",93,126,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendDialogTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",34,89,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,4,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,2,2,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,10,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,12,12,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,22,22,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,20,20,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",21,21,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,23,23,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,24,24,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,cda0bad,Jake Wharton,Port some resource binding tests to be functional.,11,11,,,0,2017-10-13 02:47:15,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,26,27,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindStringTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,25,25,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,90,91,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,32,33,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",34,88,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",89,89,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",31,31,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",1,30,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/ExtendViewTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",92,125,,,0,2017-01-21 18:46:34,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,6355826,Jake Wharton,"Suppress resource type lint warnings when a resource is referenced.  aapt can run at any time and change the resource IDs out from under us. This does not actually cause failures in the runtime, though, as the processor would re-run and the IDs would be updated.",7,7,,,0,2015-10-10 00:43:13,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,6ff7c28,Christian Becker,"Add SuppressLint(""ClickableViewAccessibility"") to OnTouchListener's",3,3,Jake Wharton,e9dfe17,0,2017-01-09 15:31:03,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,2,2,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,8,14,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,6,6,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,15,15,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0fe313f,Jake Wharton,Remove ViewBinder inheritance.,4,5,,,0,2016-06-20 20:48:31,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d2c5f78,Tom Reznik,Support Multiple Listeners To a Single View,20,20,,,0,2014-10-13 15:28:55,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,19,19,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,16,16,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,21,21,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,17,18,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d2c5f78,Tom Reznik,Support Multiple Listeners To a Single View,24,24,,,0,2014-10-13 15:28:55,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,22,22,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c17c16c,Jake Wharton,Add error-prone and NullAway,25,25,Jake Wharton,72405e7,1,2018-09-10 21:26:24,2018-09-10 21:04:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,26,27,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,23,23,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,1ccdbb4,Gautam Korlam,Fix generated code,29,29,,,1,2016-06-20 01:44:40,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",28,28,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",30,31,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,32,32,,,0,2015-09-30 02:54:34,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c17c16c,Jake Wharton,Add error-prone and NullAway,36,36,Jake Wharton,72405e7,1,2018-09-10 21:26:24,2018-09-10 21:04:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,34,34,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",33,33,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,35,35,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,37,37,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",38,38,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,cc051bb,Jake Wharton,Do not emit cast if the type is View.  This avoids compiler warnings for redundant casts.,40,40,,,0,2013-10-06 02:51:57,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,39,39,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,41,41,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",42,42,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",44,44,,,0,2015-09-26 03:41:19,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,834e9d1,Jake Wharton,Remove Android from the compiler.,45,46,,,0,2015-10-01 04:25:13,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,47,47,Jake Wharton,c17c16c,0,2018-09-24 21:24:40,2018-09-10 21:26:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),48,48,Donald Chai,a2e54d7,0,2018-06-14 19:57:14,2018-01-18 04:11:52
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,49,49,Jake Wharton,c17c16c,0,2018-09-24 21:24:40,2018-09-10 21:26:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),50,50,Donald Chai,a2e54d7,0,2018-06-14 19:57:14,2018-01-18 04:11:52
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,6ff7c28,Christian Becker,"Add SuppressLint(""ClickableViewAccessibility"") to OnTouchListener's",51,52,Jake Wharton,0fe8995,0,2017-01-09 15:31:03,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",53,53,,,1,2016-04-02 04:53:49,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),56,56,Donald Chai,a2e54d7,0,2018-06-14 19:57:14,2018-01-18 04:11:52
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,59,59,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,57,58,KB Sriram,879874c,0,2017-07-02 19:18:54,2017-03-12 23:16:33
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b8791de,Jake Wharton,Invert support/androidx terminology  AndroidX is current. Support is legacy.,55,55,Jake Wharton,c17c16c,0,2018-09-24 21:24:40,2018-09-10 21:26:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",64,66,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,60,60,,,0,2016-05-06 23:51:17,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",62,62,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,63,63,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,67,69,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",72,75,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,71,71,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",70,70,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",77,78,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,80,80,,,0,2016-05-06 23:51:17,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,76,76,Jake Wharton,0c9a1d7,0,2016-11-08 15:12:12,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",82,82,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d611631,Jake Wharton,Emit less methods for final types.,79,79,,,0,2016-04-26 01:50:23,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,90,91,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",83,85,Jake Wharton,0c9a1d7,0,2017-01-21 18:46:34,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,86,88,Jake Wharton,63d79fd,0,2016-11-08 15:12:12,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",92,96,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,89,89,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,97,98,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),99,99,Donald Chai,a2e54d7,0,2018-06-14 19:57:14,2018-01-18 04:11:52
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2c09db4,Jake Wharton,Rename unbinder references to binding.,61,61,,,0,2016-08-23 02:18:22,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,102,103,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2c09db4,Jake Wharton,Rename unbinder references to binding.,81,81,,,0,2016-08-23 02:18:22,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",106,107,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0fe313f,Jake Wharton,Remove ViewBinder inheritance.,109,109,,,0,2016-06-20 20:48:31,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d611631,Jake Wharton,Emit less methods for final types.,108,108,,,0,2016-04-26 01:50:23,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d611631,Jake Wharton,Emit less methods for final types.,110,110,,,0,2016-04-26 01:50:23,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,111,111,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,54,54,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,112,112,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,114,114,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",115,115,,,1,2016-04-02 04:53:49,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,100,100,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,118,118,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,116,117,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,43,43,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2c09db4,Jake Wharton,Rename unbinder references to binding.,105,105,,,0,2016-08-23 02:18:22,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",122,122,Christian Becker,6ff7c28,0,2017-01-21 18:46:34,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",124,124,Christian Becker,6ff7c28,0,2017-01-21 18:46:34,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,123,123,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,125,125,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",126,126,Christian Becker,6ff7c28,0,2017-01-21 18:46:34,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,129,129,Jake Wharton,63d79fd,0,2016-09-09 02:40:56,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",128,128,Christian Becker,6ff7c28,0,2017-01-21 18:46:34,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,127,127,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,101,101,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,131,131,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,133,133,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,135,135,Jake Wharton,63d79fd,0,2016-09-09 02:40:56,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,137,137,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,136,136,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,138,141,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,142,142,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,97b0610,Jake Wharton,No need to pass field value as param.,146,146,Jake Wharton,e9dfe17,0,2017-01-20 23:19:06,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,119,121,,,0,2016-09-08 16:46:48,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,148,148,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,132,132,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,97b0610,Jake Wharton,No need to pass field value as param.,150,150,Jake Wharton,e9dfe17,0,2017-01-20 23:19:06,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,130,130,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,143,145,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,156,156,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,134,134,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,158,158,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",157,157,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",170,170,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",159,168,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,169,169,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,171,171,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,182,182,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",183,183,Christian Becker,6ff7c28,0,2017-01-21 18:46:34,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",172,181,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,149,149,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,184,184,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",185,194,Christian Becker,6ff7c28,0,2017-01-21 18:46:34,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,91cb862,Jake Wharton,Break apart view binder class from binding.,196,196,,,0,2016-06-20 06:18:53,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,91cb862,Jake Wharton,Break apart view binder class from binding.,198,199,,,0,2016-06-20 06:18:53,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",200,200,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,147,147,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,97b0610,Jake Wharton,No need to pass field value as param.,201,201,Christian Becker,6ff7c28,0,2017-01-20 23:19:06,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",202,202,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,97b0610,Jake Wharton,No need to pass field value as param.,203,203,Christian Becker,6ff7c28,0,2017-01-20 23:19:06,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,104,104,Jake Wharton,63d79fd,0,2019-01-04 00:15:29,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,206,206,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",204,205,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",113,113,Jake Wharton,63d79fd,0,2019-08-28 09:33:47,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",210,211,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,212,218,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,151,155,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,6ff7c28,Christian Becker,"Add SuppressLint(""ClickableViewAccessibility"") to OnTouchListener's",219,224,Jake Wharton,0fe8995,0,2017-01-09 15:31:03,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,225,226,Jake Wharton,63d79fd,0,2016-09-09 02:40:56,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,228,228,Jake Wharton,63d79fd,0,2016-09-09 02:40:56,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,235,235,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,236,236,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,238,238,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,207,207,,,0,2016-08-23 02:02:21,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,208,209,,,0,2016-08-23 03:56:34,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",239,239,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,227,227,,,0,2016-09-08 16:46:48,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,241,241,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,229,234,,,0,2016-09-08 16:46:48,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,245,245,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,237,237,,,0,2016-09-08 16:46:48,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,248,248,Jake Wharton,a7ad5a7,0,2016-09-09 05:14:19,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,197,197,Jake Wharton,63d79fd,0,2019-01-04 00:15:29,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,247,247,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,249,249,Jake Wharton,0c9a1d7,0,2017-07-18 06:28:05,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,252,252,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,257,258,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,195,195,Christian Becker,6ff7c28,0,2019-01-04 00:15:29,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,242,244,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,261,261,Jake Wharton,a7ad5a7,0,2016-09-09 04:41:58,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,250,251,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,264,264,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,253,256,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,240,240,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,259,260,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,265,265,Jake Wharton,a7ad5a7,0,2016-09-09 04:41:58,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",268,268,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,271,271,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d611631,Jake Wharton,Emit less methods for final types.,273,273,,,0,2016-04-26 01:50:23,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,269,270,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,274,274,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,ab7332b,Jake Wharton,Skip caching the target to a local if it isn't needed.,275,275,,,0,2016-05-07 07:33:00,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,276,276,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,279,279,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,266,267,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,280,280,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,263,263,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,97b0610,Jake Wharton,No need to pass field value as param.,282,282,Jake Wharton,a7ad5a7,0,2017-01-20 23:19:06,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,262,262,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",278,278,,,0,2016-08-26 22:41:13,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,272,272,Christian Becker,6ff7c28,0,2019-01-04 00:15:29,2017-01-09 15:31:03
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,287,287,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,291,292,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,288,290,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,246,246,Jake Wharton,63d79fd,0,2019-01-04 00:15:29,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,293,294,Jake Wharton,a7ad5a7,0,2016-09-09 05:14:19,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,296,296,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,295,295,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,300,300,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,297,297,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,301,301,Jake Wharton,fbdf0c1,0,2019-01-04 00:15:29,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,298,299,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,302,304,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,281,281,,,0,2016-09-08 16:46:48,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,305,305,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,306,306,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,277,277,Jake Wharton,0fe8995,0,2019-01-04 00:15:29,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,310,311,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,308,308,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,309,309,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",312,312,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,315,320,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,330,330,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,326,329,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,334,335,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,331,333,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,337,338,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",336,336,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2c09db4,Jake Wharton,Rename unbinder references to binding.,314,314,,,0,2016-08-23 02:18:22,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,340,340,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,283,286,,,0,2016-09-08 16:46:48,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,307,307,,,0,2016-09-08 16:46:48,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",341,341,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,342,343,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,313,313,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,347,347,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,348,348,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,349,349,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a2e54d7,Donald Chai,Stringify resource IDs using Integer.toHexString to avoid issues with hyphens for resource IDs larger than 0x7FFFFFFF.,321,324,Jake Wharton,a7ad5a7,0,2018-01-18 04:11:52,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,350,353,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,354,354,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,325,325,,,0,2016-08-23 16:52:35,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,359,359,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,360,364,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,365,370,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,355,357,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,372,372,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,edcf4a9,Jake Wharton,Skip storing to local when not needed. Cast explicitly to target.,373,373,,,0,2016-05-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,379,379,Jake Wharton,0fe8995,0,2017-07-18 06:28:05,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,345,346,Jake Wharton,a7ad5a7,0,2018-09-10 21:04:06,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c17c16c,Jake Wharton,Add error-prone and NullAway,374,374,Jake Wharton,d05a1bb,1,2018-09-10 21:26:24,2017-07-18 06:28:05
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,339,339,Jake Wharton,a7ad5a7,0,2019-01-04 00:15:29,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,371,371,Jake Wharton,d05a1bb,0,2019-01-04 00:15:29,2017-07-18 06:28:05
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,375,378,,,0,2016-08-23 02:02:21,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,390,390,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,383,383,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,edcf4a9,Jake Wharton,Skip storing to local when not needed. Cast explicitly to target.,398,398,,,0,2016-05-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,403,403,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,edcf4a9,Jake Wharton,Skip storing to local when not needed. Cast explicitly to target.,400,402,,,0,2016-05-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,404,404,Jake Wharton,ee2043f,0,2017-07-18 06:28:05,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,405,406,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,399,399,,,0,2016-08-23 02:02:21,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,408,408,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,358,358,,,0,2016-08-23 16:52:35,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,391,397,,,0,2016-08-23 02:02:21,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,409,410,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b59929d,Jake Wharton,Emit a cast for non-View bindings in the specialized single binding case.,380,382,Jake Wharton,0fe8995,0,2017-08-09 22:01:50,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,ea8c9b7,Jake Wharton,Some code clean-up missed from 8619d3a1719afe1cbaecf8fa9041599b90d561fe.,413,414,,,0,2013-11-18 14:55:32,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,415,415,Jake Wharton,ee2043f,0,2017-07-18 06:28:05,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,411,411,Jake Wharton,ee2043f,0,2017-07-18 06:28:05,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3dc7e51,Jake Wharton,There can only be one field binding so model it as such.,417,417,,,0,2016-05-08 04:00:26,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,384,389,,,0,2016-08-23 02:02:21,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,427,427,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3b83992,Jake Wharton,First round of casting optimization.  * Use explicit casts for collection bindings. * Omit 'who' parameter for optional views. * Remove unused implicit cast of view lookup methods.,418,418,,,0,2016-05-07 20:50:31,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,416,416,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,428,428,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,429,429,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,407,407,,,0,2016-08-23 02:02:21,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,430,430,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,419,426,Jake Wharton,0fe8995,0,2017-07-18 06:28:05,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,ea8c9b7,Jake Wharton,Some code clean-up missed from 8619d3a1719afe1cbaecf8fa9041599b90d561fe.,431,431,,,0,2013-11-18 14:55:32,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,afcac3e,Jake Wharton,Support binding resource types to fields.,435,435,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,432,432,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,437,437,,,0,2015-03-15 00:06:02,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,436,436,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,ea8c9b7,Jake Wharton,Some code clean-up missed from 8619d3a1719afe1cbaecf8fa9041599b90d561fe.,440,440,,,0,2013-11-18 14:55:32,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,438,439,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,441,441,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,442,442,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,443,443,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,444,444,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,445,446,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,450,450,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,453,453,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b541c18,Jake Wharton,Don't use a local or store a field ref when binding to root.,452,452,,,0,2016-05-08 03:32:22,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,412,412,Jake Wharton,ee2043f,0,2019-01-04 00:15:29,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,455,455,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,344,344,Jake Wharton,a7ad5a7,0,2019-01-04 00:15:29,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a2e54d7,Donald Chai,Stringify resource IDs using Integer.toHexString to avoid issues with hyphens for resource IDs larger than 0x7FFFFFFF.,451,451,Jake Wharton,a7ad5a7,0,2018-01-18 04:11:52,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,afcac3e,Jake Wharton,Support binding resource types to fields.,459,459,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,afcac3e,Jake Wharton,Support binding resource types to fields.,456,456,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,448,449,,,0,2016-08-23 16:52:35,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,457,457,,,0,2015-03-15 00:06:02,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,576e9c9,Jake Wharton,More efficient map iteration.,458,458,,,0,2014-04-20 10:04:55,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,460,460,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,ea8c9b7,Jake Wharton,Some code clean-up missed from 8619d3a1719afe1cbaecf8fa9041599b90d561fe.,463,463,,,0,2013-11-18 14:55:32,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,465,468,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,454,454,,,0,2016-08-23 16:52:35,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,469,470,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,471,471,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,464,464,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,461,461,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2c09db4,Jake Wharton,Rename unbinder references to binding.,447,447,,,0,2016-08-23 02:18:22,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,433,434,Jake Wharton,0fe8995,0,2019-01-04 00:15:29,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,472,472,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,473,473,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,475,475,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,474,474,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d2c5f78,Tom Reznik,Support Multiple Listeners To a Single View,485,486,,,0,2014-10-13 15:28:55,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,487,490,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d2c5f78,Tom Reznik,Support Multiple Listeners To a Single View,491,492,,,0,2014-10-13 15:28:55,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,483,484,Jake Wharton,a7ad5a7,0,2016-11-08 15:12:12,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,502,502,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,493,494,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,504,504,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,506,506,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,503,503,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,505,505,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,507,507,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,509,513,Jake Wharton,fbdf0c1,0,2019-02-05 17:05:58,2018-11-19 05:01:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,495,501,Jake Wharton,a7ad5a7,0,2017-07-18 06:28:05,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,912fecf,Jake Wharton,Add @OnClick method injection.,516,516,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,514,515,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,508,508,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,517,517,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,522,522,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,519,520,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b04891f,Serj Lotutovici,Allow listener annotations to specify remove method.  By specifying a remover method listener classes can ensure a proper unbinding behaviour. If not specified the compiler will use the setter. This also fixes the issue with `TextWatcher` unbinding.,524,525,,,1,2016-05-06 05:18:03,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,527,528,Warren Smith,f0b7351,0,2018-09-10 21:04:06,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",529,529,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,530,530,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b17a6c1,Christian Becker,Remove redundant 'this' keyword,523,523,,,0,2016-06-21 12:35:21,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,476,482,Jake Wharton,ee2043f,0,2019-02-05 17:05:58,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,b541c18,Jake Wharton,Don't use a local or store a field ref when binding to root.,531,531,,,0,2016-05-08 03:32:22,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,518,518,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,026c0fe,Jake Wharton,"Inline binding into the unbinder constructor.  This saves a bunch of generated methods, allows visibility reduction, and some other small advantages.",532,532,,,0,2016-05-07 18:59:16,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,533,533,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,537,537,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,534,536,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,538,538,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,539,540,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,95f2303,Tom Reznik,Use Java 7 language level.,547,547,,,0,2015-07-29 21:00:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,548,564,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,542,546,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,569,569,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,565,566,Jake Wharton,63d79fd,0,2016-11-08 15:12:12,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,567,568,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,572,572,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,570,570,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,571,571,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,574,574,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,576,576,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,573,573,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,462,462,Jake Wharton,a7ad5a7,0,2019-01-04 00:15:29,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,575,575,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,577,578,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,579,579,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,581,581,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,582,582,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,583,586,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,580,580,,,0,2013-11-18 13:25:42,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a9fc74f,Jake Wharton,Clean up internals of how BindingClass generates code.  Remove the need to know about subclasses or parent types beyond the immediate. Type hierarchies are small so we can iterate them on-demand.,614,615,,,0,2016-05-07 08:34:40,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,912fecf,Jake Wharton,Add @OnClick method injection.,611,612,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,588,610,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,613,613,,,0,2015-07-14 17:38:44,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,541,541,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,621,622,Jake Wharton,63d79fd,0,2016-09-09 02:40:56,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,091da11,Jake Wharton,Improve performance of generated code (part 3).  Unbinding now calls the most-specific implementation which reads the target into a local as it super's up the stack for bottom-up unbinding. This also fixed a bug where the views on which listeners were set were retained by the unbinder even after calling unbind().,617,618,,,1,2016-05-07 07:17:47,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8813451,Jake Wharton,Omit warning suppression when all resource references are qualified.,623,628,,,0,2016-06-20 19:00:36,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,616,616,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,8813451,Jake Wharton,Omit warning suppression when all resource references are qualified.,619,620,,,0,2016-06-20 19:00:36,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0792044,Jake Wharton,Always generate a binding class.,587,587,,,0,2016-08-23 05:02:09,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,f89fb0f,Jake Wharton,Consolidate generated code utilities. Use theme color[StateList] methods.,633,637,,,0,2015-09-30 04:39:18,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,631,631,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,632,632,Jake Wharton,a7ad5a7,0,2016-09-09 04:41:58,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,630,630,Jake Wharton,a7ad5a7,0,2016-09-09 04:41:58,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a9fc74f,Jake Wharton,Clean up internals of how BindingClass generates code.  Remove the need to know about subclasses or parent types beyond the immediate. Type hierarchies are small so we can iterate them on-demand.,639,639,,,0,2016-05-07 08:34:40,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",638,638,,,1,2016-04-02 04:53:49,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a9fc74f,Jake Wharton,Clean up internals of how BindingClass generates code.  Remove the need to know about subclasses or parent types beyond the immediate. Type hierarchies are small so we can iterate them on-demand.,658,658,,,0,2016-05-07 08:34:40,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,640,640,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a9fc74f,Jake Wharton,Clean up internals of how BindingClass generates code.  Remove the need to know about subclasses or parent types beyond the immediate. Type hierarchies are small so we can iterate them on-demand.,642,647,,,0,2016-05-07 08:34:40,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,6ff7c28,Christian Becker,"Add SuppressLint(""ClickableViewAccessibility"") to OnTouchListener's",648,657,Jake Wharton,0fe8995,0,2017-01-09 15:31:03,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,660,660,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,641,641,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,667,667,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,521,521,Jake Wharton,a7ad5a7,0,2019-01-04 00:15:29,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,659,659,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a9fc74f,Jake Wharton,Clean up internals of how BindingClass generates code.  Remove the need to know about subclasses or parent types beyond the immediate. Type hierarchies are small so we can iterate them on-demand.,661,666,,,0,2016-05-07 08:34:40,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,01e4e4e,Jake Wharton,Remove legacy support,526,526,Jake Wharton,a7ad5a7,0,2019-01-04 00:15:29,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,54200f4,Jake Wharton,Improve performance of generated code (part 2).  The bindToTarget method now explicitly requires only the types that are needed via a changing (but deterministic) set of parameters.,669,670,,,0,2016-05-07 05:32:55,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,673,673,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,671,671,Jake Wharton,a7ad5a7,0,2016-09-09 02:40:56,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,672,672,Jake Wharton,0fe8995,0,2016-11-08 15:12:12,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,680,680,Jake Wharton,63d79fd,0,2016-09-09 02:40:56,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,edcf4a9,Jake Wharton,Skip storing to local when not needed. Cast explicitly to target.,674,679,,,0,2016-05-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,685,686,Jake Wharton,63d79fd,0,2016-09-09 02:40:56,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,683,683,Jake Wharton,63d79fd,0,2016-09-09 02:40:56,2016-09-09 01:55:24
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3b83992,Jake Wharton,First round of casting optimization.  * Use explicit casts for collection bindings. * Omit 'who' parameter for optional views. * Remove unused implicit cast of view lookup methods.,688,690,,,0,2016-05-07 20:50:31,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,629,629,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,694,695,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",693,693,,,1,2016-04-02 04:53:49,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,afe6c83,Jake Wharton,Use ClassName for propagating generated class info.,691,691,,,0,2016-05-07 01:52:00,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",696,702,Jake Wharton,97b0610,0,2017-01-21 18:46:34,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,703,706,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",707,707,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",681,682,Jake Wharton,72405e7,0,2019-08-28 09:33:47,2018-09-10 21:04:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,708,709,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",710,711,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,712,713,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",714,720,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,721,723,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",724,724,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",726,728,Jake Wharton,0fe8995,0,2017-01-21 18:46:34,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,725,725,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,729,729,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c17c16c,Jake Wharton,Add error-prone and NullAway,684,684,Jake Wharton,97b0610,1,2018-09-10 21:26:24,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,29551fc,Jake Wharton,Remove the need for the binder class.,692,692,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,668,668,,,0,2016-09-08 16:46:48,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,731,731,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",737,739,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,736,736,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,740,741,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,743,743,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",744,746,Jake Wharton,0fe8995,0,2017-01-21 18:46:34,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",742,742,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,747,748,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,687,687,,,0,2016-09-09 05:14:19,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,749,752,Jake Wharton,a7ad5a7,0,2016-09-09 01:55:24,2016-09-08 16:46:48
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,755,761,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,767,769,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,764,765,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,766,766,,,0,2016-11-08 15:12:12,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,732,735,,,0,2016-11-08 15:12:12,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0c9a1d7,Jake Wharton,Consolidate resource bindings into a single type.,770,770,,,0,2016-09-09 02:40:56,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,771,773,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,753,754,,,0,2016-09-09 05:14:19,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,762,763,,,0,2016-11-08 15:12:12,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,775,777,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",730,730,Jake Wharton,97b0610,0,2019-08-28 09:33:47,2017-01-20 23:19:06
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,788,789,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,779,787,,,0,2016-11-08 15:12:12,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",804,806,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",774,774,Jake Wharton,0fe8995,0,2019-08-28 09:33:47,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,809,809,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,c17c16c,Jake Wharton,Add error-prone and NullAway,778,778,Jake Wharton,0fe8995,1,2018-09-10 21:26:24,2016-09-09 05:14:19
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",810,833,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,792,792,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",834,834,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,793,793,,,0,2016-11-08 15:12:12,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,807,808,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,800,803,,,0,2016-11-08 15:12:12,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,794,799,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,790,791,,,0,2016-11-08 15:12:12,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,4,4,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,2,2,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,10,12,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,9,9,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,20,20,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,01e4e4e,Jake Wharton,Remove legacy support,26,27,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,21,21,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",22,25,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",28,28,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",30,30,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,29,29,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",31,31,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,34,34,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,37,38,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,40,46,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",47,47,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,39,39,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,48,48,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,32,33,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",55,55,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,35,35,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,58,58,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,36,36,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,53,54,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",49,49,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,63,63,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,50,50,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,61,61,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,65,65,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,122,122,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,66,121,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",56,57,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",59,59,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,62,62,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,60,60,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,51,52,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnEditorActionTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,64,64,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,4,4,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,2,2,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,10,12,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,9,9,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,20,20,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,01e4e4e,Jake Wharton,Remove legacy support,24,25,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,21,23,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,28,28,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,29,29,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,26,26,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,32,32,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,27,27,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,33,33,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",45,45,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,35,36,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,34,34,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,38,44,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,30,31,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,48,48,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",53,53,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,56,56,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,51,52,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,59,59,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,37,37,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,49,50,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,46,46,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",54,55,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",57,57,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,61,61,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,63,64,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",47,47,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,58,58,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,60,60,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnFocusChangeTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,62,62,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,2,2,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,4,4,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,9,10,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,01e4e4e,Jake Wharton,Remove legacy support,27,28,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,63,63,,,0,2015-09-30 01:30:53,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",64,65,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,acf89ad,Jake Wharton,Port more resource binding to functional tests.,11,11,,,0,2017-10-13 04:53:52,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,15,16,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,18,25,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,29,62,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,72,72,,,0,2015-09-30 01:30:53,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,12,14,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,17,17,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",66,67,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,01e4e4e,Jake Wharton,Remove legacy support,78,79,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",69,71,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,26,26,,,0,2016-09-09 04:41:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0792044,Jake Wharton,Always generate a binding class.,73,76,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,77,77,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,68,68,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,82,82,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0792044,Jake Wharton,Always generate a binding class.,83,84,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,85,85,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0792044,Jake Wharton,Always generate a binding class.,80,81,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,86,86,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,87,87,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,88,90,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,91,91,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,54200f4,Jake Wharton,Improve performance of generated code (part 2).  The bindToTarget method now explicitly requires only the types that are needed via a changing (but deterministic) set of parameters.,96,96,,,0,2016-05-07 05:32:55,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,92,92,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,93,94,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",99,99,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,95,95,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,106,106,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,98,98,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",104,105,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",107,107,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0792044,Jake Wharton,Always generate a binding class.,100,100,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,97,97,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,109,109,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0792044,Jake Wharton,Always generate a binding class.,102,102,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,111,111,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,113,115,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",101,101,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0792044,Jake Wharton,Always generate a binding class.,103,103,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,123,123,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,108,108,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,110,110,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",118,118,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",116,117,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,126,126,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",120,122,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,125,125,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,127,127,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,112,112,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",124,124,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,afcac3e,Jake Wharton,Support binding resource types to fields.,129,130,,,0,2015-03-15 07:44:45,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,119,119,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindDrawableTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,128,128,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,8,8,Jake Wharton,9b59a14,0,2018-09-10 21:04:06,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,2,2,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,4,4,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,10,11,Jake Wharton,9b59a14,0,2018-09-10 21:04:06,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,12,14,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",9,9,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,22,22,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,01e4e4e,Jake Wharton,Remove legacy support,70,70,Jake Wharton,72405e7,0,2019-01-04 00:15:29,2018-09-10 21:04:06
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,25,69,Jake Wharton,9b59a14,0,2018-09-10 21:04:06,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,72,72,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,16,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",19,21,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,74,74,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,17,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,76,77,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,73,73,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,23,24,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,18,18,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,71,71,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnPageChangeTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,75,75,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,4,4,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,2,2,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,10,12,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,9,9,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,20,20,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,25,26,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,21,24,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,27,27,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,29,29,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,30,30,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,33,33,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,28,28,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,31,32,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,34,34,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",46,46,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,36,37,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,35,35,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,39,45,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,47,47,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,38,38,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,57,57,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",48,48,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,49,49,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",54,54,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,52,53,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,60,60,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",58,58,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",55,56,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,64,64,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,62,62,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,65,119,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,120,120,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,50,51,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,61,61,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,59,59,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemLongClickTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,63,63,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c24995b,Jake Wharton,Add @BindFloat annotation.,10,10,Jake Wharton,2f8d900,0,2016-08-26 20:52:56,2016-08-23 16:52:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,11,11,Marcel Schnelle,5184ea1,0,2017-07-04 04:41:12,2017-07-02 19:18:54
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,2,2,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,4,9,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,14,14,,,0,2016-04-23 07:46:57,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,12,13,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,29,30,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,28,28,Jake Wharton,fb7d92b,0,2017-07-07 14:17:45,2017-07-04 04:41:12
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,3,3,Felipe Lima,4ad9f98,0,2017-07-02 19:18:54,2017-02-27 17:02:39
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,31,31,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,15,27,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,34,34,Jake Wharton,ee2043f,0,2017-07-18 06:28:05,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",33,33,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,32,32,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,36,36,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,40,41,Jay Newstrom,180ca4f,0,2016-06-19 19:32:42,2016-05-11 23:56:06
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,39,39,Ivan Gavrilovic,3f675f4,0,2019-11-20 03:13:41,2019-09-05 03:12:28
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,42,47,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,38,38,Jake Wharton,91cb862,0,2016-06-22 17:40:58,2016-06-20 06:18:53
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,48,48,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,37,37,Jay Newstrom,180ca4f,0,2016-06-19 19:32:42,2016-05-11 23:56:06
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,50,51,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a300be0,Jake Wharton,Make the compiler run on JavaPoet.,54,58,,,0,2015-08-10 06:39:51,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",53,53,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,59,59,Warren Smith,f0b7351,1,2018-09-10 21:26:24,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,91cb862,Jake Wharton,Break apart view binder class from binding.,35,35,Jay Newstrom,180ca4f,0,2016-06-20 06:18:53,2016-05-11 23:56:06
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,60,62,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",63,63,,,0,2015-09-26 03:41:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,64,64,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,65,65,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7f0f4f0,Tom Reznik,Support any annotation named @Nullable.,66,66,,,0,2015-03-14 05:04:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,69,69,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,912fecf,Jake Wharton,Add @OnClick method injection.,68,68,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,67,67,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,71,71,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,74,76,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,49,49,Jake Wharton,959e4ba,0,2016-06-19 19:32:42,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,73,73,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,72,72,,,0,2013-11-19 21:42:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,78,78,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",82,82,,,1,2016-04-02 04:53:49,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,77,77,,,0,2014-04-14 08:01:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",80,81,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,79,79,Gautam Korlam,b22e9ef,0,2016-08-19 00:19:35,2016-07-11 20:32:41
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,85,85,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,86,86,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,87,87,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,90,90,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",91,91,,,0,2015-09-26 03:41:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",92,92,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,88,89,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,65b8248,Jake Wharton,Rename annotation processor to match class entry name.,94,94,,,0,2014-02-03 03:32:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,95,96,Jake Wharton,2f8d900,0,2016-09-09 04:41:58,2016-08-23 16:52:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,97,97,Felipe Lima,4ad9f98,0,2017-07-18 06:28:05,2017-02-27 17:02:39
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,52,52,Jake Wharton,959e4ba,0,2016-09-09 01:55:24,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,99,99,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,93,93,Gautam Korlam,b4cfd88,1,2018-09-10 21:26:24,2018-04-10 15:14:21
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,102,102,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),98,98,Marcel Schnelle,5184ea1,1,2018-04-13 15:23:50,2017-07-02 19:18:54
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,105,105,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,103,103,,,0,2015-07-14 17:38:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",106,106,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7f0f4f0,Tom Reznik,Support any annotation named @Nullable.,108,108,,,0,2015-03-14 05:04:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,109,109,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,110,110,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,115,115,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6a15c27,Jake Wharton,More listeners.,111,114,,,0,2013-11-21 16:26:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6a15c27,Jake Wharton,More listeners.,116,117,,,0,2013-11-21 16:26:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",100,101,Jake Wharton,2f8d900,0,2017-01-21 18:46:34,2016-08-23 16:52:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,104,104,Jake Wharton,2f8d900,0,2017-07-02 19:18:54,2016-08-23 16:52:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,124,124,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",70,70,Jay Newstrom,180ca4f,0,2017-02-27 17:02:39,2016-05-11 23:56:06
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,118,120,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6a15c27,Jake Wharton,More listeners.,123,123,,,0,2013-11-21 16:26:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,125,125,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3f84474,Jake Wharton,Add touch listener callback support.,121,122,,,0,2014-05-21 00:20:32,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,128,128,Jake Wharton,ee2043f,0,2017-07-18 06:28:05,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,126,126,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),83,83,Gautam Korlam,b22e9ef,1,2018-04-13 15:23:50,2016-07-11 20:32:41
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,131,131,Jay Newstrom,180ca4f,0,2016-06-19 19:32:42,2016-05-11 23:56:06
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,130,130,Jake Wharton,ee2043f,0,2017-07-18 06:28:05,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,129,129,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,133,133,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,127,127,Gautam Korlam,74532e9,1,2018-09-10 21:26:24,2018-04-16 15:02:12
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,137,148,Jake Wharton,0c9a1d7,0,2016-09-09 04:41:58,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,151,151,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,134,136,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,149,150,Jake Wharton,ee2043f,0,2017-07-18 06:28:05,2017-07-07 14:17:45
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,152,152,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",156,167,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,169,170,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3f675f4,Ivan Gavrilovic,"Add support for incremental annotation processing  This commit adds incremental annotation processing support to Butterknife. More specifically, it makes Butterknife an isolating annotation processor. More information about what this means can be found at https://docs.gradle.org/current/userguide/java_plugin.html#isolating_annotation_processors.",172,177,Ivan Gavrilovic,700890e,0,2019-09-05 03:12:28,2019-08-28 09:33:47
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,e78ee8d,Jake Wharton,Ignore Trees failures and fall back to numerical IDs.  This allows use with the Jack compiler.,153,155,Jake Wharton,91cb862,0,2016-08-19 05:30:07,2016-06-20 06:18:53
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,178,179,Jake Wharton,55dc47e,0,2016-09-09 04:41:58,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6a15c27,Jake Wharton,More listeners.,180,180,,,0,2013-11-21 16:26:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,e78ee8d,Jake Wharton,Ignore Trees failures and fall back to numerical IDs.  This allows use with the Jack compiler.,168,168,Jake Wharton,7c8c369,0,2016-08-19 05:30:07,2016-06-19 19:49:08
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,95f2303,Tom Reznik,Use Java 7 language level.,181,181,,,0,2015-07-29 21:00:47,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,184,184,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,185,185,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6a15c27,Jake Wharton,More listeners.,186,187,,,0,2013-11-21 16:26:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,132,132,Jake Wharton,0c9a1d7,0,2018-04-10 15:14:21,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c89c374,Jake Wharton,Allow SDK-specific behavior based on minimum.  This re-structures tests quite a bit. Compiler unit tests move to the runtime unit tests and the runtime unit tests move to runtime instrumentation tests.,171,171,Jake Wharton,91cb862,0,2016-09-09 04:41:58,2016-06-20 06:18:53
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,182,183,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,84,84,Gautam Korlam,b22e9ef,1,2018-09-10 21:26:24,2016-07-11 20:32:41
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,191,191,Jake Wharton,0c9a1d7,0,2017-07-02 19:18:54,2016-09-09 02:40:56
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,107,107,,,0,2017-07-04 04:41:12,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,199,199,Jake Wharton,e9dfe17,0,2017-07-04 04:41:12,2016-11-08 15:12:12
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,192,197,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,212,212,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,208,208,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,200,207,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,211,211,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,188,190,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,213,213,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,215,215,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,214,214,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,221,223,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,225,226,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20cbc41,Jake Wharton,Do not claim annotations in the processor.,224,224,Jake Wharton,55dc47e,0,2016-12-30 17:17:02,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,227,228,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,229,229,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,209,209,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",241,242,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,230,230,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",244,244,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,243,243,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,245,245,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c24995b,Jake Wharton,Add @BindFloat annotation.,198,198,,,0,2016-08-26 20:52:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",246,250,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,231,240,Jake Wharton,55dc47e,0,2017-07-02 19:18:54,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,251,252,,,0,2015-07-14 17:38:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,255,255,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,254,254,,,0,2015-07-14 17:38:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,253,253,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,261,262,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,256,260,,,0,2015-07-14 17:38:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,263,263,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,265,265,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,264,264,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,271,272,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,210,210,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,268,270,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,267,267,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,273,273,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,276,276,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,275,275,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,266,266,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,274,274,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,277,277,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,278,280,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,283,283,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,281,282,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,284,284,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,286,286,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,285,285,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,288,290,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,287,287,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,295,295,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,294,294,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,291,292,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,296,296,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,293,293,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,297,297,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,29551fc,Jake Wharton,Remove the need for the binder class.,217,220,,,0,2016-08-23 15:56:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,298,300,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,305,305,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,324,324,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,321,322,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,323,323,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,326,326,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,01e4e4e,Jake Wharton,Remove legacy support,216,216,Felipe Lima,4ad9f98,0,2019-01-04 00:15:29,2017-02-27 17:02:39
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,325,325,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,327,327,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,331,332,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,333,333,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,328,330,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,334,334,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,338,340,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,311,320,Jake Wharton,55dc47e,0,2017-07-04 04:41:12,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c24995b,Jake Wharton,Add @BindFloat annotation.,306,310,Jake Wharton,afe6c83,0,2016-08-26 20:52:56,2016-05-07 01:52:00
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c24995b,Jake Wharton,Add @BindFloat annotation.,301,304,Jake Wharton,afe6c83,0,2016-08-26 20:52:56,2016-05-07 01:52:00
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,336,336,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,337,337,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,341,342,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,347,353,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,356,356,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,345,345,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,358,364,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,366,367,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",368,370,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,354,355,Jake Wharton,959e4ba,0,2016-08-19 00:19:35,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,383,385,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,346,346,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,357,357,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,397,397,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,398,398,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,399,399,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,343,344,,,0,2016-08-19 00:19:35,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,335,335,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,400,400,Daniel McCartney,fe631f4,0,2016-09-09 01:55:24,2016-08-19 00:19:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,390,396,Jake Wharton,959e4ba,0,2016-09-09 01:55:24,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,401,401,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,403,409,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,402,402,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,eb0d297,Tho Nguyen,Method's name should reflect what it does  isValidForGeneratedCode -> isInaccessibleViaGeneratedCode,410,410,,,0,2014-12-01 07:13:28,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,411,414,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,365,365,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,416,421,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,422,422,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,441,442,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,448,448,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,423,440,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,453,453,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,443,447,,,0,2014-08-02 06:42:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,449,452,,,0,2014-08-02 06:42:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,454,461,,,0,2014-08-02 06:42:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,371,381,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,463,463,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,464,464,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,465,465,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,466,469,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,470,470,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,471,471,,,0,2014-04-14 08:01:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,472,472,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,473,475,,,0,2014-04-14 08:01:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,478,478,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",382,382,Jake Wharton,55dc47e,0,2019-08-28 09:33:47,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",476,477,Jake Wharton,55dc47e,0,2017-02-27 17:02:39,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,462,462,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,483,484,Jake Wharton,959e4ba,0,2016-08-19 00:19:35,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,488,489,,,0,2013-10-17 15:08:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,490,490,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,491,492,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,486,487,Jake Wharton,959e4ba,0,2016-08-19 00:19:35,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,912fecf,Jake Wharton,Add @OnClick method injection.,493,493,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,479,479,Jake Wharton,959e4ba,0,2016-08-19 00:19:35,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,494,495,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,e78ee8d,Jake Wharton,Ignore Trees failures and fall back to numerical IDs.  This allows use with the Jack compiler.,480,481,Jake Wharton,959e4ba,0,2016-08-19 05:30:07,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,498,498,Gautam Korlam,b22e9ef,0,2016-09-09 01:55:24,2016-07-11 20:32:41
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,1aaf939,Sarvesh Athawale,Updated comment  Updated comment,415,415,,,0,2018-03-29 16:18:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,496,496,Gautam Korlam,b22e9ef,0,2016-09-09 01:55:24,2016-07-11 20:32:41
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",386,389,,,0,2019-08-28 09:33:47,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3dc7e51,Jake Wharton,There can only be one field binding so model it as such.,501,501,,,0,2016-05-08 04:00:26,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,502,502,Gautam Korlam,b22e9ef,0,2016-11-08 15:12:12,2016-07-11 20:32:41
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d3592e1,Tom Reznik,Include field name in duplicated view ID error message,505,505,,,1,2014-10-27 22:57:03,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3dc7e51,Jake Wharton,There can only be one field binding so model it as such.,503,504,,,0,2016-05-08 04:00:26,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,506,506,,,0,2015-03-15 00:06:02,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",482,482,Jake Wharton,959e4ba,0,2017-02-27 17:02:39,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,508,509,,,1,2014-10-05 08:27:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",512,512,,,0,2015-10-12 17:46:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,912fecf,Jake Wharton,Add @OnClick method injection.,513,513,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,511,511,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",485,485,Jake Wharton,959e4ba,0,2017-02-27 17:02:39,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,912fecf,Jake Wharton,Add @OnClick method injection.,515,515,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,e9dfe17,Jake Wharton,Move more to immutable architecture.,500,500,,,0,2016-11-08 15:12:12,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,516,516,,,0,2015-03-15 00:06:02,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,518,518,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,517,517,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,912fecf,Jake Wharton,Add @OnClick method injection.,519,519,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,521,521,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,524,527,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,522,523,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,507,507,Jake Wharton,959e4ba,0,2016-09-09 01:55:24,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,528,529,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,531,531,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,2741cd8,Jake Wharton,Work around the Eclipse compiler not fully erasing generic types.,530,530,,,0,2014-05-21 00:12:51,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",510,510,,,0,2017-02-27 17:02:39,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,532,532,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,2741cd8,Jake Wharton,Work around the Eclipse compiler not fully erasing generic types.,537,537,,,0,2014-05-21 00:12:51,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,533,535,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0896401,Jake Wharton,"Combine BindView and BindViews into a single annotation, Bind.",541,541,,,0,2015-06-28 02:00:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,536,536,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,520,520,Jake Wharton,959e4ba,0,2016-09-09 01:55:24,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,538,540,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0896401,Jake Wharton,"Combine BindView and BindViews into a single annotation, Bind.",543,543,,,0,2015-06-28 02:00:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,542,542,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,544,547,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,548,548,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,550,552,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,549,549,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,553,553,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,558,559,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,554,554,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,555,557,,,0,2014-04-14 08:01:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,560,560,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,514,514,Jake Wharton,959e4ba,0,2018-04-10 15:14:21,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,572,573,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,575,575,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,574,574,,,0,2015-03-15 00:06:02,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,576,576,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,579,579,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,577,577,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,499,499,Jake Wharton,959e4ba,0,2018-04-10 15:14:21,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,578,578,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,497,497,Jake Wharton,959e4ba,0,2018-04-10 15:14:21,2016-04-23 07:46:57
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,564,571,Jay Newstrom,180ca4f,0,2016-08-19 00:19:35,2016-05-11 23:56:06
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,581,582,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,580,580,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,585,585,,,0,2016-04-23 07:46:57,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,593,594,,,1,2014-10-05 08:27:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,583,584,,,1,2014-10-05 08:27:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,588,592,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7d31098,Jake Wharton,@BindViews,586,586,,,0,2016-04-23 18:32:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,587,587,,,0,2016-04-23 07:46:57,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,598,598,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,597,597,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",596,596,,,0,2015-10-12 17:46:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,e78ee8d,Jake Wharton,Ignore Trees failures and fall back to numerical IDs.  This allows use with the Jack compiler.,562,563,,,0,2016-08-19 05:30:07,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,600,600,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,561,561,,,0,2016-08-19 00:19:35,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,601,601,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,602,602,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,605,628,Felipe Lima,4ad9f98,0,2017-07-02 19:18:54,2017-02-27 17:02:39
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,631,631,Jake Wharton,2390311,0,2017-07-02 19:18:54,2017-01-21 18:46:34
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,603,604,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,632,632,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,629,630,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,637,638,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,646,650,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,653,659,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,645,645,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,639,644,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,5184ea1,Marcel Schnelle,Added support for binding animation resources,633,636,Jake Wharton,2390311,0,2017-07-02 19:18:54,2017-01-21 18:46:34
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,651,652,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",663,663,Jake Wharton,2390311,0,2017-02-27 17:02:39,2017-01-21 18:46:34
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,660,660,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,666,666,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,667,668,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,664,664,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,665,665,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,669,670,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,671,680,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,682,686,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,681,681,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,689,695,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,687,688,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,696,696,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,595,595,Felipe Lima,4ad9f98,1,2018-09-10 21:26:24,2017-02-27 17:02:39
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,599,599,Felipe Lima,4ad9f98,1,2018-09-10 21:26:24,2017-02-27 17:02:39
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,706,706,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,707,707,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,662,662,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,710,711,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,708,709,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,712,721,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,722,722,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,723,727,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,698,698,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,728,729,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,738,738,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,737,737,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,730,736,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,740,740,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,739,739,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,741,741,Jake Wharton,2f8d900,0,2016-09-09 05:14:19,2016-08-23 16:52:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,742,742,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,744,745,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,743,743,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,746,747,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,661,661,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,748,769,,,0,2015-07-14 17:38:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,771,771,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,770,770,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,773,773,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,774,774,,,0,2015-07-14 17:38:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d5eab6f,Tom Reznik,Support `@BindBitmap` annotation,776,777,,,0,2015-07-14 17:38:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,775,775,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,778,779,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,780,785,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,787,791,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),699,699,,,0,2018-06-14 19:57:14,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,792,793,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,786,786,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,794,800,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,801,801,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,45dd9ed,Luka Cindro,Add tint support for @BindDrawable.,802,802,,,0,2015-09-30 01:30:53,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,805,805,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,803,804,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,807,807,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,808,808,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,697,697,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c24995b,Jake Wharton,Add @BindFloat annotation.,813,834,Jake Wharton,2f8d900,0,2016-08-26 20:52:56,2016-08-23 16:52:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,809,810,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,772,772,,,0,2016-09-09 05:14:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,811,812,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,836,836,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,01e4e4e,Jake Wharton,Remove legacy support,806,806,Sarvesh Athawale,1aaf939,0,2019-01-04 00:15:29,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,838,838,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,843,859,Marcel Schnelle,5184ea1,0,2017-07-04 04:41:12,2017-07-02 19:18:54
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,835,835,Jake Wharton,fb7d92b,0,2018-04-10 15:14:21,2017-07-04 04:41:12
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ee2043f,Jake Wharton,Add style support to Typeface binding.,860,871,Jake Wharton,fb7d92b,0,2017-07-07 14:17:45,2017-07-04 04:41:12
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,872,875,Jake Wharton,2390311,0,2017-07-04 04:41:12,2017-01-21 18:46:34
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,876,876,Jake Wharton,2390311,0,2017-07-04 04:41:12,2017-01-21 18:46:34
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb7d92b,Jake Wharton,Add support for Typeface binding.,879,882,Jake Wharton,2390311,0,2017-07-04 04:41:12,2017-01-21 18:46:34
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",837,837,Jake Wharton,c24995b,0,2017-02-27 17:02:39,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,885,889,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,890,890,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,891,895,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c24995b,Jake Wharton,Add @BindFloat annotation.,839,842,,,0,2016-08-26 20:52:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,896,897,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f0b7351,Warren Smith,Add AndroidX support. (#1289),702,705,,,0,2018-06-14 19:57:14,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,898,904,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,01e4e4e,Jake Wharton,Remove legacy support,878,878,Sarvesh Athawale,1aaf939,0,2019-01-04 00:15:29,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,905,905,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,906,906,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,907,907,Jake Wharton,55dc47e,0,2016-09-09 01:55:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,910,910,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,911,911,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",908,908,Jake Wharton,55dc47e,0,2017-02-27 17:02:39,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,912,913,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,916,919,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,921,921,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,920,920,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,877,877,Jake Wharton,55dc47e,0,2018-04-10 15:14:21,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,883,884,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,928,929,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,930,936,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,923,927,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,922,922,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,937,937,,,0,2015-06-27 23:50:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,938,938,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,941,941,Sarvesh Athawale,1aaf939,0,2018-04-10 15:14:21,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,909,909,Jake Wharton,55dc47e,0,2018-04-10 15:14:21,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,942,942,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,943,943,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d86e368,Tom Reznik,Support binding string array resources.,948,950,,,0,2015-07-06 20:04:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,afcac3e,Jake Wharton,Support binding resource types to fields.,944,945,,,0,2015-03-15 07:44:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",951,951,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",954,956,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d86e368,Tom Reznik,Support binding string array resources.,957,961,,,0,2015-07-06 20:04:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,914,915,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,946,947,Gautam Korlam,20aad6c,0,2016-09-09 01:55:24,2016-06-19 19:32:42
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d86e368,Tom Reznik,Support binding string array resources.,964,970,,,0,2015-07-06 20:04:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",962,963,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",971,971,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d86e368,Tom Reznik,Support binding string array resources.,975,975,,,0,2015-07-06 20:04:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,976,976,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d86e368,Tom Reznik,Support binding string array resources.,977,978,,,0,2015-07-06 20:04:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",979,979,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,980,980,Warren Smith,f0b7351,1,2018-09-10 21:26:24,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,952,953,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,01e4e4e,Jake Wharton,Remove legacy support,700,701,,,0,2019-01-04 00:15:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",981,982,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,983,983,Warren Smith,f0b7351,1,2018-09-10 21:26:24,2018-06-14 19:57:14
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,973,973,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",987,990,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,991,991,,,0,2015-10-09 22:39:33,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,939,939,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",984,985,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0fe8995,Jake Wharton,Make collection model immutable and carry ID information.,940,940,,,0,2016-09-09 05:14:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",993,993,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",995,995,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,4627780,Tom Reznik,"Support binding array resources (String, int, text and TypedArray).",997,1001,,,0,2015-07-07 23:13:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,1002,1002,,,1,2014-10-05 08:27:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,986,986,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,95f2303,Tom Reznik,Use Java 7 language level.,1004,1004,,,0,2015-07-29 21:00:47,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,992,992,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,1005,1014,,,1,2014-10-05 08:27:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,2741cd8,Jake Wharton,Work around the Eclipse compiler not fully erasing generic types.,1015,1024,,,0,2014-05-21 00:12:51,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1025,1025,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1028,1028,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,3474f0f,Jake Wharton,Use SuperficialValidator to avoid broken elements.,1029,1029,,,0,2015-10-01 04:38:48,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1030,1030,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,994,994,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1032,1035,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,1036,1036,,,0,2015-03-15 00:06:02,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,1003,1003,Jake Wharton,55dc47e,1,2018-09-10 21:26:24,2016-09-08 03:33:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1037,1041,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,996,996,,,0,2016-09-08 03:33:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,1042,1042,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,972,972,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,1026,1027,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,1044,1046,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,1051,1053,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,912fecf,Jake Wharton,Add @OnClick method injection.,1050,1050,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,1049,1049,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,1047,1048,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,974,974,Jake Wharton,c24995b,1,2018-09-10 21:26:24,2016-08-26 20:52:56
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,1054,1054,,,0,2015-03-15 00:06:02,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,9306a2d,Jake Wharton,Class.getDeclaredMethod will never return null.,1057,1057,,,0,2014-04-20 10:07:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",1056,1056,,,0,2013-11-21 13:58:16,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,1055,1055,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,1058,1058,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1060,1060,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,9306a2d,Jake Wharton,Class.getDeclaredMethod will never return null.,1059,1059,,,0,2014-04-20 10:07:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,1031,1031,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",1061,1063,,,0,2013-11-21 13:58:16,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,1065,1065,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",1066,1066,,,0,2013-11-21 13:58:16,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",1064,1064,,,0,2015-10-12 17:46:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,eb0d297,Tho Nguyen,Method's name should reflect what it does  isValidForGeneratedCode -> isInaccessibleViaGeneratedCode,1067,1067,,,0,2014-12-01 07:13:28,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,48296d0,Jake Wharton,Check for duplicate IDs before adding methods.,1076,1077,,,0,2013-11-18 21:24:36,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",1078,1079,,,0,2014-04-10 06:02:20,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,1068,1068,,,0,2014-08-02 06:42:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,cc85a63,Jake Wharton,Delegate annotation parsing to helper methods.  Both InjectView and OnClick are now parsed in individual methods for the time being. This allows wrapping each in a try/catch block to tie any exceptions to their respecitive element.,1069,1069,,,0,2013-08-06 22:05:45,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,1080,1082,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,1070,1075,,,1,2014-10-05 08:27:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1083,1084,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,1085,1085,,,0,2014-10-27 21:43:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,1087,1088,,,0,2014-10-27 21:43:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",1089,1089,,,0,2015-10-12 17:46:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,1090,1092,,,0,2014-10-27 21:43:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,1093,1101,,,0,2014-10-27 21:43:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,1102,1115,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d8d5169,Jake Wharton,Simplify listener method declaration for single-method interfaces.,1116,1124,,,0,2014-04-19 08:49:07,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1125,1126,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1129,1129,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1128,1128,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1132,1132,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",1127,1127,,,0,2013-11-21 13:58:16,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1131,1131,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1130,1130,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,1137,1141,,,0,2014-04-14 08:01:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,1133,1136,,,0,2013-11-21 10:32:23,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,1147,1151,,,0,2013-11-21 10:32:23,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1146,1146,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,1145,1145,,,0,2013-11-21 10:32:23,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",1155,1155,,,0,2013-11-21 13:58:16,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,1043,1043,,,0,2016-09-09 01:55:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,1152,1154,,,0,2013-11-19 00:02:56,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1158,1158,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1156,1156,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7c8c369,Jake Wharton,Emit proper references to R types.,1086,1086,,,0,2016-06-19 19:49:08,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1160,1162,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1159,1159,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,45b1eb9,Jake Wharton,"Comments, code cleanup, extra safety checks.",1157,1157,,,0,2013-11-21 13:58:16,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,1163,1166,,,0,2014-04-14 08:01:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1167,1167,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,13fa8e0,Jake Wharton,"Be less clever in the annotation processor.  Rather than do magic things with types, just be dumb and specify all the required information to generate the inject adapters directly. This will also facilitate more fancy things in the future like supporting listeners with multiple methods.",1168,1168,,,0,2014-04-10 06:02:20,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,1175,1175,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1169,1171,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1207,1207,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,48798f6,Jake Wharton,Do not reference runtime classes in compiler. Skip string types.,1176,1176,,,0,2015-08-11 23:10:29,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1177,1206,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1208,1208,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,1209,1209,,,0,2014-04-19 05:25:44,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1210,1219,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,1142,1144,Sarvesh Athawale,1aaf939,0,2019-02-05 17:05:58,2018-03-29 16:18:11
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b0389f7,Tom Reznik,Forbid multiple listeners with return value for the same view,1227,1227,,,0,2014-10-13 15:57:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,1222,1222,Daniel McCartney,fe631f4,0,2016-09-09 01:55:24,2016-08-19 00:19:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",1174,1174,Jake Wharton,7529a20,1,2016-11-02 15:19:47,2016-05-06 23:51:17
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,1232,1232,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b0389f7,Tom Reznik,Forbid multiple listeners with return value for the same view,1229,1231,,,0,2014-10-13 15:57:27,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,1233,1233,,,0,2015-03-15 00:06:02,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,1234,1234,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,1235,1236,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,66e050d,Serj Lotutovici,Split compiler and runtime library into separate artifacts.,1238,1239,,,0,2015-08-02 00:51:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",1172,1172,,,1,2016-11-02 15:19:47,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,1237,1237,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,1240,1241,,,0,2015-01-20 10:09:08,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7bbe15f,Martin Nonnenmacher,Replace Types.isSubtype() with own implementation\n\nTypes.isSubtype() had an issue with the incremental compiler from eclipse. The replacement method just compares classes by name and is not affected by this issue.,1244,1244,,,1,2013-08-14 09:10:14,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,1245,1245,,,0,2013-11-19 21:42:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",1242,1242,Gautam Korlam,a464bba,0,2017-01-21 18:46:34,2016-06-22 18:16:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1247,1247,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,0896401,Jake Wharton,"Combine BindView and BindViews into a single annotation, Bind.",1246,1246,,,0,2015-06-28 02:00:11,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",1243,1243,Gautam Korlam,a464bba,1,2016-11-02 15:19:47,2016-06-22 18:16:35
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,1248,1249,,,0,2013-11-19 21:42:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1250,1263,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1271,1271,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,1272,1274,,,0,2013-11-19 21:42:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,1264,1270,,,0,2013-11-19 21:42:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1275,1275,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,1276,1276,,,0,2013-11-19 21:42:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7bbe15f,Martin Nonnenmacher,Replace Types.isSubtype() with own implementation\n\nTypes.isSubtype() had an issue with the incremental compiler from eclipse. The replacement method just compares classes by name and is not affected by this issue.,1277,1277,,,1,2013-08-14 09:10:14,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,1279,1279,,,0,2013-11-19 21:42:17,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7bbe15f,Martin Nonnenmacher,Replace Types.isSubtype() with own implementation\n\nTypes.isSubtype() had an issue with the incremental compiler from eclipse. The replacement method just compares classes by name and is not affected by this issue.,1278,1278,,,1,2013-08-14 09:10:14,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,1223,1224,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7bbe15f,Martin Nonnenmacher,Replace Types.isSubtype() with own implementation\n\nTypes.isSubtype() had an issue with the incremental compiler from eclipse. The replacement method just compares classes by name and is not affected by this issue.,1280,1281,,,1,2013-08-14 09:10:14,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,1173,1173,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,912fecf,Jake Wharton,Add @OnClick method injection.,1292,1292,,,0,2013-07-10 06:11:01,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,1286,1291,Jake Wharton,91cb862,0,2016-09-09 01:55:24,2016-06-20 06:18:53
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",1283,1285,Gautam Korlam,c02ad88,1,2016-11-02 15:19:47,2016-06-22 17:40:58
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,1294,1295,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",1296,1298,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,63d79fd,Jake Wharton,Make Binding immutable with a builder.,1293,1293,Jake Wharton,91cb862,0,2016-09-09 01:55:24,2016-06-20 06:18:53
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",1282,1282,Gautam Korlam,c02ad88,0,2017-01-21 18:46:34,2016-06-22 17:40:58
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,1299,1299,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,1303,1303,,,0,2015-11-24 17:04:10,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",1300,1302,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,700890e,Ivan Gavrilovic,"Add support for finding parent bindings in classpath  This commit expands search for parent bindings by examining all superclasses of types processed in the current round. Bindings found in the classpath will not be generated, but information they contain will be used when generating bindings for the current round of processing.  Test: ClasspathParentBindTest",1308,1377,Jake Wharton,717159f,0,2019-08-28 09:33:47,2019-02-05 17:05:58
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,1304,1307,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,1382,1382,,,0,2013-11-21 01:57:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,1378,1381,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,1391,1393,,,0,2014-04-14 07:02:54,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,1396,1397,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,1225,1226,,,1,2018-09-10 21:26:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,1383,1390,,,0,2016-08-19 00:19:35,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,1394,1395,,,0,2016-08-19 00:19:35,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,1398,1400,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,1402,1402,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1401,1401,,,1,2018-04-13 15:23:50,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,74532e9,Gautam Korlam,Make R symbol scanner defensive for integer value lookups,1403,1405,,,0,2018-04-16 15:02:12,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,1228,1228,,,1,2018-09-10 21:26:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,1220,1221,,,0,2019-02-05 17:05:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,1413,1414,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1418,1418,,,1,2018-04-13 15:23:50,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb14aab,Gautam Korlam,Simplify resourceId lookup logic a bit,1417,1417,,,0,2018-04-13 16:26:22,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,1406,1411,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1415,1416,,,1,2018-04-13 15:23:50,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7f0f4f0,Tom Reznik,Support any annotation named @Nullable.,1427,1436,,,0,2015-03-14 05:04:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",1437,1437,,,0,2015-10-12 17:46:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,74532e9,Gautam Korlam,Make R symbol scanner defensive for integer value lookups,1412,1412,,,0,2018-04-16 15:02:12,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",1440,1443,,,0,2015-10-12 17:46:19,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,7f0f4f0,Tom Reznik,Support any annotation named @Nullable.,1438,1439,,,0,2015-03-14 05:04:59,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1421,1421,,,1,2018-04-13 15:23:50,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,1423,1426,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,1444,1444,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb14aab,Gautam Korlam,Simplify resourceId lookup logic a bit,1422,1422,,,0,2018-04-13 16:26:22,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,1450,1450,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,1446,1449,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,1451,1453,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,1458,1469,Ivan Gavrilovic,3f675f4,0,2019-11-20 03:13:41,2019-09-05 03:12:28
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1419,1419,,,1,2018-04-13 15:23:50,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,fb14aab,Gautam Korlam,Simplify resourceId lookup logic a bit,1420,1420,,,0,2018-04-13 16:26:22,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,1454,1454,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,1472,1480,Ivan Gavrilovic,3f675f4,0,2019-11-20 03:13:41,2019-09-05 03:12:28
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,1470,1471,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,1457,1457,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,1486,1486,Ivan Gavrilovic,3f675f4,0,2019-11-20 03:13:41,2019-09-05 03:12:28
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c02ad88,Gautam Korlam,Remove RClass requirement for nicer generated code/libraries,1482,1483,,,0,2016-06-22 17:40:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,1488,1488,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,8c86529,Дмитрий Конуров,Properly handle R references as static imports,1489,1489,Ivan Gavrilovic,3f675f4,0,2019-11-20 03:13:41,2019-09-05 03:12:28
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,b4cfd88,Gautam Korlam,Make R class scanner faster and memory efficient,1455,1455,,,0,2018-04-10 15:14:21,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1456,1456,,,1,2018-04-13 15:23:50,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,1490,1490,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,1445,1445,,,1,2018-09-10 21:26:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,20aad6c,Gautam Korlam,Support Android Library Projects,1502,1502,,,0,2016-06-19 19:32:42,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,657722b,Jake Wharton,Rewrite processor to use an object model to represent injections.,1503,1503,,,0,2013-06-18 16:11:58,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1481,1481,,,1,2018-04-13 15:23:50,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,74532e9,Gautam Korlam,Make R symbol scanner defensive for integer value lookups,1487,1487,,,0,2018-04-16 15:02:12,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,1485,1485,,,1,2018-09-10 21:26:24,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,74532e9,Gautam Korlam,Make R symbol scanner defensive for integer value lookups,1484,1484,,,0,2018-04-16 15:02:12,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,74532e9,Gautam Korlam,Make R symbol scanner defensive for integer value lookups,1493,1496,,,0,2018-04-16 15:02:12,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1491,1492,,,1,2018-04-13 15:23:50,
butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),1497,1501,,,1,2018-04-13 15:23:50,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,2,2,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,4,4,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,10,12,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,9,9,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,20,20,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,01e4e4e,Jake Wharton,Remove legacy support,26,27,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,21,22,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,29,29,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6ff7c28,Christian Becker,"Add SuppressLint(""ClickableViewAccessibility"") to OnTouchListener's",23,23,,,0,2017-01-09 15:31:03,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,34,34,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,24,25,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,28,28,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,32,33,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,31,31,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,30,30,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,35,35,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,37,37,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,41,49,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6ff7c28,Christian Becker,"Add SuppressLint(""ClickableViewAccessibility"") to OnTouchListener's",36,36,,,0,2017-01-09 15:31:03,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,38,39,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,51,51,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,59,59,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",56,56,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,54,55,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,62,62,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,40,40,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",57,58,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,64,64,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,66,66,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,52,53,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,717159f,Jake Wharton,Add support for default return values on non-void listeners,68,125,Jake Wharton,01e4e4e,0,2019-02-05 17:05:58,2019-01-04 00:15:29
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",60,60,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",50,50,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,b0389f7,Tom Reznik,Forbid multiple listeners with return value for the same view,67,67,,,0,2014-10-13 15:57:27,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,b0389f7,Tom Reznik,Forbid multiple listeners with return value for the same view,134,134,,,0,2014-10-13 15:57:27,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",126,127,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,63,63,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",128,128,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,b0389f7,Tom Reznik,Forbid multiple listeners with return value for the same view,137,139,,,0,2014-10-13 15:57:27,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",135,135,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,3f84474,Jake Wharton,Add touch listener callback support.,142,142,,,0,2014-05-21 00:20:32,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,136,136,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,b0389f7,Tom Reznik,Forbid multiple listeners with return value for the same view,141,141,,,0,2014-10-13 15:57:27,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",130,133,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,61,61,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,65,65,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,129,129,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnTouchTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,140,140,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,52,54,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,1,48,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java,c17c16c,Jake Wharton,Add error-prone and NullAway,49,51,Jake Wharton,9b59a14,1,2018-09-10 21:26:24,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/TestGeneratingProcessor.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,55,59,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/TestStubs.java,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,25,25,,,0,2018-09-10 21:04:06,
butterknife-runtime/src/test/java/butterknife/TestStubs.java,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,1,6,,,0,2018-09-10 21:04:06,
butterknife-runtime/src/test/java/butterknife/TestStubs.java,72405e7,Jake Wharton,Support AndroidX references in listener declarations  Also backfill an AndroidX test for other codegen,7,24,,,0,2018-09-10 21:04:06,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,4,4,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,2,2,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,9,9,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,10,12,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,20,20,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,01e4e4e,Jake Wharton,Remove legacy support,27,28,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",22,26,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,19,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,21,21,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",29,29,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",31,32,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",33,33,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,16,16,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,36,37,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,38,38,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,43,43,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,b17a6c1,Christian Becker,Remove redundant 'this' keyword,44,44,,,0,2016-06-21 12:35:21,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,42,42,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",57,57,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,45,56,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,40,41,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,30,30,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,34,35,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,58,58,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,39,39,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,69,69,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,60,60,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",67,68,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",59,59,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,72,72,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,74,74,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",66,66,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,61,62,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,76,76,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",70,70,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,63,65,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,71,71,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,01e4e4e,Jake Wharton,Remove legacy support,93,94,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,75,75,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,73,73,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",81,81,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,82,82,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",77,80,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",95,146,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,01e4e4e,Jake Wharton,Remove legacy support,159,160,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",83,88,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",147,147,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",155,158,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",149,154,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",89,92,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,3ddd48b,Jake Wharton,Litmus code-gen tests for the other annotations.,225,225,,,0,2014-04-19 06:57:40,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",161,212,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,148,148,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",215,224,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,6913b42,Niko Yuwono,"Fix listener method type checking (#790)  - Add checking to listener method parameter to allow using subtype of original method's type only when the parameter is subtype of view. - Add testcase in OnTextChangedTest.java",213,213,,,1,2016-11-02 15:19:47,
butterknife-runtime/src/test/java/butterknife/OnTextChangedTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,214,214,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/UtilsTest.java,8b11d8a,Jake Wharton,Run Utils tests on host where possible,1,19,Jake Wharton,c16a510,0,2018-09-07 04:49:03,2018-09-06 22:56:28
butterknife-runtime/src/test/java/butterknife/UtilsTest.java,8b11d8a,Jake Wharton,Run Utils tests on host where possible,41,50,Jake Wharton,c16a510,0,2018-09-07 04:49:03,2018-09-06 22:56:28
butterknife-runtime/src/test/java/butterknife/UtilsTest.java,8b11d8a,Jake Wharton,Run Utils tests on host where possible,21,22,Jake Wharton,c16a510,0,2018-09-07 04:49:03,2018-09-06 22:56:28
butterknife-runtime/src/test/java/butterknife/UtilsTest.java,8b11d8a,Jake Wharton,Run Utils tests on host where possible,24,32,Jake Wharton,c16a510,0,2018-09-07 04:49:03,2018-09-06 22:56:28
butterknife-runtime/src/test/java/butterknife/UtilsTest.java,3f4dd3a,Jake Wharton,Use copyOfRange helper  Instead of creating and copying a subset of the array manually. This also expands the tests to ensure the original instance is returned unmodifed when no nulls are present.,23,23,Jake Wharton,8b11d8a,0,2019-03-22 19:44:12,2018-09-07 04:49:03
butterknife-runtime/src/test/java/butterknife/UtilsTest.java,3f4dd3a,Jake Wharton,Use copyOfRange helper  Instead of creating and copying a subset of the array manually. This also expands the tests to ensure the original instance is returned unmodifed when no nulls are present.,20,20,Jake Wharton,8b11d8a,0,2019-03-22 19:44:12,2018-09-07 04:49:03
butterknife-runtime/src/test/java/butterknife/UtilsTest.java,3f4dd3a,Jake Wharton,Use copyOfRange helper  Instead of creating and copying a subset of the array manually. This also expands the tests to ensure the original instance is returned unmodifed when no nulls are present.,33,40,Jake Wharton,8b11d8a,0,2019-03-22 19:44:12,2018-09-07 04:49:03
checkstyle.xml,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),3,4,Jake Wharton,2390311,0,2017-05-11 19:47:30,2017-01-21 18:46:34
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,1,2,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,20,29,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,5,18,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,2079e75,Andrew Kochura,"Fix RegexpSingleline in checkstyle rules  For example: word 'foreground' don't pass checkstyle",19,19,Jake Wharton,0c9a1d7,1,2016-09-29 10:00:31,2016-09-09 02:40:56
checkstyle.xml,244a9e7,Jake Wharton,Support listeners with multiple methods.,72,72,Jake Wharton,4a0d852,0,2014-04-19 05:25:44,2013-11-26 06:56:39
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,31,71,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",30,30,Emil Sjölander,8fc5134,0,2015-09-26 03:41:19,2015-01-20 10:09:08
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,74,80,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,9c0e6a9,Alex Krupa,Add @OnTextChanged support to reflect backend,100,102,Jake Wharton,bd4aa5d,0,2019-02-04 23:32:46,2018-09-07 16:11:42
checkstyle.xml,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",73,73,Andrew Kochura,2079e75,0,2017-01-21 18:46:34,2016-09-29 10:00:31
checkstyle.xml,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,113,113,Jake Wharton,7653434,0,2015-01-20 10:09:08,2013-11-26 06:52:56
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,104,112,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,bd4aa5d,Jake Wharton,Implement crazy parameter matching in reflection  Also validate return types.,81,83,Jared Burrows,f4949e3,0,2018-09-07 16:11:42,2017-05-11 19:47:30
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,84,99,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,114,114,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,124,143,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,4a0d852,Jake Wharton,CRLF --> LF,116,123,Jake Wharton,7653434,0,2013-11-26 06:56:39,2013-11-26 06:52:56
checkstyle.xml,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",115,115,Jake Wharton,7653434,0,2015-09-26 03:41:19,2013-11-26 06:52:56
checkstyle.xml,e78ee8d,Jake Wharton,Ignore Trees failures and fall back to numerical IDs.  This allows use with the Jack compiler.,103,103,Jake Wharton,7653434,0,2016-08-19 05:30:07,2013-11-26 06:52:56
deploy_website.sh,11af074,Jake Wharton,Add website.,16,28,,,0,2013-03-25 20:13:05,
deploy_website.sh,2420921,Jake Wharton,Deploy Javadoc with the website.,15,15,Jake Wharton,11af074,0,2014-01-04 11:25:14,2013-03-25 20:13:05
deploy_website.sh,11af074,Jake Wharton,Add website.,9,14,,,0,2013-03-25 20:13:05,
deploy_website.sh,11af074,Jake Wharton,Add website.,1,4,,,0,2013-03-25 20:13:05,
deploy_website.sh,11af074,Jake Wharton,Add website.,35,45,,,0,2013-03-25 20:13:05,
deploy_website.sh,2420921,Jake Wharton,Deploy Javadoc with the website.,29,34,Jake Wharton,11af074,0,2014-01-04 11:25:14,2013-03-25 20:13:05
deploy_website.sh,2420921,Jake Wharton,Deploy Javadoc with the website.,6,8,Jake Wharton,11af074,0,2014-01-04 11:25:14,2013-03-25 20:13:05
deploy_website.sh,d9d30f0,Jake Wharton,Use https deployment,5,5,Jake Wharton,2420921,0,2020-05-14 02:26:53,2014-01-04 11:25:14
gradle/gradle-mvn-push.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",85,91,,,0,2015-09-26 03:41:19,
gradle/gradle-mvn-push.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",79,84,,,0,2015-09-26 03:41:19,
gradle/gradle-mvn-push.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,44,,,0,2015-09-26 03:41:19,
gradle/gradle-mvn-push.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",105,119,,,0,2015-09-26 03:41:19,
gradle/gradle-mvn-push.gradle,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",92,104,Michael Evans,05eae6d,0,2019-12-18 16:23:01,2015-09-26 03:41:19
gradle/gradle-mvn-push.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",121,140,,,0,2015-09-26 03:41:19,
gradle/gradle-mvn-push.gradle,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",120,120,Michael Evans,05eae6d,0,2019-12-18 16:23:01,2015-09-26 03:41:19
gradle/gradle-mvn-push.gradle,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",45,78,Michael Evans,05eae6d,0,2019-12-18 16:23:01,2015-09-26 03:41:19
gradle/gradle-mvn-push.gradle,bb27b5a,Jake Wharton,"Use fake ID values for R2  These values are meaningless. We only need them to be unique which is trivially achievable with a counter.  This change is required, however, because AGP 3.6 will stop generating ID values in library projects. All values are set to 0 which obviously will prevent Butter Knife from correctly performing the reverse mapping from R2 value back to name.",141,141,Michael Evans,05eae6d,0,2019-12-18 16:23:01,2015-09-26 03:41:19
gradle/gradle-mvn-push.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",142,174,,,0,2015-09-26 03:41:19,
gradle/wrapper/gradle-wrapper.jar,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",207,208,,,0,2015-09-26 03:41:19,
gradle/wrapper/gradle-wrapper.jar,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),203,204,,,0,2017-05-11 19:47:30,
gradle/wrapper/gradle-wrapper.jar,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),48,48,,,0,2017-05-11 19:47:30,
gradle/wrapper/gradle-wrapper.jar,41e0772,Jake Wharton,Dependency updates  * AGP 3.2rc2 with aapt2 disabled explicitly * Kotlin 1.2.61 and JDK 8 artifact instead of JRE 8 * Support libs 27.1.1 * Truth 0.42,49,202,,,0,2018-09-06 14:15:22,
gradle/wrapper/gradle-wrapper.jar,41e0772,Jake Wharton,Dependency updates  * AGP 3.2rc2 with aapt2 disabled explicitly * Kotlin 1.2.61 and JDK 8 artifact instead of JRE 8 * Support libs 27.1.1 * Truth 0.42,3,47,,,0,2018-09-06 14:15:22,
gradle/wrapper/gradle-wrapper.jar,41e0772,Jake Wharton,Dependency updates  * AGP 3.2rc2 with aapt2 disabled explicitly * Kotlin 1.2.61 and JDK 8 artifact instead of JRE 8 * Support libs 27.1.1 * Truth 0.42,205,206,,,0,2018-09-06 14:15:22,
gradle/wrapper/gradle-wrapper.jar,0fda475,Jake Wharton,Gradle 4.10.3,209,213,,,0,2019-02-05 18:30:40,
gradle/wrapper/gradle-wrapper.jar,0fda475,Jake Wharton,Gradle 4.10.3,1,2,,,0,2019-02-05 18:30:40,
gradle/wrapper/gradle-wrapper.properties,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,2,,,0,2015-09-26 03:41:19,
gradle/wrapper/gradle-wrapper.properties,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",4,5,,,0,2015-09-26 03:41:19,
gradle/wrapper/gradle-wrapper.properties,0fda475,Jake Wharton,Gradle 4.10.3,3,3,Jake Wharton,41e0772,0,2019-02-05 18:30:40,2018-09-06 14:15:22
gradle.properties,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,1,,,0,2015-09-26 03:41:19,
gradle.properties,576f6a9,John Rodriguez,Increase Gradle daemon heap to run dex in process,17,17,Jake Wharton,a07e1db,0,2017-07-27 08:15:02,2017-07-07 15:21:46
gradle.properties,5f040ba,Jake Wharton,Prepare version 8.8.0.  (cherry picked from commit 27e5a052eaa9601cb0c7f87675c39dfd30ca9fd3),18,18,Jake Wharton,26c93ba,0,2017-08-04 18:22:22,2017-08-04 05:02:47
gradle.properties,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",3,16,,,0,2015-09-26 03:41:19,
gradle.properties,41e0772,Jake Wharton,Dependency updates  * AGP 3.2rc2 with aapt2 disabled explicitly * Kotlin 1.2.61 and JDK 8 artifact instead of JRE 8 * Support libs 27.1.1 * Truth 0.42,19,21,Jake Wharton,5f040ba,0,2018-09-06 14:15:22,2017-08-04 18:22:22
gradle.properties,6dd3871,Jake Wharton,Prepare next development version,2,2,Jake Wharton,888791b,0,2020-08-12 17:58:46,2020-08-12 17:52:43
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",26,29,,,0,2015-09-26 03:41:19,
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",2,8,,,0,2015-09-26 03:41:19,
gradlew,ece57bd,Jared Burrows,Update gradle,9,25,Michael Evans,05eae6d,0,2016-05-21 04:27:10,2015-09-26 03:41:19
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",33,35,,,0,2015-09-26 03:41:19,
gradlew,d5bcd4a,John Rodriguez,Bump dependencies  * Updated gradle plugin to latest javaparser-core api * Removed opengl-api; obsolete as of Robolectric 3.3.2 * Update Gradle & wrapper to 4.0 * Other minor version bumps,36,36,Jared Burrows,f4949e3,0,2017-06-24 09:30:31,2017-05-11 19:47:30
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",37,39,,,0,2015-09-26 03:41:19,
gradlew,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),1,1,Jared Burrows,7c39e47,0,2017-05-11 19:47:30,2016-10-05 09:09:58
gradlew,d5bcd4a,John Rodriguez,Bump dependencies  * Updated gradle plugin to latest javaparser-core api * Removed opengl-api; obsolete as of Robolectric 3.3.2 * Update Gradle & wrapper to 4.0 * Other minor version bumps,40,40,Jared Burrows,f4949e3,0,2017-06-24 09:30:31,2017-05-11 19:47:30
gradlew,ece57bd,Jared Burrows,Update gradle,30,32,Michael Evans,05eae6d,0,2016-05-21 04:27:10,2015-09-26 03:41:19
gradlew,ece57bd,Jared Burrows,Update gradle,51,51,Michael Evans,05eae6d,0,2016-05-21 04:27:10,2015-09-26 03:41:19
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",52,61,,,0,2015-09-26 03:41:19,
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",65,66,,,0,2015-09-26 03:41:19,
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",41,50,,,0,2015-09-26 03:41:19,
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",93,115,,,0,2015-09-26 03:41:19,
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",67,91,,,0,2015-09-26 03:41:19,
gradlew,ece57bd,Jared Burrows,Update gradle,92,92,Michael Evans,05eae6d,0,2016-05-21 04:27:10,2015-09-26 03:41:19
gradlew,d5bcd4a,John Rodriguez,Bump dependencies  * Updated gradle plugin to latest javaparser-core api * Removed opengl-api; obsolete as of Robolectric 3.3.2 * Update Gradle & wrapper to 4.0 * Other minor version bumps,158,158,Jared Burrows,f4949e3,0,2017-06-24 09:30:31,2017-05-11 19:47:30
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",117,156,,,0,2015-09-26 03:41:19,
gradlew,ece57bd,Jared Burrows,Update gradle,62,64,Michael Evans,05eae6d,0,2016-05-21 04:27:10,2015-09-26 03:41:19
gradlew,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),159,160,Jared Burrows,7c39e47,0,2017-05-11 19:47:30,2016-10-05 09:09:58
gradlew,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),157,157,Jared Burrows,7c39e47,0,2017-05-11 19:47:30,2016-10-05 09:09:58
gradlew,ece57bd,Jared Burrows,Update gradle,116,116,Michael Evans,05eae6d,0,2016-05-21 04:27:10,2015-09-26 03:41:19
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",161,161,,,0,2015-09-26 03:41:19,
gradlew,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),168,168,Jared Burrows,7c39e47,0,2017-05-11 19:47:30,2016-10-05 09:09:58
gradlew,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),162,165,Jared Burrows,7c39e47,0,2017-05-11 19:47:30,2016-10-05 09:09:58
gradlew,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",166,166,,,0,2015-09-26 03:41:19,
gradlew,7c39e47,Jared Burrows,Update android gradle plugin 2.2.0,167,167,Jared Burrows,ece57bd,0,2016-10-05 09:09:58,2016-05-21 04:27:10
gradlew,7c39e47,Jared Burrows,Update android gradle plugin 2.2.0,169,171,Jared Burrows,ece57bd,0,2016-10-05 09:09:58,2016-05-21 04:27:10
gradlew,f4949e3,Jared Burrows,Update Gradle to 3.5 (#948),172,172,Jared Burrows,7c39e47,0,2017-05-11 19:47:30,2016-10-05 09:09:58
gradlew.bat,ece57bd,Jared Burrows,Update gradle,62,84,,,0,2016-05-21 04:27:10,
gradlew.bat,ece57bd,Jared Burrows,Update gradle,1,51,,,0,2016-05-21 04:27:10,
gradlew.bat,ece57bd,Jared Burrows,Update gradle,52,61,,,0,2016-05-21 04:27:10,
sample/app/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",2,3,,,0,2015-09-26 03:41:19,
sample/app/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,1,,,0,2015-09-26 03:41:19,
sample/app/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",5,6,,,0,2015-09-26 03:41:19,
sample/app/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",9,12,,,0,2015-09-26 03:41:19,
sample/app/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,13,14,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
sample/app/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",15,17,,,0,2015-09-26 03:41:19,
sample/app/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,4,4,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
sample/app/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,7,8,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
sample/app/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,33,33,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
sample/app/build.gradle,ea82b0a,Artem Zinnatullin,Package ProGuard rules into the aar,18,18,,,0,2015-09-26 16:42:42,
sample/app/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",29,31,,,0,2015-09-26 03:41:19,
sample/app/build.gradle,ea82b0a,Artem Zinnatullin,Package ProGuard rules into the aar,24,28,,,0,2015-09-26 16:42:42,
sample/app/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,32,32,Jake Wharton,0b2c1aa,0,2017-07-28 17:23:19,2017-05-08 18:41:11
sample/app/build.gradle,26881c6,Jake Wharton,Update sample to the release version.,34,34,Gautam Korlam,20aad6c,0,2016-07-11 00:00:08,2016-06-19 19:32:42
sample/app/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",36,36,,,0,2015-09-26 03:41:19,
sample/app/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,35,35,Jake Wharton,0b2c1aa,0,2017-07-28 17:23:19,2017-05-08 18:41:11
sample/app/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,37,38,Jake Wharton,0b2c1aa,0,2017-07-28 17:23:19,2017-05-08 18:41:11
sample/app/build.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",39,39,,,0,2015-09-26 03:41:19,
sample/app/build.gradle,9a0ba5b,Jake Wharton,Latest Android plugin and Gradle.,19,23,,,0,2016-04-23 07:49:06,
sample/app/build.gradle,e0cbb07,Jake Wharton,Update ProGuard (again) and actually test it.,40,50,,,0,2016-04-24 04:04:59,
sample/app/src/main/AndroidManifest.xml,8b97101,Jake Wharton,Initial commit.,4,5,,,0,2013-03-05 08:55:13,
sample/app/src/main/AndroidManifest.xml,8b97101,Jake Wharton,Initial commit.,2,2,,,0,2013-03-05 08:55:13,
sample/app/src/main/AndroidManifest.xml,8b97101,Jake Wharton,Initial commit.,6,6,,,0,2013-03-05 08:55:13,
sample/app/src/main/AndroidManifest.xml,8b97101,Jake Wharton,Initial commit.,1,1,,,0,2013-03-05 08:55:13,
sample/app/src/main/AndroidManifest.xml,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,8,8,,,0,2013-07-18 07:35:50,
sample/app/src/main/AndroidManifest.xml,8b97101,Jake Wharton,Initial commit.,11,13,,,0,2013-03-05 08:55:13,
sample/app/src/main/AndroidManifest.xml,5281aef,John Rodriguez,Suppress lint checks,10,10,Jake Wharton,26881c6,0,2017-07-28 09:47:28,2016-07-11 00:00:08
sample/app/src/main/AndroidManifest.xml,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",3,3,,,0,2015-09-26 03:41:19,
sample/app/src/main/AndroidManifest.xml,8b97101,Jake Wharton,Initial commit.,18,23,,,0,2013-03-05 08:55:13,
sample/app/src/main/AndroidManifest.xml,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",7,7,,,0,2015-09-26 03:41:19,
sample/app/src/main/AndroidManifest.xml,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",9,9,,,0,2015-09-26 03:41:19,
sample/app/src/main/AndroidManifest.xml,8b97101,Jake Wharton,Initial commit.,15,16,,,0,2013-03-05 08:55:13,
sample/app/src/main/AndroidManifest.xml,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,17,17,,,0,2015-11-24 17:04:10,
sample/app/src/main/AndroidManifest.xml,20aad6c,Gautam Korlam,Support Android Library Projects,14,14,,,0,2016-06-19 19:32:42,
sample/app/src/main/java/com/example/butterknife/SimpleApp.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,1,3,,,0,2013-07-18 07:35:50,
sample/app/src/main/java/com/example/butterknife/SimpleApp.java,af2ce88,Jake Wharton,Rename main class to 'ButterKnife'.,4,4,,,0,2013-11-18 13:27:28,
sample/app/src/main/java/com/example/butterknife/SimpleApp.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,10,11,,,0,2013-07-18 07:35:50,
sample/app/src/main/java/com/example/butterknife/SimpleApp.java,541811a,Jake Wharton,Add debug logging control via 'setDebug' method.,5,8,,,0,2013-07-18 07:35:50,
sample/app/src/main/java/com/example/butterknife/SimpleApp.java,af2ce88,Jake Wharton,Rename main class to 'ButterKnife'.,9,9,,,0,2013-11-18 13:27:28,
sample/app/src/main/java/com/example/butterknife/unbinder/A.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/A.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,16,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/A.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,26881c6,0,2019-01-04 00:15:29,2016-07-11 00:00:08
sample/app/src/main/java/com/example/butterknife/unbinder/B.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/B.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,17,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/B.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,26881c6,0,2019-01-04 00:15:29,2016-07-11 00:00:08
sample/app/src/main/java/com/example/butterknife/unbinder/C.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,5,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/C.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,12,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/C.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/C.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",14,19,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/C.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,13,13,,,0,2016-04-23 07:46:57,
sample/app/src/main/java/com/example/butterknife/unbinder/C.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,6,6,,,0,2016-04-23 07:46:57,
sample/app/src/main/java/com/example/butterknife/unbinder/C.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,26881c6,0,2019-01-04 00:15:29,2016-07-11 00:00:08
sample/app/src/main/java/com/example/butterknife/unbinder/D.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,17,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/D.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/D.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,26881c6,0,2019-01-04 00:15:29,2016-07-11 00:00:08
sample/app/src/main/java/com/example/butterknife/unbinder/E.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,17,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/E.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/E.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,26881c6,0,2019-01-04 00:15:29,2016-07-11 00:00:08
sample/app/src/main/java/com/example/butterknife/unbinder/F.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",10,17,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/F.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,8,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/F.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/F.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",9,9,,,0,2016-05-07 04:46:58,
sample/app/src/main/java/com/example/butterknife/unbinder/F.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,26881c6,0,2019-01-04 00:15:29,2016-07-11 00:00:08
sample/app/src/main/java/com/example/butterknife/unbinder/G.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,5,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/G.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,13,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/G.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",15,24,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/G.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,14,14,,,0,2016-04-23 07:46:57,
sample/app/src/main/java/com/example/butterknife/unbinder/G.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,6,6,,,0,2016-04-23 07:46:57,
sample/app/src/main/java/com/example/butterknife/unbinder/G.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,26881c6,0,2019-01-04 00:15:29,2016-07-11 00:00:08
sample/app/src/main/java/com/example/butterknife/unbinder/G.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/H.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",1,2,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/H.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",4,5,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/H.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,12,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/H.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",14,19,,,1,2016-04-02 04:53:49,
sample/app/src/main/java/com/example/butterknife/unbinder/H.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,13,13,,,0,2016-04-23 07:46:57,
sample/app/src/main/java/com/example/butterknife/unbinder/H.java,01e4e4e,Jake Wharton,Remove legacy support,3,3,Jake Wharton,26881c6,0,2019-01-04 00:15:29,2016-07-11 00:00:08
sample/app/src/main/java/com/example/butterknife/unbinder/H.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,6,6,,,0,2016-04-23 07:46:57,
sample/library/build.gradle,ef6f392,John Rodriguez,Move around buildscript blocks,2,4,Jake Wharton,0b2c1aa,0,2017-07-27 08:10:44,2017-05-08 18:41:11
sample/library/build.gradle,ef6f392,John Rodriguez,Move around buildscript blocks,6,7,Jake Wharton,0b2c1aa,0,2017-07-27 08:10:44,2017-05-08 18:41:11
sample/library/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,5,5,John Rodriguez,ef6f392,0,2017-07-28 17:23:19,2017-07-27 08:10:44
sample/library/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,9,9,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
sample/library/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,17,17,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
sample/library/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,20,20,Jared Burrows,7c39e47,0,2017-05-08 18:41:11,2016-10-05 09:09:58
sample/library/build.gradle,115d4be,Jake Wharton,Change plugin name to be qualified.,14,14,,,0,2016-07-10 22:44:01,
sample/library/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,8,8,,,0,2016-06-19 19:32:42,
sample/library/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,10,13,,,0,2016-06-19 19:32:42,
sample/library/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,25,25,John Rodriguez,ef6f392,0,2017-07-28 17:23:19,2017-07-27 08:10:44
sample/library/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,1,1,,,0,2016-06-19 19:32:42,
sample/library/build.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,28,29,John Rodriguez,ef6f392,0,2017-07-28 17:23:19,2017-07-27 08:10:44
sample/library/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,18,19,,,0,2016-06-19 19:32:42,
sample/library/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,15,16,,,0,2016-06-19 19:32:42,
sample/library/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,21,24,,,0,2016-06-19 19:32:42,
sample/library/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,27,27,,,0,2016-06-19 19:32:42,
sample/library/build.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,30,30,,,0,2016-06-19 19:32:42,
sample/library/build.gradle,0b2c1aa,Jake Wharton,Update build stuff to modern style.,26,26,,,0,2017-05-08 18:41:11,
sample/library/src/main/AndroidManifest.xml,20aad6c,Gautam Korlam,Support Android Library Projects,1,1,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,4,4,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,7,9,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,11,82,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,5,5,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,2,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,3,3,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,10,10,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,85,88,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,6,6,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,01e4e4e,Jake Wharton,Remove legacy support,95,96,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,83,83,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,94,94,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,97,97,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,98,98,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,100,100,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,89,93,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,99,99,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,102,102,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,103,105,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,106,106,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,101,101,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,7c8c369,Jake Wharton,Emit proper references to R types.,113,113,,,0,2016-06-19 19:49:08,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,107,107,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,111,111,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,114,114,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,84,84,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,108,109,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,112,112,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,115,115,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,119,121,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",116,116,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,124,124,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,122,122,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,110,110,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,117,117,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,126,126,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,128,129,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,01e4e4e,Jake Wharton,Remove legacy support,247,248,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,123,123,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,118,118,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,125,125,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,127,127,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,01e4e4e,Jake Wharton,Remove legacy support,281,282,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,327,329,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,330,330,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,332,335,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",246,246,,,0,2017-02-27 17:02:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,336,340,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",280,280,,,0,2017-02-27 17:02:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,01e4e4e,Jake Wharton,Remove legacy support,342,343,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/RClassTest.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",130,245,,,0,2017-02-27 17:02:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,331,331,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",283,326,,,0,2017-02-27 17:02:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,4ad9f98,Felipe Lima,"Scope symbol IDs per element package name  We need to scope that somehow in order to prevent clashes. This can be observed in a multiple modules project where butterknife is used in modules that depend on other modules that also use Butterknife. Since IDs can repeat across modules, we need to scope them according to the package name of the current element being evaluated.",249,279,,,0,2017-02-27 17:02:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,341,341,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,344,344,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,345,345,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,346,346,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,348,348,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,347,347,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,354,354,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,357,357,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,355,356,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,7c8c369,Jake Wharton,Emit proper references to R types.,360,360,,,0,2016-06-19 19:49:08,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,349,349,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,350,352,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,361,361,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,358,358,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,366,368,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,353,353,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,362,362,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,371,371,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,369,369,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,359,359,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,373,373,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,372,372,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,375,376,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,364,364,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",363,363,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,380,380,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,378,379,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a464bba,Gautam Korlam,Generate nicer code for precompiled R class references,377,377,,,0,2016-06-22 18:16:35,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,365,365,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,382,385,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,370,370,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,01e4e4e,Jake Wharton,Remove legacy support,391,393,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,374,374,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,390,390,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,395,395,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,396,396,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,394,394,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,386,389,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,398,398,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,381,381,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,400,402,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,399,399,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,403,403,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,397,397,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,404,404,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,410,410,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,407,407,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,415,417,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,405,406,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,418,418,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,409,409,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,414,414,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,411,411,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,420,420,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",412,412,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,422,422,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,408,408,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,421,421,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,20aad6c,Gautam Korlam,Support Android Library Projects,424,425,,,0,2016-06-19 19:32:42,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,0792044,Jake Wharton,Always generate a binding class.,413,413,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,419,419,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/RClassTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,423,423,,,0,2016-08-23 15:56:29,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,12,13,,,0,2013-03-05 19:08:11,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,4,9,,,0,2013-03-05 19:08:11,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,2,2,,,0,2013-03-05 19:08:11,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,af2ce88,Jake Wharton,Rename main class to 'ButterKnife'.,11,11,,,0,2013-11-18 13:27:28,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,15,33,,,0,2013-03-05 19:08:11,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,5281aef,John Rodriguez,Suppress lint checks,34,34,Jake Wharton,26881c6,0,2017-07-28 09:47:28,2016-07-11 00:00:08
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,5281aef,John Rodriguez,Suppress lint checks,3,3,Jake Wharton,26881c6,0,2017-07-28 09:47:28,2016-07-11 00:00:08
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,35,53,,,0,2013-03-05 19:08:11,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,61,63,,,0,2013-03-05 19:08:11,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,60,60,,,0,2015-03-15 00:06:02,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,58,59,,,0,2013-03-05 19:08:11,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,20aad6c,Gautam Korlam,Support Android Library Projects,14,14,,,0,2016-06-19 19:32:42,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,10,10,,,0,2016-04-23 07:46:57,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,1,,,0,2016-06-19 19:32:42,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",54,54,,,0,2016-05-07 04:46:58,
sample/library/src/main/java/com/example/butterknife/library/SimpleAdapter.java,20aad6c,Gautam Korlam,Support Android Library Projects,55,57,,,0,2016-06-19 19:32:42,
sample/library/src/main/res/layout/simple_activity.xml,8b97101,Jake Wharton,Initial commit.,35,44,,,0,2013-03-05 08:55:13,
sample/library/src/main/res/layout/simple_activity.xml,8b97101,Jake Wharton,Initial commit.,1,26,,,0,2013-03-05 08:55:13,
sample/library/src/main/res/layout/simple_activity.xml,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,27,34,,,0,2013-03-05 19:08:11,
sample/library/src/main/res/layout/simple_list_item.xml,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,1,22,,,0,2013-03-05 19:08:11,
sample/library/src/main/res/values/strings.xml,8b97101,Jake Wharton,Initial commit.,1,5,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,fcd8d6e,Jake Wharton,Support arbitrary injection targets using a View source.  Closes #1.,10,10,,,0,2013-03-05 19:08:11,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,2,2,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,9,9,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,4,5,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,5281aef,John Rodriguez,Suppress lint checks,3,3,Jake Wharton,26881c6,0,2017-07-28 09:47:28,2016-07-11 00:00:08
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,01e4e4e,Jake Wharton,Remove legacy support,6,6,John Rodriguez,5281aef,0,2019-01-04 00:15:29,2017-07-28 09:47:28
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,11,12,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,7,8,,,0,2014-04-14 07:02:54,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,912fecf,Jake Wharton,Add @OnClick method injection.,16,16,,,0,2013-07-10 06:11:01,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,20,20,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,17,17,,,0,2013-11-19 21:42:17,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,21,23,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,1ea0bc3,wuseal,test,15,15,,,0,2015-09-15 09:36:23,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,18,18,,,0,2013-11-21 10:32:23,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,26,33,,,0,2014-04-14 07:02:54,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,24,24,,,0,2014-04-14 07:02:54,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,7d31098,Jake Wharton,@BindViews,14,14,,,0,2016-04-23 18:32:56,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,13,13,,,0,2016-04-23 07:46:57,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,39,39,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,7d31098,Jake Wharton,@BindViews,19,19,,,0,2016-04-23 18:32:56,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,20aad6c,Gautam Korlam,Support Android Library Projects,1,1,,,0,2016-06-19 19:32:42,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,414ba5f,Jake Wharton,Annotation invasion for making constraints explicit.,25,25,,,0,2015-10-10 00:25:42,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,42,43,,,0,2013-11-19 21:42:17,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,41,41,,,0,2014-04-14 07:02:54,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,45,45,,,0,2013-11-19 21:42:17,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,46,46,,,0,2014-04-14 07:02:54,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,47,48,,,0,2013-11-19 21:42:17,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8dbb8f7,Jake Wharton,Add support for listener return types. Add @OnLongClick as an example.,50,53,,,0,2013-11-21 10:32:23,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,55,55,,,0,2013-11-19 21:42:17,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,912fecf,Jake Wharton,Add @OnClick method injection.,56,57,,,0,2013-07-10 06:11:01,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,59,61,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,5281aef,John Rodriguez,Suppress lint checks,58,58,Jake Wharton,26881c6,0,2017-07-28 09:47:28,2016-07-11 00:00:08
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,63,63,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,20aad6c,Gautam Korlam,Support Android Library Projects,40,40,,,0,2016-06-19 19:32:42,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,20aad6c,Gautam Korlam,Support Android Library Projects,34,38,,,0,2016-06-19 19:32:42,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,65,65,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,67,68,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,62,62,,,0,2015-03-15 00:06:02,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,8b97101,Jake Wharton,Initial commit.,72,73,,,0,2013-03-05 08:55:13,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,69,71,,,0,2013-11-19 21:42:17,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,64,64,,,0,2015-03-15 00:06:02,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,20aad6c,Gautam Korlam,Support Android Library Projects,44,44,,,0,2016-06-19 19:32:42,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,20aad6c,Gautam Korlam,Support Android Library Projects,49,49,,,0,2016-06-19 19:32:42,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,66,66,,,0,2015-03-15 00:06:02,
sample/library/src/main/java/com/example/butterknife/library/SimpleActivity.java,20aad6c,Gautam Korlam,Support Android Library Projects,54,54,,,0,2016-06-19 19:32:42,
website/ide-eclipse.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,9,20,,,0,2013-04-28 06:49:06,
website/ide-eclipse.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,21,21,Arjan Scherpenisse,2c2ad81,0,2015-03-15 00:06:02,2014-08-20 19:39:41
website/ide-eclipse.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,8,8,Arjan Scherpenisse,2c2ad81,0,2015-03-15 00:06:02,2014-08-20 19:39:41
website/ide-eclipse.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,22,29,,,0,2013-04-28 06:49:06,
website/ide-eclipse.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,1,7,,,0,2013-04-28 06:49:06,
website/ide-eclipse.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,31,38,,,0,2013-04-28 06:49:06,
website/ide-eclipse.html,ea742ef,sindyoke,typo  added one step - Properties,30,30,Jake Wharton,ec778ad,0,2015-08-26 16:14:38,2015-03-15 00:06:02
website/ide-eclipse.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,39,39,Arjan Scherpenisse,2c2ad81,0,2015-03-15 00:06:02,2014-08-20 19:39:41
website/ide-eclipse.html,2c2ad81,Arjan Scherpenisse,Website: Add note about Java 1.6 requirement in Eclipse instructions,40,40,Jake Wharton,a08c22d,0,2014-08-20 19:39:41,2013-04-28 06:49:06
website/ide-eclipse.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,41,59,,,0,2013-04-28 06:49:06,
settings.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",1,3,,,0,2015-09-26 03:41:19,
settings.gradle,0821b0c,Jake Wharton,"Start entirely reflection-backed module  This is for IDE builds where annotation processing can dramatically slow down iteration time. Right now only BindView, BindViews, and BindString work as those are the bindings used by the integration test.",7,7,Jake Wharton,9b59a14,0,2018-09-06 22:01:51,2018-09-06 16:48:44
settings.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,6,6,John Rodriguez,dfff573,0,2018-09-06 16:48:44,2017-07-28 17:23:19
settings.gradle,6771eae,Jared Burrows,integration test for lint errors,5,5,Jake Wharton,26881c6,0,2016-07-21 16:15:27,2016-07-11 00:00:08
settings.gradle,20aad6c,Gautam Korlam,Support Android Library Projects,4,4,Michael Evans,05eae6d,0,2016-06-19 19:32:42,2015-09-26 03:41:19
settings.gradle,dfff573,John Rodriguez,Update to AGP 3.0.0a8,10,11,Jared Burrows,6771eae,0,2017-07-28 17:23:19,2016-07-21 16:15:27
settings.gradle,9b59a14,Jake Wharton,Split out the codegen runtime from the reflective lookup  This lets you use the generated code without the reflective runtime (or its ProGuard/R8 rules).,8,8,John Rodriguez,dfff573,0,2018-09-06 16:48:44,2017-07-28 17:23:19
settings.gradle,26881c6,Jake Wharton,Update sample to the release version.,9,9,Jake Wharton,115d4be,0,2016-07-11 00:00:08,2016-07-10 22:44:01
settings.gradle,05eae6d,Michael Evans,"Convert build from Maven to Gradle, split into separate artifacts.",12,13,,,0,2015-09-26 03:41:19,
website/ide-idea.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,9,20,,,0,2013-04-28 06:49:06,
website/ide-idea.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,8,8,Jake Wharton,a08c22d,0,2015-03-15 00:06:02,2013-04-28 06:49:06
website/ide-idea.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,22,47,,,0,2013-04-28 06:49:06,
website/ide-idea.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,1,7,,,0,2013-04-28 06:49:06,
website/ide-idea.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,21,21,Jake Wharton,a08c22d,0,2015-03-15 00:06:02,2013-04-28 06:49:06
website/static/app.css,885adee,Jake Wharton,Center the headings and image.,33,35,,,0,2013-03-26 04:48:23,
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,24,27,Jake Wharton,885adee,0,2013-03-26 07:36:11,2013-03-26 04:48:23
website/static/app.css,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,14,17,Jake Wharton,65ce832,0,2013-04-28 06:49:06,2013-03-26 07:36:11
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,37,39,Jake Wharton,885adee,0,2013-03-26 07:36:11,2013-03-26 04:48:23
website/static/app.css,11af074,Jake Wharton,Add website.,18,23,,,0,2013-03-25 20:13:05,
website/static/app.css,11af074,Jake Wharton,Add website.,28,32,,,0,2013-03-25 20:13:05,
website/static/app.css,11af074,Jake Wharton,Add website.,1,13,,,0,2013-03-25 20:13:05,
website/static/app.css,11af074,Jake Wharton,Add website.,36,36,,,0,2013-03-25 20:13:05,
website/static/app.css,11af074,Jake Wharton,Add website.,40,46,,,0,2013-03-25 20:13:05,
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,47,47,Jake Wharton,885adee,0,2013-03-26 07:36:11,2013-03-26 04:48:23
website/static/app.css,11af074,Jake Wharton,Add website.,55,58,,,0,2013-03-25 20:13:05,
website/static/app.css,ceef790,Jake Wharton,Documentation improvements all around.,48,48,Jake Wharton,a08c22d,0,2014-04-15 06:11:17,2013-04-28 06:49:06
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,49,49,Jake Wharton,885adee,0,2013-03-26 07:36:11,2013-03-26 04:48:23
website/static/app.css,11af074,Jake Wharton,Add website.,50,50,,,0,2013-03-25 20:13:05,
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,59,59,Jake Wharton,885adee,0,2013-03-26 07:36:11,2013-03-26 04:48:23
website/static/app.css,11af074,Jake Wharton,Add website.,60,64,,,0,2013-03-25 20:13:05,
website/static/app.css,ceef790,Jake Wharton,Documentation improvements all around.,51,54,Jake Wharton,a08c22d,0,2014-04-15 06:11:17,2013-04-28 06:49:06
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,67,68,Jake Wharton,885adee,0,2013-03-26 07:36:11,2013-03-26 04:48:23
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,65,65,Jake Wharton,885adee,0,2013-03-26 07:36:11,2013-03-26 04:48:23
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,75,75,,,0,2013-03-26 07:36:11,
website/static/app.css,11af074,Jake Wharton,Add website.,66,66,,,0,2013-03-25 20:13:05,
website/static/app.css,11af074,Jake Wharton,Add website.,69,74,,,0,2013-03-25 20:13:05,
website/static/app.css,11af074,Jake Wharton,Add website.,79,109,,,0,2013-03-25 20:13:05,
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,78,78,,,0,2013-03-26 07:36:11,
website/static/app.css,11af074,Jake Wharton,Add website.,110,112,,,0,2013-03-25 20:13:05,
website/static/app.css,11af074,Jake Wharton,Add website.,76,77,,,0,2013-03-25 20:13:05,
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,113,114,Jake Wharton,885adee,0,2013-03-26 07:36:11,2013-03-26 04:48:23
website/static/app.css,ceef790,Jake Wharton,Documentation improvements all around.,126,126,Jake Wharton,a08c22d,0,2014-04-15 06:11:17,2013-04-28 06:49:06
website/static/app.css,11af074,Jake Wharton,Add website.,115,122,,,0,2013-03-25 20:13:05,
website/static/app.css,11af074,Jake Wharton,Add website.,125,125,,,0,2013-03-25 20:13:05,
website/static/app.css,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,123,124,,,0,2013-03-26 07:36:11,
website/static/bootstrap-responsive.min.css,11af074,Jake Wharton,Add website.,1,20,,,0,2013-03-25 20:13:05,
website/static/bootstrap.min.css,11af074,Jake Wharton,Add website.,1,9,,,0,2013-03-25 20:13:05,
website/static/butter_android.psd,11af074,Jake Wharton,Add website.,1,1908,,,0,2013-03-25 20:13:05,
website/static/jquery-maven-artifact.min.js,11af074,Jake Wharton,Add website.,1,7,,,0,2013-03-25 20:13:05,
website/static/jquery-maven-artifact.min.js,fe670c2,Cory Charlton,Fix mixed-content error,8,8,Jake Wharton,11af074,1,2019-05-23 22:59:23,2013-03-25 20:13:05
website/static/logo.psd,11af074,Jake Wharton,Add website.,10,27,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,46,172,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,8,9,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,29,38,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,28,28,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,177,193,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,1,1,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,39,45,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,2,7,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,173,176,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,198,212,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,194,194,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,218,251,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,195,197,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,252,252,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,215,217,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,214,214,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,213,213,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,253,303,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,304,304,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,357,357,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,364,364,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,358,363,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,305,356,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,402,539,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,365,401,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,540,540,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,551,551,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,542,550,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,552,569,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,541,541,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,570,570,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,571,588,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,590,724,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,589,589,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,741,741,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,725,725,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,742,751,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,726,740,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,752,752,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,753,761,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,765,765,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,763,764,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,762,762,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,768,800,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,801,802,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,766,766,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,767,767,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,816,816,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,803,813,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,814,814,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,815,815,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,830,830,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,817,829,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,833,833,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,831,832,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,834,835,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,837,837,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,836,836,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,838,838,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,839,851,,,0,2013-03-26 07:36:11,
website/static/logo.psd,11af074,Jake Wharton,Add website.,852,852,,,0,2013-03-25 20:13:05,
website/static/logo.psd,11af074,Jake Wharton,Add website.,855,855,,,0,2013-03-25 20:13:05,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,853,854,,,0,2013-03-26 07:36:11,
website/static/logo.psd,65ce832,Jake Wharton,Website style tweaks. Give logo a drop-shadow.,856,954,,,0,2013-03-26 07:36:11,
website/static/prettify.css,11af074,Jake Wharton,Add website.,1,8,,,0,2013-03-25 20:13:05,
website/static/prettify.js,11af074,Jake Wharton,Add website.,1,28,,,0,2013-03-25 20:13:05,
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,8,8,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,11af074,Jake Wharton,Add website.,23,25,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,1,7,,,0,2013-03-25 20:13:05,
website/index.html,ceef790,Jake Wharton,Documentation improvements all around.,22,22,Jake Wharton,0c7bde5,0,2014-04-15 06:11:17,2014-04-14 19:48:56
website/index.html,11af074,Jake Wharton,Add website.,10,20,,,0,2013-03-25 20:13:05,
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,21,21,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,001ee62,Jake Wharton,HTTPS,9,9,Esdras Lopez,8ea7ee0,0,2019-02-05 18:40:27,2018-04-15 10:07:20
website/index.html,68d7400,Kieran Simpson,Add deprecation notice  Fixes https://github.com/JakeWharton/butterknife/issues/1607,26,26,Anthony Lawson,6347df1,0,2020-05-07 03:26:18,2019-03-04 16:40:37
website/index.html,7b87d8f,Kieran Simpson,Close link properly  The anchor was not closed properly 🤦,27,27,Kieran Simpson,68d7400,0,2020-05-14 02:24:27,2020-05-07 03:26:18
website/index.html,40ffd23,Dmitrii Nikitin,Replace old annotation,29,29,Jake Wharton,87df495,0,2016-05-11 17:47:38,2016-04-25 19:20:39
website/index.html,11af074,Jake Wharton,Add website.,30,30,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,28,28,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,40,41,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,34,37,,,0,2013-03-25 20:13:05,
website/index.html,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,31,33,Veeren Mandalia,bab2146,0,2016-04-23 07:46:57,2016-03-28 06:18:09
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,42,42,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,38,39,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,11af074,Jake Wharton,Add website.,45,48,,,0,2013-03-25 20:13:05,
website/index.html,aae1bdc,Ersin Ertan,Add resource binding to website,50,50,Niklas Baudy,5e015b1,0,2015-08-25 02:09:25,2015-06-30 11:02:23
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,44,44,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,cdd42b7,Ersin Ertan,Typo,51,51,Ersin Ertan,aae1bdc,0,2015-08-25 02:16:48,2015-08-25 02:09:25
website/index.html,1278730,Jake Wharton,Update website with less snark and @InjectViews.,43,43,Prateek Srivastava,9a1c64a,0,2014-04-14 07:29:41,2014-03-26 04:19:40
website/index.html,11af074,Jake Wharton,Add website.,49,49,,,0,2013-03-25 20:13:05,
website/index.html,aae1bdc,Ersin Ertan,Add resource binding to website,52,55,Niklas Baudy,5e015b1,0,2015-08-25 02:09:25,2015-06-30 11:02:23
website/index.html,6347df1,Anthony Lawson,"Fix BindDimen Float Example on Website  Currently, the website shows this as an example of how to bind a `float` dimen: ```java @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field ``` Using `Float` as the type for the `spacer` variable will cause the following error: ``` error: @BindDimen field type must be 'int' or 'float'. ``` The type for the `spacer` variable here should be the primitive `float` type like this: ```java @BindDimen(R.dimen.spacer) float spacer; // int (for pixel size) or float (for exact value) field ```",56,56,Jake Wharton,001ee62,1,2019-03-04 16:40:37,2019-02-05 18:40:27
website/index.html,11af074,Jake Wharton,Add website.,62,62,,,0,2013-03-25 20:13:05,
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,60,61,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,aae1bdc,Ersin Ertan,Add resource binding to website,57,59,Niklas Baudy,5e015b1,0,2015-08-25 02:09:25,2015-06-30 11:02:23
website/index.html,11af074,Jake Wharton,Add website.,67,67,,,0,2013-03-25 20:13:05,
website/index.html,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,63,64,Veeren Mandalia,bab2146,0,2016-04-23 07:46:57,2016-03-28 06:18:09
website/index.html,11af074,Jake Wharton,Add website.,65,65,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,70,74,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,76,87,,,0,2013-03-25 20:13:05,
website/index.html,5c1745b,ligi,should return View and not void,75,75,,,0,2013-10-15 20:16:16,
website/index.html,11af074,Jake Wharton,Add website.,89,91,,,0,2013-03-25 20:13:05,
website/index.html,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,92,93,Veeren Mandalia,bab2146,0,2016-04-23 07:46:57,2016-03-28 06:18:09
website/index.html,419bff6,Sebastian Jensen,Added missing access level modifiers.,66,66,Jake Wharton,1968d35,0,2014-11-09 21:16:07,2013-09-11 17:33:02
website/index.html,11af074,Jake Wharton,Add website.,97,100,,,0,2013-03-25 20:13:05,
website/index.html,982df1f,nahurst,Fixed a compile error in example view holder code,88,88,Tony Cosentini,6efc032,1,2014-05-08 03:28:02,2013-11-06 19:42:53
website/index.html,11af074,Jake Wharton,Add website.,94,95,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,103,103,,,0,2013-03-25 20:13:05,
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,101,102,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,96,96,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,faf1c33,Jake Wharton,Correct callback name.,107,107,Jake Wharton,ef32345,1,2014-05-12 15:32:37,2014-04-19 08:01:21
website/index.html,11af074,Jake Wharton,Add website.,108,109,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,106,106,,,0,2013-03-25 20:13:05,
website/index.html,0c7bde5,Jake Wharton,Add Setter interface for easier setting of values across lists.,110,110,Jake Wharton,661c81a,0,2014-04-14 19:48:56,2014-04-14 07:31:40
website/index.html,1278730,Jake Wharton,Update website with less snark and @InjectViews.,111,111,Prateek Srivastava,9a1c64a,0,2014-04-14 07:29:41,2014-03-26 04:19:40
website/index.html,7d31098,Jake Wharton,@BindViews,112,112,Jake Wharton,959e4ba,0,2016-04-23 18:32:56,2016-04-23 07:46:57
website/index.html,0c7bde5,Jake Wharton,Add Setter interface for easier setting of values across lists.,114,117,Jake Wharton,661c81a,0,2014-04-14 19:48:56,2014-04-14 07:31:40
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,104,105,Jake Wharton,ef32345,0,2015-03-15 00:06:02,2014-04-19 08:01:21
website/index.html,fc51405,Luka Cindro,Fix website code for view lists.,122,122,Tom Reznik,7f0f4f0,1,2015-06-28 16:12:04,2015-03-14 05:04:59
website/index.html,5e015b1,Niklas Baudy,Fixed typo,118,118,Jake Wharton,0896401,1,2015-06-30 11:02:23,2015-06-28 02:00:11
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,68,69,,,0,2015-03-15 00:06:02,
website/index.html,1278730,Jake Wharton,Update website with less snark and @InjectViews.,119,119,,,0,2014-04-14 07:29:41,
website/index.html,1278730,Jake Wharton,Update website with less snark and @InjectViews.,113,113,,,0,2014-04-14 07:29:41,
website/index.html,0c7bde5,Jake Wharton,Add Setter interface for easier setting of values across lists.,120,121,,,0,2014-04-14 19:48:56,
website/index.html,0c7bde5,Jake Wharton,Add Setter interface for easier setting of values across lists.,124,125,,,0,2014-04-14 19:48:56,
website/index.html,d11100d,Niklas Baudy,Website - Fixed Action & Setter code snippet,123,123,Jon Reeve,45c0414,1,2015-06-30 10:56:21,2014-08-21 22:57:14
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,131,131,Jon Reeve,45c0414,0,2015-03-15 00:06:02,2014-08-21 22:57:14
website/index.html,fc51405,Luka Cindro,Fix website code for view lists.,127,127,Jon Reeve,45c0414,1,2015-06-28 16:12:04,2014-08-21 22:57:14
website/index.html,1278730,Jake Wharton,Update website with less snark and @InjectViews.,126,126,,,0,2014-04-14 07:29:41,
website/index.html,0c7bde5,Jake Wharton,Add Setter interface for easier setting of values across lists.,128,128,,,0,2014-04-14 19:48:56,
website/index.html,6b1cf46,Jake Wharton,Website docs for click injection. Update change log.,138,141,,,0,2013-07-17 06:06:02,
website/index.html,cf92050,Jake Wharton,Website updates for the recent changes.,132,137,Jon Reeve,45c0414,0,2014-10-28 00:39:34,2014-08-21 22:57:14
website/index.html,6b1cf46,Jake Wharton,Website docs for click injection. Update change log.,143,155,,,0,2013-07-17 06:06:02,
website/index.html,fc51405,Luka Cindro,Fix website code for view lists.,129,129,Jon Reeve,45c0414,1,2015-06-28 16:12:04,2014-08-21 22:57:14
website/index.html,1278730,Jake Wharton,Update website with less snark and @InjectViews.,130,130,,,0,2014-04-14 07:29:41,
website/index.html,cf92050,Jake Wharton,Website updates for the recent changes.,142,142,Jon Reeve,45c0414,0,2014-10-28 00:39:34,2014-08-21 22:57:14
website/index.html,6b1cf46,Jake Wharton,Website docs for click injection. Update change log.,164,164,,,0,2013-07-17 06:06:02,
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,165,165,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,c428476,Jake Wharton,Correct unbinder docs.,166,166,Jake Wharton,7d31098,1,2016-04-23 18:55:37,2016-04-23 18:32:56
website/index.html,43e7be3,Jake Wharton,Reset view docs.,167,167,,,0,2013-06-04 05:43:56,
website/index.html,c428476,Jake Wharton,Correct unbinder docs.,170,170,Jake Wharton,7d31098,1,2016-04-23 18:55:37,2016-04-23 18:32:56
website/index.html,43e7be3,Jake Wharton,Reset view docs.,171,171,,,0,2013-06-04 05:43:56,
website/index.html,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,168,169,Veeren Mandalia,bab2146,0,2016-04-23 07:46:57,2016-03-28 06:18:09
website/index.html,419bff6,Sebastian Jensen,Added missing access level modifiers.,172,172,Jon Reeve,45c0414,0,2014-11-09 21:16:07,2014-08-21 22:57:14
website/index.html,c428476,Jake Wharton,Correct unbinder docs.,174,174,Jake Wharton,7d31098,1,2016-04-23 18:55:37,2016-04-23 18:32:56
website/index.html,43e7be3,Jake Wharton,Reset view docs.,173,173,,,0,2013-06-04 05:43:56,
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,175,175,Tom Reznik,7f0f4f0,0,2015-03-15 00:06:02,2015-03-14 05:04:59
website/index.html,43e7be3,Jake Wharton,Reset view docs.,176,178,,,0,2013-06-04 05:43:56,
website/index.html,43e7be3,Jake Wharton,Reset view docs.,182,184,,,0,2013-06-04 05:43:56,
website/index.html,cf92050,Jake Wharton,Website updates for the recent changes.,156,163,Tony Cosentini,6efc032,0,2014-10-28 00:39:34,2013-11-06 19:42:53
website/index.html,419bff6,Sebastian Jensen,Added missing access level modifiers.,179,179,Jake Wharton,ceef790,0,2014-11-09 21:16:07,2014-04-15 06:11:17
website/index.html,6efc032,Tony Cosentini,Adding super.onDestroyView() to injection reset documentation.,180,180,,,0,2013-11-06 19:42:53,
website/index.html,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,181,181,Artem Zinnatullin,ea82b0a,0,2015-10-09 22:39:33,2015-09-26 16:42:42
website/index.html,bab2146,Veeren Mandalia,Update index.html,188,188,Serj Lotutovici,d4c2754,0,2016-03-28 06:18:09,2015-11-24 17:04:10
website/index.html,1968d35,Jake Wharton,Add optinal docs.,190,190,,,0,2013-09-11 17:33:02,
website/index.html,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",187,187,Serj Lotutovici,836fe69,0,2015-10-12 17:46:19,2015-10-09 22:39:33
website/index.html,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,189,189,Veeren Mandalia,bab2146,0,2016-04-23 07:46:57,2016-03-28 06:18:09
website/index.html,a02a908,Zac Sweers,"Add back Optional for methods  Nullable is problematic on methods since some return primitive types or void, which is both confusing and something IDEs will lint as errors.  Resolves #306",191,191,Serj Lotutovici,836fe69,0,2015-10-12 17:46:19,2015-10-09 22:39:33
website/index.html,9a1c64a,Prateek Srivastava,Document Gradle configuration. Closes #110,208,208,Jake Wharton,2420921,0,2014-03-26 04:19:40,2014-01-04 11:25:14
website/index.html,11af074,Jake Wharton,Add website.,207,207,,,0,2013-03-25 20:13:05,
website/index.html,1968d35,Jake Wharton,Add optinal docs.,192,194,,,0,2013-09-11 17:33:02,
website/index.html,ef32345,Jake Wharton,Website documentation for multi-method listeners.,195,206,Jake Wharton,2420921,0,2014-04-19 08:01:21,2014-01-04 11:25:14
website/index.html,ec778ad,Jake Wharton,Change verb from 'inject' to 'bind'.  * InjectView becomes FindView * InjectViews becomes FindViews * ButterKnife.inject() becomes ButterKnife.bind() * ButterKnife.reset() becomes ButterKnife.unbind() * Previously deprecated Nullable annotation is removed.,185,185,Jake Wharton,ceef790,0,2015-03-15 00:06:02,2014-04-15 06:11:17
website/index.html,001ee62,Jake Wharton,HTTPS,232,232,Esdras Lopez,8ea7ee0,0,2019-02-05 18:40:27,2018-04-15 10:07:20
website/index.html,11af074,Jake Wharton,Add website.,212,231,,,0,2013-03-25 20:13:05,
website/index.html,a08c22d,Jake Wharton,Document IDE configuration.  Closes #23.,211,211,,,0,2013-04-28 06:49:06,
website/index.html,8ea7ee0,Esdras Lopez,Replaced compile with implementation to match readme,209,209,Róbert Papp,dbacb21,0,2018-04-15 10:07:20,2018-02-03 11:31:10
website/index.html,11af074,Jake Wharton,Add website.,233,238,,,0,2013-03-25 20:13:05,
website/index.html,11af074,Jake Wharton,Add website.,239,242,,,0,2013-03-25 20:13:05,
website/index.html,0896401,Jake Wharton,"Combine BindView and BindViews into a single annotation, Bind.",186,186,Jake Wharton,ceef790,0,2015-06-28 02:00:11,2014-04-15 06:11:17
website/index.html,d5fb986,Jake Wharton,Update website to reflect the lateest Gradle plugin conventions.,210,210,Tim Messerschmidt,423961e,0,2016-11-17 17:44:18,2013-11-26 09:29:25
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,4,4,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,2,2,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,9,9,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,b930c02,Jake Wharton,Test proving findViewById is only called once.,12,12,,,0,2013-11-30 22:45:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,10,11,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,b930c02,Jake Wharton,Test proving findViewById is only called once.,23,23,,,0,2013-11-30 22:45:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,27,28,Jake Wharton,3ef792c,0,2019-01-04 00:15:29,2018-09-11 18:58:50
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",13,14,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,6,6,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,17,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,3,3,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",19,22,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,24,26,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,29,30,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,32,32,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,18,18,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,31,31,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,33,33,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,39,40,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,42,51,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,36,36,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,37,37,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,38,38,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,41,41,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,34,35,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,53,53,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,b930c02,Jake Wharton,Test proving findViewById is only called once.,63,63,,,0,2013-11-30 22:45:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",60,60,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",64,64,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,54,54,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,56,56,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",61,62,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,57,59,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,55,55,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,b930c02,Jake Wharton,Test proving findViewById is only called once.,68,68,,,0,2013-11-30 22:45:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,b930c02,Jake Wharton,Test proving findViewById is only called once.,70,71,,,0,2013-11-30 22:45:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,94,95,Jake Wharton,3ef792c,0,2019-01-04 00:15:29,2018-09-11 18:58:50
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,66,66,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",52,52,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,179,179,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,67,67,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,65,65,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,182,185,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,191,191,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,180,181,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,69,69,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,195,196,Jake Wharton,3ef792c,0,2019-01-04 00:15:29,2018-09-11 18:58:50
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,96,178,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,187,190,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,91,93,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,72,90,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,186,186,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,192,194,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,201,201,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,200,200,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,202,203,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,197,198,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,204,204,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,205,205,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,207,208,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,206,206,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,199,199,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,210,219,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,209,209,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,223,223,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",228,228,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,231,231,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,221,221,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,222,222,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,234,234,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,236,236,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,224,224,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",232,232,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,225,227,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",229,230,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,238,239,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",220,220,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,240,240,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,248,248,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,251,257,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,265,265,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,233,233,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,250,250,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",249,249,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,268,273,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,267,267,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,274,274,,,0,2013-11-19 00:02:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",266,266,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,235,235,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,284,284,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,258,264,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,241,247,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,287,287,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",285,285,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,288,288,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,286,286,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,290,291,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,4bde7cf,Jake Wharton,Fix indentation.,292,292,,,1,2014-04-15 07:08:14,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,277,277,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,237,237,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,279,283,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,302,302,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,275,276,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,278,278,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,305,305,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",303,303,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,306,306,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,304,304,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,310,310,,,0,2013-11-19 00:02:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,308,309,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,295,295,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,289,289,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,297,301,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,293,294,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,320,320,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,296,296,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,323,323,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,324,324,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,322,322,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,326,327,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,313,313,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,328,328,,,0,2013-11-19 00:02:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",321,321,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,311,312,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,307,307,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,315,319,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,338,338,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,340,340,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,341,341,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,314,314,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",339,339,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,354,355,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,356,356,,,0,2013-11-19 00:02:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,329,330,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,331,331,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,325,325,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,342,352,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,333,337,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,367,367,,,0,2013-11-19 00:02:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,369,369,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,332,332,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,370,371,,,0,2013-11-19 00:02:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,372,372,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",368,368,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,357,358,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,359,360,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,374,376,,,0,2013-11-19 00:02:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,385,385,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,388,389,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,390,390,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,353,353,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,362,366,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,391,391,,,0,2013-11-21 01:57:59,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,387,387,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,392,393,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,adc1ab2,Jake Wharton,Rewrite listener handling to be easily extensible.,394,394,,,0,2013-11-19 00:02:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,361,361,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",386,386,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,404,404,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,377,384,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,406,406,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,407,408,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,409,409,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,411,412,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,397,397,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",405,405,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,395,396,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,398,398,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,399,403,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,373,373,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,410,410,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,2,2,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,4,4,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,10,13,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,9,9,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",6,6,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,21,21,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",3,3,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",14,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,01e4e4e,Jake Wharton,Remove legacy support,26,27,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",18,20,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",16,16,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,22,23,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,24,25,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,17,17,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,28,28,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,31,31,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,29,29,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,30,30,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,34,34,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,32,33,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,37,38,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,35,35,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,40,51,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,39,39,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,36,36,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,61,61,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,53,53,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,64,64,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",62,62,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",59,60,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,66,66,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",58,58,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,68,70,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",52,52,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,56,57,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,65,65,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,63,63,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,80,80,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",73,74,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,01e4e4e,Jake Wharton,Remove legacy support,85,86,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,54,55,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,67,67,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",71,72,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",76,79,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,81,84,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,87,87,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,88,88,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,90,90,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,75,75,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,89,89,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,91,92,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,93,93,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,94,94,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,95,95,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,96,97,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,98,98,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,110,110,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",109,109,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,99,108,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,120,120,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,112,112,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,115,116,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",117,117,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",118,119,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,125,125,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,123,123,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",121,121,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,127,129,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,113,114,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",111,111,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,124,124,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",130,131,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,01e4e4e,Jake Wharton,Remove legacy support,146,147,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,141,141,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",135,140,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",132,133,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,134,134,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,122,122,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,142,145,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,126,126,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,148,148,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,150,150,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,149,149,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,157,158,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,151,151,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,155,155,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,152,153,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,154,154,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,159,159,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,156,156,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",171,171,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,160,170,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",179,179,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,177,178,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,174,174,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",173,173,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,172,172,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,182,182,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",180,181,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,185,185,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,187,187,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,189,191,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",183,183,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,175,176,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,203,203,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",192,193,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,186,186,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",197,202,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,01e4e4e,Jake Wharton,Remove legacy support,208,209,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",194,195,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,184,184,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,210,210,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,204,207,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,188,188,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,196,196,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,213,213,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,212,212,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,211,211,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,219,219,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,216,218,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,220,220,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,221,222,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,214,215,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,223,223,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,235,235,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,224,234,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,236,245,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,247,256,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",257,257,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,260,260,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,258,258,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",259,259,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,272,272,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",269,269,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,246,246,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,263,268,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,275,275,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,277,277,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,244a9e7,Jake Wharton,Support listeners with multiple methods.,279,280,,,0,2014-04-19 05:25:44,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",270,271,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",273,273,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,261,262,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,276,276,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,274,274,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemSelectedTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,278,278,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,2,2,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,4,4,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,9,9,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,10,10,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,12,12,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,309a631,Jake Wharton,Add test for missing callback return type.,11,11,,,0,2014-04-14 16:50:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",8,8,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,13,13,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,21,21,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,26,27,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,6,6,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,3,3,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",14,15,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",16,16,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",18,20,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,22,25,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,28,28,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,30,30,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,17,17,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,31,31,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,29,29,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,34,34,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,32,33,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,37,38,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",47,47,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,35,35,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,40,46,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,36,36,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,39,39,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,58,58,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,48,48,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",59,59,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",56,57,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,53,54,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",55,55,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,63,63,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,61,61,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,50,50,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,65,66,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",49,49,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,67,67,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,51,52,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,82,82,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",70,72,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",68,69,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,60,60,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,87,88,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,62,62,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",74,81,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,64,64,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,83,86,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,73,73,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,91,91,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,89,89,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,92,92,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,90,90,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,95,95,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,93,94,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,98,99,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",108,108,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,101,107,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,96,96,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,100,100,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,109,109,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,97,97,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,119,119,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,111,111,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,114,115,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",116,116,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,124,124,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",110,110,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",117,118,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,122,122,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",120,120,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,126,127,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,112,113,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,128,128,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,141,141,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",131,133,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",129,130,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,123,123,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,147,148,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,121,121,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",135,140,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,125,125,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",143,146,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",149,149,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",152,152,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,142,142,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",151,151,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,134,134,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,150,150,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,155,155,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,161,164,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,153,154,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,158,159,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,156,156,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,160,160,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,157,157,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",168,168,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,166,167,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,169,169,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",176,176,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,179,179,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",177,178,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,171,171,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7bf9bb3,Jake Wharton,"Revert ""Revert ""Merge pull request #898 from kbsriram/erasure-fix""""  This reverts commit 619dab674b90ce2fe22846bbe1753b8d5459f379.",165,165,,,1,2017-07-04 04:15:04,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,174,175,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",170,170,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,184,184,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,182,182,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",180,180,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,186,187,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,188,188,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,172,173,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,201,201,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",189,190,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",195,200,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",191,193,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,183,183,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,207,208,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",209,209,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,181,181,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",203,206,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",212,212,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",211,211,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,185,185,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,202,202,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,194,194,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,216,216,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,210,210,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,215,215,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,218,219,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,213,214,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,221,224,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7bf9bb3,Jake Wharton,"Revert ""Revert ""Merge pull request #898 from kbsriram/erasure-fix""""  This reverts commit 619dab674b90ce2fe22846bbe1753b8d5459f379.",225,225,,,1,2017-07-04 04:15:04,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,217,217,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,220,220,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",229,229,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,226,228,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,240,240,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,233,234,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,230,230,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",237,237,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,232,232,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",238,239,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,243,243,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,246,247,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,249,250,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,235,236,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",231,231,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,264,264,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,251,251,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",241,241,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,269,270,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,242,242,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",252,263,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,244,245,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,265,268,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,272,272,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,271,271,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,273,273,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,248,248,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,274,275,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,277,277,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",291,291,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,276,276,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,283,283,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,286,290,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,284,285,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",293,293,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2390311,Jake Wharton,"Emit single-argument overloads for View, Activity, and Dialog.",278,281,,,0,2017-01-21 18:46:34,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,282,282,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,292,292,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,01e4e4e,Jake Wharton,Remove legacy support,324,325,Jake Wharton,9b59a14,0,2019-01-04 00:15:29,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,304,304,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,294,294,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,295,296,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,331,331,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,297,298,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,299,303,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,305,323,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,326,328,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,334,343,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,329,330,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",350,350,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,353,353,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,332,332,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",354,354,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",351,352,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,356,356,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,358,358,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,333,333,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",344,344,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,360,362,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,348,349,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,2f8d900,Jake Wharton,Allow anyone to bind listeners to root view.,345,345,,,0,2016-08-23 16:52:35,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,346,347,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,359,359,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,370,370,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",371,371,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,373,374,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,372,372,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,357,357,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,378,378,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,355,355,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,376,377,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,365,365,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,363,364,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,367,369,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,392,392,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,375,375,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,395,395,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,366,366,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,394,394,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,7b1363d,Jake Wharton,Add @OnItemClick listener.,417,418,,,0,2013-11-19 21:42:17,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",393,393,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,381,383,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,385,391,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,379,380,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,396,415,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,384,384,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/OnItemClickTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,416,416,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,16,16,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,6,7,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,1,3,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,14,15,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,9,12,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,8,8,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,4,5,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,25,25,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,19,20,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,13,13,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,17,18,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,22,24,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,29,30,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,21,21,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,26,27,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,31,31,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,40,40,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,32,33,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,34,34,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,28,28,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,35,36,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,37,37,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,39,39,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,44,44,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,38,38,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,41,43,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,45,45,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,47,47,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",46,46,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,49,49,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,52,52,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",53,54,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,50,50,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,58,58,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,55,56,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,48,48,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,51,51,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,61,62,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,59,60,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,64,66,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,57,57,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,67,68,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,63,63,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,72,74,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,75,75,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,69,70,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,80,81,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,76,77,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,71,71,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,79,79,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,82,82,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,83,84,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,91,91,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,85,85,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,78,78,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,90,90,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,86,87,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,88,88,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,95,96,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,89,89,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,98,98,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,92,94,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",97,97,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,103,103,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,101,101,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",104,105,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,100,100,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,99,99,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,106,107,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,109,109,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,111,111,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,102,102,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,128,129,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,113,114,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,139,139,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,110,110,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,177,178,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,108,108,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,188,188,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,112,112,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,115,126,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,140,174,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,127,127,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,130,138,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,175,176,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,179,187,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,212,214,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,189,211,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,248,248,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,215,217,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,245,245,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,219,244,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,246,247,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,258,258,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,262,263,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,218,218,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,249,250,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,259,260,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,251,257,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,265,266,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,264,264,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,273,273,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,267,267,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,261,261,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,272,272,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,270,270,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,268,269,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,271,271,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,277,278,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,280,280,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,282,282,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,274,276,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,281,281,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",279,279,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,288,289,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,283,283,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,285,285,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,291,291,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",286,287,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,293,293,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,298,299,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,295,297,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,284,284,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,292,292,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,303,303,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,304,306,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,311,312,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,300,302,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,294,294,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,290,290,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,307,307,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,313,313,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,314,315,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,322,322,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,308,309,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,321,321,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,316,316,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,323,325,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,310,310,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,327,327,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,326,326,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,329,329,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,331,331,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,320,320,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,319,319,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,334,334,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,317,318,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,333,333,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,339,339,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",335,336,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,332,332,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,340,340,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",328,328,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,337,338,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,343,344,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,341,342,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,330,330,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,359,359,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,346,348,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,355,358,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,363,364,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,349,350,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,365,365,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,351,353,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,362,362,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,360,361,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,345,345,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,374,374,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,369,370,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,366,367,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,354,354,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,372,372,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,368,368,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,378,379,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,373,373,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,382,382,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,384,384,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,371,371,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,386,386,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",387,388,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,383,383,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,381,381,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,375,377,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,392,392,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",380,380,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,389,390,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,391,391,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,396,398,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,385,385,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,394,394,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,425,433,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,408,416,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,393,393,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,417,424,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,452,453,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,399,407,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,443,451,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,395,395,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,434,442,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,460,463,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,457,459,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,467,469,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,454,455,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,464,465,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,472,472,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,456,456,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,477,480,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,470,471,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,466,466,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,474,476,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,481,482,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,484,486,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,473,473,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,483,483,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,487,488,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,489,491,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,502,502,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,496,500,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,493,495,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,518,519,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,529,529,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,01e4e4e,Jake Wharton,Remove legacy support,566,567,Gautam Korlam,f28b013,0,2019-01-04 00:15:29,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,492,492,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,c16a510,Jake Wharton,Inline null-filtering method to arrayOf  And rename the methods to be more clear about their filtering behavior.,577,577,Gautam Korlam,f28b013,0,2018-09-06 22:56:28,2018-04-13 15:23:50
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),503,516,,,1,2018-04-13 15:23:50,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,501,501,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),520,528,,,1,2018-04-13 15:23:50,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,7d31098,Jake Wharton,@BindViews,600,600,,,0,2016-04-23 18:32:56,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),517,517,,,1,2018-04-13 15:23:50,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),565,565,,,1,2018-04-13 15:23:50,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),530,564,,,1,2018-04-13 15:23:50,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),568,576,,,1,2018-04-13 15:23:50,
butterknife-runtime/src/test/java/butterknife/BindViewsTest.java,f28b013,Gautam Korlam,Fix R scanner behavior for array values (#1250),578,599,,,1,2018-04-13 15:23:50,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,1,2,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,8,9,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,4,4,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,10,11,,,0,2015-11-24 17:04:10,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",5,5,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,12,13,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",7,7,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,14,14,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",17,18,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",19,20,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,28,28,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",15,16,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,ece57bd,Jared Burrows,Update gradle,3,3,,,0,2016-05-21 04:27:10,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",22,27,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",30,31,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,32,33,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,6,6,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",37,37,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",34,35,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",38,38,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,29,29,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,41,41,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,44,45,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,42,42,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,46,46,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,47,60,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,39,40,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",63,63,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,36,36,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,21,21,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,62,62,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,61,61,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,43,43,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",74,74,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,65,65,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,77,78,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,80,80,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,69,73,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,67,67,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",75,76,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,82,82,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,84,85,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",64,64,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,86,86,,,0,2015-11-24 17:04:10,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,66,66,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,81,81,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,88,88,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,89,89,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,79,79,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,68,68,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,87,87,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,91,91,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,108,108,,,0,2015-11-24 17:04:10,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,83,83,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,92,96,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,110,110,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,112,113,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",111,111,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",114,115,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,109,109,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,98,103,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,90,90,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,104,107,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",118,118,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,97,97,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,121,121,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,117,117,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,124,125,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,116,116,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,127,135,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,119,120,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,122,122,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,123,123,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,137,137,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,149,149,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,140,141,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,126,126,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",136,136,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,142,145,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,150,150,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,146,148,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,151,151,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,153,153,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,152,152,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,138,139,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,156,156,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,154,155,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,157,157,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,159,159,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,161,161,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,175,176,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",178,178,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,158,158,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",179,180,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,163,172,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,181,181,,,0,2015-11-24 17:04:10,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,184,184,,,0,2015-11-24 17:04:10,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,173,174,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,d4c2754,Serj Lotutovici,Support for unbinder inheritance.,186,186,,,0,2015-11-24 17:04:10,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,188,188,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,177,177,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,162,162,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,191,192,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,185,185,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",189,190,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",193,193,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,194,194,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,182,182,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,160,160,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",195,195,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,205,205,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",196,198,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,202,203,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,183,183,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",204,204,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",206,206,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",199,201,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,214,215,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,217,217,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",216,216,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",211,213,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",207,210,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,218,218,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,187,187,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",219,219,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",220,221,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",223,224,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,228,229,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",230,230,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",233,236,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,231,231,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",237,239,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,222,222,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",225,227,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,243,243,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",232,232,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",242,242,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",245,248,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",244,244,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,240,241,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",254,254,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,252,253,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,255,255,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",257,260,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",249,251,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",261,263,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,264,265,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",266,266,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",256,256,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,267,267,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",269,269,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,273,273,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",270,272,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,268,268,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",274,275,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",276,280,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,284,284,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,281,282,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",283,283,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,285,285,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,4919bba,Jake Wharton,"Compile 28, support lib 28, androidx 1",288,288,Jake Wharton,9b59a14,0,2018-09-22 20:58:58,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",290,291,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",287,287,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,289,289,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",286,286,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,300,302,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",292,294,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,303,303,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,299,299,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,305,305,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,295,298,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,309,311,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,312,312,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,308,308,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,304,304,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,313,313,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,307,307,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,306,306,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",319,319,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,318,318,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,317,317,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,320,320,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",324,325,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,316,316,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",326,326,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,332,333,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,314,315,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,331,331,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,327,330,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,322,322,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,334,334,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,323,323,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",321,321,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,335,335,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,338,340,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,337,337,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,336,336,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,342,342,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,346,346,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",349,349,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",350,351,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,347,347,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",352,352,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,355,355,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,348,348,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,343,344,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,341,341,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,345,345,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,358,359,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",360,360,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",362,362,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,353,353,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,354,354,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,356,356,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,357,357,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,363,364,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,370,370,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,368,368,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,369,369,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,365,365,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,372,374,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,361,361,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,378,378,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,366,366,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,367,367,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,371,371,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,375,377,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,388,389,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,380,383,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,384,385,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,390,390,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,386,386,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",396,396,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,391,391,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",397,398,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",399,399,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,393,394,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,404,405,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,379,379,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,387,387,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,400,401,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,403,403,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,392,392,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,395,395,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",412,412,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,402,402,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",415,415,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,406,406,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",413,414,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,420,421,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,411,411,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,407,407,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,409,410,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,416,417,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,408,408,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",428,428,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,419,419,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",429,430,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,418,418,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",431,431,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,423,423,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,02c740e,Jake Wharton,Formatting things.,433,433,,,0,2016-04-02 05:07:55,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,422,422,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,424,424,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,436,437,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,432,432,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",439,439,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,425,426,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",441,441,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,427,427,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,435,435,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,438,438,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,434,434,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,447,447,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,440,440,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,449,449,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,446,446,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,442,443,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,445,445,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a2e54d7,Donald Chai,Stringify resource IDs using Integer.toHexString to avoid issues with hyphens for resource IDs larger than 0x7FFFFFFF.,444,444,,,0,2018-01-18 04:11:52,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,448,448,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,453,458,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,450,451,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,461,463,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,459,459,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,467,467,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,464,466,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,55dc47e,Jake Wharton,Depend directly on support-compat for resource binding.,460,460,,,0,2016-09-08 03:33:17,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,471,474,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,01e4e4e,Jake Wharton,Remove legacy support,479,480,Jake Wharton,4919bba,0,2019-01-04 00:15:29,2018-09-22 20:58:58
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,475,476,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a2e54d7,Donald Chai,Stringify resource IDs using Integer.toHexString to avoid issues with hyphens for resource IDs larger than 0x7FFFFFFF.,452,452,,,0,2018-01-18 04:11:52,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a2e54d7,Donald Chai,Stringify resource IDs using Integer.toHexString to avoid issues with hyphens for resource IDs larger than 0x7FFFFFFF.,468,469,,,0,2018-01-18 04:11:52,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,477,477,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,470,470,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,481,481,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,483,483,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,478,478,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,482,482,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,484,485,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,4919bba,Jake Wharton,"Compile 28, support lib 28, androidx 1",492,492,Jake Wharton,9b59a14,0,2018-09-22 20:58:58,2018-09-06 16:48:44
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,488,488,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,487,487,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,486,486,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,489,489,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,493,495,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",501,501,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0c9e92b,Jake Wharton,Change binding to accept either a View or a Context.  This will make referring to it directly much more simple.,491,491,,,0,2016-08-23 03:56:34,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,490,490,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",502,503,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",504,505,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",508,514,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,499,499,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",516,516,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",518,518,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,500,500,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,496,498,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,517,517,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,515,515,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,522,522,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,506,507,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,524,524,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,520,520,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,525,525,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,523,523,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,836fe69,Serj Lotutovici,Move unbind method to Unbinder interface.    - Split bind and unbind logic in two separate abstractions.   - Null method bindings in generated unbind method.   - Update webpage to reflect the change.,529,529,,,0,2015-10-09 22:39:33,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",528,528,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,519,519,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,526,526,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,0792044,Jake Wharton,Always generate a binding class.,521,521,,,0,2016-08-23 05:02:09,
butterknife-runtime/src/test/java/butterknife/UnbinderTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,527,527,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,5,5,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,2,2,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,3946d1e,Jake Wharton,Move all utility classes into the 'internal' package.,1,1,,,0,2015-09-30 02:54:34,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,8,8,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",6,6,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,3,3,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,11,11,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",9,9,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,14,14,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",10,10,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,29,30,Jake Wharton,72405e7,0,2019-01-04 00:15:29,2018-09-10 21:04:06
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,12,12,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,15,15,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,7,7,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,13,13,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,74,75,Jake Wharton,72405e7,0,2019-01-04 00:15:29,2018-09-10 21:04:06
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,4,4,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d611631,Jake Wharton,Emit less methods for final types.,101,101,,,0,2016-04-26 01:50:23,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,16,27,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,28,28,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,100,100,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d05a1bb,Jake Wharton,Omit debug information in non-debuggable builds.  This is a configuration-based opt-in behavior.,31,54,,,0,2017-07-18 06:28:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,b59929d,Jake Wharton,Emit a cast for non-View bindings in the specialized single binding case.,55,71,,,0,2017-08-09 22:01:50,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,104,104,,,0,2016-05-06 23:51:17,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d611631,Jake Wharton,Emit less methods for final types.,103,103,,,0,2016-04-26 01:50:23,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,b59929d,Jake Wharton,Emit a cast for non-View bindings in the specialized single binding case.,72,73,,,0,2017-08-09 22:01:50,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,b59929d,Jake Wharton,Emit a cast for non-View bindings in the specialized single binding case.,76,99,,,0,2017-08-09 22:01:50,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,102,102,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,105,107,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d611631,Jake Wharton,Emit less methods for final types.,140,140,,,0,2016-04-26 01:50:23,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,108,109,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,137,137,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,111,136,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,138,139,,,0,2016-08-19 00:19:35,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,141,142,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,110,110,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,153,153,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,143,144,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d611631,Jake Wharton,Emit less methods for final types.,149,149,,,0,2016-04-26 01:50:23,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,146,148,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,150,151,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,154,154,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,152,152,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,145,145,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,156,156,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,157,159,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,155,155,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,160,160,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,162,162,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d611631,Jake Wharton,Emit less methods for final types.,171,171,,,0,2016-04-26 01:50:23,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,161,161,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,163,163,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,164,168,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,169,169,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d611631,Jake Wharton,Emit less methods for final types.,174,175,,,0,2016-04-26 01:50:23,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",172,173,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d611631,Jake Wharton,Emit less methods for final types.,177,177,,,0,2016-04-26 01:50:23,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,170,170,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,179,179,,,0,2016-05-06 23:51:17,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,183,183,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,181,182,,,0,2016-05-06 23:51:17,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,178,178,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,176,176,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,184,185,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,180,180,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,186,187,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,200,200,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,204,205,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,189,199,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,201,202,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,206,206,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,188,188,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,208,208,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,203,203,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,209,209,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,207,207,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,210,211,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,212,212,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,214,214,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,216,217,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,219,219,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,215,215,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,213,213,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",218,218,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,221,221,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,220,220,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,222,222,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,224,224,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,227,227,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,231,231,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",225,226,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,228,229,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,223,223,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,234,234,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,230,230,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,232,232,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,233,233,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,237,237,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,235,236,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,238,239,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,240,240,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,242,245,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,250,250,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,241,241,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,248,248,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",251,252,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,246,247,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,253,253,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,256,256,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,249,249,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,258,258,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,254,254,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,859a9c7,Jake Wharton,Generate overloaded binding mechanism when parent bindings present.,260,261,,,0,2016-05-07 00:53:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,257,257,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,262,262,,,0,2016-05-06 23:51:17,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,255,255,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,271,271,,,0,2016-05-06 23:51:17,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,275,276,Jake Wharton,72405e7,0,2019-01-04 00:15:29,2018-09-10 21:04:06
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,265,266,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,263,264,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,268,270,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,259,259,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,267,267,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,272,273,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,277,277,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,285,285,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,274,274,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,283,283,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,279,279,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,280,280,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,278,278,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,281,282,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,286,286,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",289,289,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,287,288,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,284,284,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,290,290,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,295,295,,,0,2016-05-06 23:51:17,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,293,293,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,292,292,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,301,301,,,0,2016-05-06 23:51:17,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,294,294,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7529a20,Jake Wharton,Do not guess TypeName when we can retrieve from element.,298,299,,,0,2016-05-06 23:51:17,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,305,306,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,303,303,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",296,297,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,307,307,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,291,291,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,317,317,,,0,2015-01-20 10:09:08,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,304,304,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,310,311,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,320,320,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,302,302,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,308,309,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,321,322,Jake Wharton,72405e7,0,2019-01-04 00:15:29,2018-09-10 21:04:06
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,313,316,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,300,300,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,323,323,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,325,325,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,318,319,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,312,312,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,331,331,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,326,326,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,330,330,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",335,335,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,324,324,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,338,338,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,327,328,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,333,334,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,332,332,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,329,329,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,344,344,,,0,2015-01-20 10:09:08,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,337,337,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,336,336,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,347,347,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,339,339,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",341,341,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,340,340,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,349,349,,,0,2015-01-20 10:09:08,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,353,353,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8fc5134,Emil Sjölander,Allow interface types in addition to views.  This is the large functional change. Prior to this commit interfaces were not allowed as they did not have android.view.View as their super type. This allows injecting views into interface types such as Checkable or any interface types your define yourself. The compiler will still complain if trying to inject a view into something that is neither a view subclass or an interface.,351,352,,,0,2015-01-20 10:09:08,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",345,345,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",342,343,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,356,358,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,363,363,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,354,355,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,364,365,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,368,369,Jake Wharton,72405e7,0,2019-01-04 00:15:29,2018-09-10 21:04:06
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,348,348,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,367,367,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,346,346,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,350,350,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,370,370,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,360,362,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,372,372,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,359,359,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,366,366,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,378,378,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,376,376,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,373,373,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,383,383,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,371,371,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",382,382,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,374,375,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,380,381,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,385,385,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,57f6310,Jake Wharton,Support generic types by using their upper bound.,391,391,,,0,2014-04-14 08:01:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,377,377,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",392,392,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",388,388,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,379,379,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,394,394,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,386,386,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,397,398,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,400,402,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",389,390,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,387,387,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,384,384,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,413,413,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,399,399,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,403,404,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,409,412,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,417,418,Jake Wharton,72405e7,0,2019-01-04 00:15:29,2018-09-10 21:04:06
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,395,396,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,405,407,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,414,414,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,393,393,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",415,416,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",423,423,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",419,420,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",422,422,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,408,408,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,426,426,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,427,427,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,429,430,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,421,421,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,424,425,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,432,440,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",441,441,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,431,431,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",442,442,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,443,443,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,428,428,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,453,453,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",451,452,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",454,454,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,445,445,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,456,456,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,458,458,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",450,450,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,460,461,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,447,449,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,444,444,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,455,455,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,446,446,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,478,479,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,457,457,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),462,464,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),465,467,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,459,459,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),474,477,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),469,473,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,468,468,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),480,481,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),483,483,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),484,484,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,482,482,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),487,487,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,485,486,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),490,491,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,488,488,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,498,501,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a8ba6c5,Christian Becker,Change & reuse Finder.castView(…),494,497,,,0,2016-06-29 14:43:16,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",502,502,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,489,489,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,492,493,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",511,511,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,504,504,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,514,514,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",512,513,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,506,506,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,518,519,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,517,517,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",515,515,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,521,523,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,508,510,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",503,503,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,505,505,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,534,534,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,507,507,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",535,535,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,526,527,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,524,525,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,537,537,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,539,540,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,529,533,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,516,516,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7f0f4f0,Tom Reznik,Support any annotation named @Nullable.,541,541,,,0,2015-03-14 05:04:59,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,520,520,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,7f0f4f0,Tom Reznik,Support any annotation named @Nullable.,551,551,,,0,2015-03-14 05:04:59,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,536,536,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,538,538,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,542,543,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,528,528,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,547,550,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,555,556,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,544,545,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,552,553,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,557,557,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,546,546,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,559,559,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,558,558,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,554,554,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,560,561,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,562,562,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,563,563,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,564,564,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,566,567,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,565,565,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",574,574,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,569,569,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,577,577,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,571,571,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,572,572,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",568,568,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",578,578,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,582,582,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",575,576,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,580,580,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,584,586,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,570,570,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,573,573,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,579,579,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,581,581,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,587,587,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,588,588,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,589,590,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,583,583,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,610,610,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,592,592,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,614,615,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,593,600,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,591,591,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,601,601,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,608,609,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,602,607,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,611,612,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,616,616,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,618,618,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,619,619,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,613,613,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,617,617,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,622,622,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,620,621,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,624,624,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,623,623,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,626,627,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,625,625,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,629,629,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,631,631,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",634,634,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,632,632,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",635,636,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",628,628,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,641,641,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",637,637,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,630,630,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,633,633,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,638,639,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,644,644,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,640,640,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,642,642,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,643,643,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,647,647,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,645,646,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,648,648,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,652,654,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",660,660,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,649,649,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,663,663,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,658,658,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,650,650,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,666,666,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,668,668,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,651,651,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,670,672,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",661,662,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,659,659,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,655,657,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,664,664,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,667,667,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,665,665,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,674,674,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,673,673,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,690,690,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,669,669,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,675,676,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,678,678,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",696,696,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,687,687,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,679,686,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,700,701,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,688,689,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,697,698,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,691,695,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,702,702,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,704,704,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,677,677,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,705,705,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,699,699,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,703,703,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,708,708,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,706,707,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,710,710,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,712,713,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,709,709,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,711,711,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,715,715,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,718,718,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,717,717,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,e3c2835,Jake Wharton,"Add @CallSuper on non-final, base binding unbind() methods.",714,714,,,0,2016-08-26 22:41:13,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,01e4e4e,Jake Wharton,Remove legacy support,727,727,Jake Wharton,b59929d,0,2019-01-04 00:15:29,2017-08-09 22:01:50
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,716,716,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,720,723,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,719,719,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,724,725,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,726,726,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,730,730,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,728,728,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,729,729,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,731,732,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,733,733,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,734,734,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,735,735,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,738,740,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,53a4d91,Jake Wharton,Remove Finder and always rely on a View as the source.,737,737,,,0,2016-08-23 02:02:21,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,749,749,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,1bc7bc1,Zac Sweers,"Proper/optimized unbinder inheritance and new bind() API  * Proper/optimized unbinder inheritance and new bind() API  ## Structure  This is two parts folded into one: - Unbinder inheritance is now fully functional and optimized   - By optimized, I mean that generated classes won't generate unnecessary extra methods or unbinder classes unless absolutely necessary, avoiding a lot of generated cruft. Rules around this include:     - If top level, no viewbindings, just return a singleton NOP with no generated unbinder extras     - If top leve, has viewbindings, then it generates unbinder extras and returns the real implementation     - In an inheritance tree, unbinder classes and creators are only generated at the first descendant to need it     - Future descendants will extend from the highest available unbinder for the createUnbinder parametrization, while extending the most recent unbinder class for its Unbinder parent.     - viewbinding-less intermediary classes won't generate unbinder classes or createUnbinder() methods   - This works by analyzing the tree in the processor. After we find all the top-level classes, we recursively set up the required info in all their descendants to allow BinderClass to generate the appropriate code depending on the unbinder situation in the parent(s) it extends.   - There's a pretty extensive set of test classes in the unbinder package that should cover all the edge cases. Planning to add one more for viewbindings in the base class, though I've manually confirmed this works properly as well. - All the bind() methods now return the corresponding ViewUnbinder, rather than injecting the ViewBinder on a separate field.  ## Remaining work  - Updating existing tests for the new API and generated code structure. This is just tedium, and I wanted to get this up for code/API review before going through all of it. - ViewUnbinder or go back to Unbinder? - `@CheckResult` on bind() calls or no? - You tell me?  * Delete unnecessary test  No longer applicable with the API change  * Fix ordering of return  * Fix unbinder test  * ButterKnife classname  * Set and LinkedHashSet  * Periods and complete sentences  * Static import for Truth  * Use nestedClass  * Proper codestyle for new unbinder test classes  * ViewUnbinder -> Unbinder  * Remove Unbinder parameterization  * Move Unbinder to top level, rename generated unbinders to InnerUnbinder  This makes Unbinder a first class citizen since people will be receiving instances of it, and also distinguishes generated inner classes to better differentiate.  * Rename NOP_UNBINDER too  * Check ID before assuming we can concatenate it to the field name  This is done by providing a ""unique"" ID getter that will use the ID if there is one or ""Original"" if there's no binding ID  * Update tests for new API and unbinder  * Fix checkstyle  * Target Java 7 for compiler  * Move NOP_UNBINDER to Unbinder.EMPTY  * Fix code styles  These accidentally happened  * Make InnerUnbinder classes protected  * Remove unnecessary parametrization of createUnbinder return type",746,746,,,1,2016-04-02 04:53:49,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,736,736,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,91cb862,Jake Wharton,Break apart view binder class from binding.,744,744,,,0,2016-06-20 06:18:53,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,752,752,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,755,756,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6def755,Jake Wharton,Remove all integration tests in favor of unit tests for the annotation processor.,758,759,,,0,2013-11-18 10:18:52,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,760,760,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,741,743,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,6f1d717,Jake Wharton,"Improve performance of generated code (part 1).  This switches each generated class to directly instantiate its unbinder (if needed, or the nearest parent's) and use static dispatch upward for binding views.",747,748,,,0,2016-05-07 04:46:58,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,769,769,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a7ad5a7,Jake Wharton,Remove generics on generated bindings.,745,745,,,0,2016-09-08 16:46:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,750,750,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,772,773,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,771,771,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,775,778,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,787,787,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,753,754,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",770,770,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,790,791,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,c47bc6d,Jake Wharton,Add @UiThread to generated class constructors.  This ensures that if they're used directly they're used from the proper thread.,751,751,,,0,2016-08-26 22:05:39,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,789,789,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,774,774,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,761,768,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,aff64e8,Jake Wharton,Fail if trying to generate an injector in an invalid package.,793,795,,,0,2014-08-02 06:42:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,796,796,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,807,807,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",788,788,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,29551fc,Jake Wharton,Remove the need for the binder class.,757,757,,,0,2016-08-23 15:56:29,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,810,811,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,813,813,,,0,2013-11-21 01:57:59,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,814,815,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,809,809,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,816,816,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,792,792,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,779,786,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",808,808,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,824,824,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,812,812,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,827,827,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,826,826,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,797,806,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,831,832,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",825,825,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,833,833,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,819,819,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,842,842,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,817,818,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,845,845,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,844,844,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,821,823,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fc5fa74,Jake Wharton,Rewrite handling of listener generation to be more dynamic.,848,848,,,0,2013-11-21 01:57:59,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",843,843,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,851,851,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,849,850,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,828,829,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,834,841,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,860,860,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,820,820,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,846,847,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,852,853,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,862,862,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",861,861,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,863,863,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,866,867,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,8619d3a,Jake Wharton,Optimize required binding check to only happen once and only when needed.,868,868,,,0,2013-11-18 13:25:42,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,854,855,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,857,859,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,830,830,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,877,877,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,864,864,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,879,879,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",878,878,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,880,880,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,856,856,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,874,876,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,871,872,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,883,883,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,869,870,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,ca233ea,Jake Wharton,Add @InjectViews annotation for collection and array fields.,884,884,,,0,2014-04-14 07:02:54,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,881,881,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,885,885,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,895,895,,,1,2014-10-05 08:27:59,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",896,896,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,865,865,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,873,873,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,898,899,,,1,2014-10-05 08:27:59,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,888,889,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,897,897,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,d1025dc,Tom Reznik,Error if the same view ID is injected twice on the same class.,902,902,,,1,2014-10-05 08:27:59,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,903,903,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,904,904,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,959e4ba,Jake Wharton,Rename @Bind to @BindView to match others.,900,900,,,0,2016-04-23 07:46:57,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,886,887,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,882,882,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,918,918,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,891,894,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,922,923,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,920,920,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dcb669b,Tom Reznik,Support binding listeners to root view without an ID,925,927,,,0,2014-10-27 21:43:11,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,0ffaf1f,Jake Wharton,Rename annotations to use 'Bind' verb.,921,921,,,0,2015-06-27 23:50:27,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a47fee9,Dandre Allison,Replace maven-invoker tests with Test-Compile tests.,929,929,,,0,2013-10-17 15:08:56,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,890,890,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,59061ca,Jake Wharton,"Explicitly use Truth, replace ancient FEST.",919,919,,,0,2015-10-01 03:10:22,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,a2a6913,Christian Becker,Eliminate Joiner in tests,905,917,,,0,2016-06-21 11:31:05,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,dd1a79e,Christian Becker,Use compilesWithoutWarnings in tests,924,924,,,0,2016-06-29 14:20:48,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,9f88ba0,Jake Wharton,Remove test subjects from extending Activity.  This used to be required and affect code output but it no longer does so.,901,901,,,0,2017-01-20 23:53:20,
butterknife-runtime/src/test/java/butterknife/BindViewTest.java,fe631f4,Daniel McCartney,let @BindView(s) play nicely with elsewhere generated Views,928,928,,,0,2016-08-19 00:19:35,
