File,Commit,Author,Commit Message,Start Line,End Line,Previous Author,Previous Commit,Keyword Label,Commit Date,Previous Commit Date
bash_completionsV2_test.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),15,33,,,0,2022-06-16 00:08:16,
bash_completionsV2_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
bash_completionsV2_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
active_help_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
active_help_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
active_help_test.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),15,400,,,0,2022-06-16 00:08:16,
active_help.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
active_help.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
active_help.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),28,37,,,0,2022-06-16 00:08:16,
active_help.go,e63925d,Ville Skyttä,"Add env variable to suppress completion descriptions on create (#1938)  COBRA_COMPLETION_DESCRIPTIONS=0  or  <PROGRAM>_COMPLETION_DESCRIPTIONS=0 can now be used to disable shell completion descriptions.",26,27,Ville Skyttä,22953d8,0,2023-12-17 18:50:59,2023-10-29 18:06:51
active_help.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),15,19,,,0,2022-06-16 00:08:16,
active_help.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),39,43,,,0,2022-06-16 00:08:16,
active_help.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",38,38,Ville Skyttä,e63925d,0,2025-02-09 16:06:07,2023-12-17 18:50:59
active_help.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),20,25,,,0,2022-06-16 00:08:16,
active_help.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),58,58,,,0,2022-06-16 00:08:16,
active_help.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),60,60,,,0,2022-06-16 00:08:16,
active_help.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),45,56,,,0,2022-06-16 00:08:16,
active_help.go,e63925d,Ville Skyttä,"Add env variable to suppress completion descriptions on create (#1938)  COBRA_COMPLETION_DESCRIPTIONS=0  or  <PROGRAM>_COMPLETION_DESCRIPTIONS=0 can now be used to disable shell completion descriptions.",59,59,Ville Skyttä,22953d8,0,2023-12-17 18:50:59,2023-10-29 18:06:51
active_help.go,22953d8,Ville Skyttä,"Replace all non-alphanumerics in active help env var program prefix (#1940)  * Replace all non-alphanumerics in active help env var program prefix  There are other characters besides the dash that are fine in program names, but are problematic in environment variable names. These include (but are not limited to) period, space, and non-ASCII letters.  * Another change in docs to mention non-ASCII-alphanumeric instead of just dash",44,44,,,0,2023-10-29 18:06:51,
active_help.go,22953d8,Ville Skyttä,"Replace all non-alphanumerics in active help env var program prefix (#1940)  * Replace all non-alphanumerics in active help env var program prefix  There are other characters besides the dash that are fine in program names, but are problematic in environment variable names. These include (but are not limited to) period, space, and non-ASCII letters.  * Another change in docs to mention non-ASCII-alphanumeric instead of just dash",57,57,,,0,2023-10-29 18:06:51,
args.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Unai Martinez-Corral,70e53f6,0,2022-09-16 11:55:56,2022-09-10 13:33:34
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,15,18,,,1,2017-07-23 07:57:27,
args.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",24,24,Unai Martinez-Corral,6d978a9,1,2022-12-25 20:08:39,2022-09-16 11:55:56
args.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Yash Ladha,bf11ab6,0,2023-03-06 02:28:31,2022-12-25 20:08:39
args.go,099c5ae,Albert Nigmatzianov,Add dots in comments of args.go,34,34,Daniel Nephin,f20b4e9,0,2017-11-09 06:56:43,2017-07-23 07:57:27
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,20,23,,,1,2017-07-23 07:57:27,
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,25,33,,,1,2017-07-23 07:57:27,
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,35,40,,,1,2017-07-23 07:57:27,
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,42,48,,,1,2017-07-23 07:57:27,
args.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",55,55,Unai Martinez-Corral,9e6b58a,1,2023-11-23 17:24:33,2023-03-06 02:28:31
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,51,52,,,1,2017-07-23 07:57:27,
args.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,19,19,Daniel Nephin,f20b4e9,0,2020-04-10 19:56:28,2017-07-23 07:57:27
args.go,099c5ae,Albert Nigmatzianov,Add dots in comments of args.go,41,41,,,0,2017-11-09 06:56:43,
args.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",49,50,Bruce Downs,993cc53,0,2022-09-10 13:33:34,2019-08-01 20:25:21
args.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,53,54,Daniel Nephin,f20b4e9,0,2020-04-10 19:56:28,2017-07-23 07:57:27
args.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",57,57,Unai Martinez-Corral,9e6b58a,1,2023-11-23 17:24:33,2023-03-06 02:28:31
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,59,59,,,1,2017-07-23 07:57:27,
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,61,67,,,1,2017-07-23 07:57:27,
args.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,58,58,Daniel Nephin,f20b4e9,0,2020-04-10 19:56:28,2017-07-23 07:57:27
args.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,60,60,Daniel Nephin,f20b4e9,0,2020-04-10 19:56:28,2017-07-23 07:57:27
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,69,72,,,1,2017-07-23 07:57:27,
args.go,099c5ae,Albert Nigmatzianov,Add dots in comments of args.go,68,68,Daniel Nephin,f20b4e9,0,2017-11-09 06:56:43,2017-07-23 07:57:27
args.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,56,56,Daniel Nephin,f20b4e9,0,2020-04-10 19:56:28,2017-07-23 07:57:27
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,84,92,,,1,2017-07-23 07:57:27,
args.go,099c5ae,Albert Nigmatzianov,Add dots in comments of args.go,83,83,Daniel Nephin,f20b4e9,0,2017-11-09 06:56:43,2017-07-23 07:57:27
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,74,82,,,1,2017-07-23 07:57:27,
args.go,099c5ae,Albert Nigmatzianov,Add dots in comments of args.go,73,73,Daniel Nephin,f20b4e9,0,2017-11-09 06:56:43,2017-07-23 07:57:27
args.go,099c5ae,Albert Nigmatzianov,Add dots in comments of args.go,93,93,,,0,2017-11-09 06:56:43,
args.go,45e521e,Nelz,"enable composing PositionalArgs (#896)  * enable composing PositionalArgs * ExactValidArgs slated for removal * tests and docs * rename to MatchAll",112,123,Marc Khouzam,a684a6d,0,2021-12-07 22:38:00,2020-04-10 19:56:28
args.go,099c5ae,Albert Nigmatzianov,Add dots in comments of args.go,103,103,,,0,2017-11-09 06:56:43,
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,104,111,,,1,2017-07-23 07:57:27,
args.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,94,102,,,1,2017-07-23 07:57:27,
args.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",124,131,,,0,2022-09-10 13:33:34,
command_notwin.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Unai Martinez-Corral,4fd30b6,0,2022-09-16 11:55:56,2021-08-26 03:18:53
command_notwin.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
command_notwin.go,193b182,Frank Schroeder,Issue #195: Compile mousetrap only on Windows  * Create command_win.go and command_notwin.go for windows only code * Move call to mousetrap hook into separate preExecHook() function,16,19,,,1,2015-11-24 00:52:16,
command_notwin.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,20,20,,,0,2016-03-31 13:53:34,
command_notwin.go,4fd30b6,Unai Martinez-Corral,"ci: test golang 1.16.x and 1.17.x too (#1425)  * ci: test golang 1.16.x too  * ci: style  * ci: test golang 1.17.x too  * bump go.mod to 1.15  * run gofmt",15,15,,,0,2021-08-26 03:18:53,
cobra_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
cobra_test.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",18,22,Denis,0dec88e,0,2025-01-27 14:43:43,2023-12-30 13:40:15
cobra_test.go,bbb8e6e,spf13,initial commit of cobra w/test suite,16,17,,,0,2013-09-03 22:54:51,
cobra_test.go,bbb8e6e,spf13,initial commit of cobra w/test suite,23,23,,,0,2013-09-03 22:54:51,
cobra_test.go,0556e5f,spf13,Moving cobra_test into package cobra for easier testing,15,15,,,0,2013-09-24 21:04:00,
cobra_test.go,5b121bc,akutz,"Template Function Injection  This patch enables developers to add one to many template functions that can be used by custom Usage and Help templates. Here is an example that is included in the file cobra_test.go as the test function named TestAddTemplateFunctions:      AddTemplateFunc(""t"", func() bool { return true })     AddTemplateFuncs(template.FuncMap{         ""f"": func() bool { return false },         ""h"": func() string { return ""Hello,"" },         ""w"": func() string { return ""world."" }})      const usage = ""Hello, world.""      c := &Command{}     c.SetUsageTemplate(`{{if t}}{{h}}{{end}}{{if f}}{{h}}{{end}} {{w}}`)      if us := c.UsageString(); us != usage {         t.Errorf(""c.UsageString() != \""%s\"", is \""%s\"""", usage, us)     }  In the above example four functions are added to the template function map used when the Usage and Help text is generated from the templates that enable custom logic as well as data injection during template execution.",24,24,,,1,2015-09-01 03:36:55,
cobra_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Unai Martinez-Corral,652c755,0,2022-09-16 11:55:56,2021-02-08 00:08:50
cobra_test.go,bbb8e6e,spf13,initial commit of cobra w/test suite,25,26,,,0,2013-09-03 22:54:51,
cobra_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,27,32,Diego Becciolini,0dacccf,1,2021-02-08 00:08:50,2017-10-02 10:00:25
cobra_test.go,0dec88e,Denis,Add tests for funcs in cobra.go (#2094),48,229,Unai Martinez-Corral,9e6b58a,0,2023-12-30 13:40:15,2023-03-06 02:28:31
cobra_test.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",42,42,Eric Paris,cfecf13,0,2015-09-08 23:01:13,2015-09-08 16:32:15
cobra_test.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",36,37,Eric Paris,cfecf13,0,2015-09-08 23:01:13,2015-09-08 16:32:15
cobra_test.go,5b121bc,akutz,"Template Function Injection  This patch enables developers to add one to many template functions that can be used by custom Usage and Help templates. Here is an example that is included in the file cobra_test.go as the test function named TestAddTemplateFunctions:      AddTemplateFunc(""t"", func() bool { return true })     AddTemplateFuncs(template.FuncMap{         ""f"": func() bool { return false },         ""h"": func() string { return ""Hello,"" },         ""w"": func() string { return ""world."" }})      const usage = ""Hello, world.""      c := &Command{}     c.SetUsageTemplate(`{{if t}}{{h}}{{end}}{{if f}}{{h}}{{end}} {{w}}`)      if us := c.UsageString(); us != usage {         t.Errorf(""c.UsageString() != \""%s\"", is \""%s\"""", usage, us)     }  In the above example four functions are added to the template function map used when the Usage and Help text is generated from the templates that enable custom logic as well as data injection during template execution.",40,41,,,1,2015-09-01 03:36:55,
cobra_test.go,5b121bc,akutz,"Template Function Injection  This patch enables developers to add one to many template functions that can be used by custom Usage and Help templates. Here is an example that is included in the file cobra_test.go as the test function named TestAddTemplateFunctions:      AddTemplateFunc(""t"", func() bool { return true })     AddTemplateFuncs(template.FuncMap{         ""f"": func() bool { return false },         ""h"": func() string { return ""Hello,"" },         ""w"": func() string { return ""world."" }})      const usage = ""Hello, world.""      c := &Command{}     c.SetUsageTemplate(`{{if t}}{{h}}{{end}}{{if f}}{{h}}{{end}} {{w}}`)      if us := c.UsageString(); us != usage {         t.Errorf(""c.UsageString() != \""%s\"", is \""%s\"""", usage, us)     }  In the above example four functions are added to the template function map used when the Usage and Help text is generated from the templates that enable custom logic as well as data injection during template execution.",33,35,,,1,2015-09-01 03:36:55,
cobra_test.go,5b121bc,akutz,"Template Function Injection  This patch enables developers to add one to many template functions that can be used by custom Usage and Help templates. Here is an example that is included in the file cobra_test.go as the test function named TestAddTemplateFunctions:      AddTemplateFunc(""t"", func() bool { return true })     AddTemplateFuncs(template.FuncMap{         ""f"": func() bool { return false },         ""h"": func() string { return ""Hello,"" },         ""w"": func() string { return ""world."" }})      const usage = ""Hello, world.""      c := &Command{}     c.SetUsageTemplate(`{{if t}}{{h}}{{end}}{{if f}}{{h}}{{end}} {{w}}`)      if us := c.UsageString(); us != usage {         t.Errorf(""c.UsageString() != \""%s\"", is \""%s\"""", usage, us)     }  In the above example four functions are added to the template function map used when the Usage and Help text is generated from the templates that enable custom logic as well as data injection during template execution.",38,39,,,1,2015-09-01 03:36:55,
cobra_test.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",230,301,Denis,0dec88e,0,2025-01-27 14:43:43,2023-12-30 13:40:15
cobra_test.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,46,47,,,1,2017-04-20 13:38:50,
cobra_test.go,65c8acb,Albert Nigmatzianov,Improve tests,43,45,,,0,2017-11-09 06:56:43,
args_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,15,17,,,0,2017-11-09 06:56:43,
args_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Unai Martinez-Corral,70e53f6,0,2022-09-16 11:55:56,2022-09-10 13:33:34
args_test.go,45e521e,Nelz,"enable composing PositionalArgs (#896)  * enable composing PositionalArgs * ExactValidArgs slated for removal * tests and docs * rename to MatchAll",18,18,bpdunni,f619abc,0,2021-12-07 22:38:00,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,34,34,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",35,35,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",23,33,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,19,22,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",37,37,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,36,36,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,38,43,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,54,54,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,45,47,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",48,53,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",44,44,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,59,59,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",56,58,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,61,65,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",75,75,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",66,73,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,74,74,,,0,2017-11-09 06:56:43,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",55,55,bpdunni,f619abc,0,2022-09-10 13:33:34,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,76,76,,,0,2017-11-09 06:56:43,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",60,60,bpdunni,f619abc,0,2022-09-10 13:33:34,2018-10-21 14:01:21
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",77,79,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,85,87,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",88,95,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,96,96,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,80,80,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",97,97,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",81,84,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",99,99,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,98,98,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,100,102,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,103,103,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,105,105,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",106,106,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",104,104,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,107,109,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",112,117,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",110,111,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",118,118,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",140,141,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",120,139,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",119,119,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",142,143,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",144,149,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",150,150,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",153,153,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",151,152,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",154,155,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,158,158,,,0,2017-11-09 06:56:43,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",156,157,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,160,160,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",161,161,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,162,163,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",159,159,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",164,183,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,184,184,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,186,186,,,0,2017-11-09 06:56:43,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",190,208,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",187,187,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",185,185,bpdunni,f619abc,0,2021-11-16 22:20:18,2018-10-21 14:01:21
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,188,189,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,210,210,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,212,213,,,0,2017-11-09 06:56:43,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",214,233,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,234,234,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",211,211,,,0,2021-11-16 22:20:18,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,236,236,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",209,209,,,0,2021-11-16 22:20:18,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",240,258,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,238,239,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,260,260,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",235,235,,,0,2021-11-16 22:20:18,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",237,237,,,0,2021-11-16 22:20:18,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,262,263,,,0,2017-11-09 06:56:43,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",264,283,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,284,284,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",261,261,,,0,2021-11-16 22:20:18,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,288,289,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",259,259,,,0,2021-11-16 22:20:18,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",290,308,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,286,286,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,310,310,,,0,2017-11-09 06:56:43,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",314,317,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",285,285,,,0,2021-11-16 22:20:18,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",287,287,,,0,2021-11-16 22:20:18,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",309,309,,,0,2021-11-16 22:20:18,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,312,313,,,0,2017-11-09 06:56:43,
args_test.go,f619abc,bpdunni,Added ExactValidArgs (#765),318,319,,,0,2018-10-21 14:01:21,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",320,322,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",326,327,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,f619abc,bpdunni,Added ExactValidArgs (#765),324,325,,,0,2018-10-21 14:01:21,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",311,311,,,0,2021-11-16 22:20:18,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",323,323,,,0,2021-11-16 22:20:18,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",329,329,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",332,333,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",328,328,,,0,2021-11-16 22:20:18,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,334,334,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,336,336,,,0,2017-11-09 06:56:43,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,338,339,,,0,2017-11-09 06:56:43,
args_test.go,f619abc,bpdunni,Added ExactValidArgs (#765),330,331,,,0,2018-10-21 14:01:21,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",340,358,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",337,337,,,0,2021-11-16 22:20:18,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",364,383,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,360,360,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",335,335,,,0,2021-11-16 22:20:18,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,362,363,,,0,2017-11-09 06:56:43,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",359,359,,,0,2021-11-16 22:20:18,
args_test.go,9e1d6f1,Unai Martinez-Corral,"args_test: add helper functions  (#1426)  * args_test: add helper function expectSuccess * args_test: add helper function getCommand * args_test: add additional helper functions * noArgsWithArgs * validWithInvalidArgs * minimumNArgsWithLessArgs * maximumNArgsWithMoreArgs * exactArgsWithInvalidCount * rangeArgsWithInvalidCount",361,361,,,0,2021-11-16 22:20:18,
args_test.go,18eefcd,Albert Nigmatzianov,Add tests for args.go,384,438,,,0,2017-11-09 06:56:43,
args_test.go,45e521e,Nelz,"enable composing PositionalArgs (#896)  * enable composing PositionalArgs * ExactValidArgs slated for removal * tests and docs * rename to MatchAll",439,486,,,0,2021-12-07 22:38:00,
args_test.go,70e53f6,Unai Martinez-Corral,"Deprecate ExactValidArgs() and test combinations of args validators (#1643)  * deprecate ExactValidArgs in favour of MatchAll(OnlyValidArgs, ...) * test combinations of args validators * adjust docs",488,513,Marc Khouzam,94e552d,0,2022-09-10 13:33:34,2022-03-18 01:36:47
args_test.go,94e552d,Marc Khouzam,"Add backwards-compatibility tests for legacyArgs() (#1547)  These tests make sure we don't break backwards-compatibility with respect to the current behaviour of legacyArgs().  See #1500 for the back-story.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",487,487,,,0,2022-03-18 01:36:47,
args_test.go,94e552d,Marc Khouzam,"Add backwards-compatibility tests for legacyArgs() (#1547)  These tests make sure we don't break backwards-compatibility with respect to the current behaviour of legacyArgs().  See #1500 for the back-story.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",514,541,,,0,2022-03-18 01:36:47,
command_win.go,193b182,Frank Schroeder,Issue #195: Compile mousetrap only on Windows  * Create command_win.go and command_notwin.go for windows only code * Move call to mousetrap hook into separate preExecHook() function,16,20,,,1,2015-11-24 00:52:16,
command_win.go,193b182,Frank Schroeder,Issue #195: Compile mousetrap only on Windows  * Create command_win.go and command_notwin.go for windows only code * Move call to mousetrap hook into separate preExecHook() function,22,29,,,1,2015-11-24 00:52:16,
command_win.go,c46add8,Albert Nigmatzianov,Add ability to disable mousetrap  Fix #486 Close #383 (no progress there),31,31,,,1,2017-07-11 12:08:33,
command_win.go,193b182,Frank Schroeder,Issue #195: Compile mousetrap only on Windows  * Create command_win.go and command_notwin.go for windows only code * Move call to mousetrap hook into separate preExecHook() function,30,30,,,1,2015-11-24 00:52:16,
command_win.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Unai Martinez-Corral,4fd30b6,0,2022-09-16 11:55:56,2021-08-26 03:18:53
command_win.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
command_win.go,67fc483,Willi Eggeling,"added variable to allow configuration of mousetrap message duration (#809)  new variable MousetrapDisplayDuration allows to modify the default display duration of 5s, or to completely disable the timeout and wait for the user to press the return key.",21,21,Albert Nigmatzianov,c46add8,0,2019-03-21 00:05:52,2017-07-11 12:08:33
command_win.go,4fd30b6,Unai Martinez-Corral,"ci: test golang 1.16.x and 1.17.x too (#1425)  * ci: test golang 1.16.x too  * ci: style  * ci: test golang 1.17.x too  * bump go.mod to 1.15  * run gofmt",15,15,Frank Schroeder,193b182,0,2021-08-26 03:18:53,2015-11-24 00:52:16
command_win.go,193b182,Frank Schroeder,Issue #195: Compile mousetrap only on Windows  * Create command_win.go and command_notwin.go for windows only code * Move call to mousetrap hook into separate preExecHook() function,39,41,,,1,2015-11-24 00:52:16,
command_win.go,193b182,Frank Schroeder,Issue #195: Compile mousetrap only on Windows  * Create command_win.go and command_notwin.go for windows only code * Move call to mousetrap hook into separate preExecHook() function,32,32,,,1,2015-11-24 00:52:16,
command_win.go,67fc483,Willi Eggeling,"added variable to allow configuration of mousetrap message duration (#809)  new variable MousetrapDisplayDuration allows to modify the default display duration of 5s, or to completely disable the timeout and wait for the user to press the return key.",33,38,,,0,2019-03-21 00:05:52,
cobra.go,bbb8e6e,spf13,initial commit of cobra w/test suite,2,5,,,0,2013-09-03 22:54:51,
cobra.go,6067837,spf13,"Adding support for a custom output, default to stderr",22,22,spf13,8d87882,0,2013-09-11 13:52:15,2013-09-11 13:52:15
cobra.go,bbb8e6e,spf13,initial commit of cobra w/test suite,8,20,,,0,2013-09-03 22:54:51,
cobra.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Yash Ladha,f25a3c6,0,2023-03-06 02:28:31,2022-12-15 10:39:50
cobra.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",21,21,spf13,62fb674,0,2014-01-17 12:36:57,2013-09-24 16:47:29
cobra.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,Yuval Goldberg,d689184,0,2022-09-16 11:55:56,2022-09-11 12:25:22
cobra.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,23,23,Bruce Downs,51f06c7,1,2021-02-08 00:08:50,2019-08-01 20:25:21
cobra.go,347767f,Eric Paris,"Partial revert of 4d2c4af 'Improve template mechanism' (#439)  There were template functions which we defined and others started using. Although we no longer want those functions, since others use them, deleting them breaks our API.  Putting those (unused) functions back.",24,25,Albert Nigmatzianov,4d2c4af,0,2017-05-09 19:07:05,2017-05-08 12:22:04
cobra.go,67fc483,Willi Eggeling,"added variable to allow configuration of mousetrap message duration (#809)  new variable MousetrapDisplayDuration allows to modify the default display duration of 5s, or to completely disable the timeout and wait for the user to press the return key.",28,28,Jonathan Hall,c156af3,0,2019-03-21 00:05:52,2017-12-06 18:18:45
cobra.go,bbb8e6e,spf13,initial commit of cobra w/test suite,26,26,,,0,2013-09-03 22:54:51,
cobra.go,bbb8e6e,spf13,initial commit of cobra w/test suite,30,31,,,0,2013-09-03 22:54:51,
cobra.go,8858462,spf13,Add decent usage message,27,27,spf13,6067837,0,2013-09-12 14:37:35,2013-09-11 13:52:15
cobra.go,347767f,Eric Paris,"Partial revert of 4d2c4af 'Improve template mechanism' (#439)  There were template functions which we defined and others started using. Although we no longer want those functions, since others use them, deleting them breaks our API.  Putting those (unused) functions back.",33,39,Albert Nigmatzianov,4d2c4af,0,2017-05-09 19:07:05,2017-05-08 12:22:04
cobra.go,8af2b2b,Eric Paris,No newline after Flags in usage  The flags usage template from pflags has a trailing \n. We need to include a newline in case there are no flags in our template. This will trim the newline from the end of the flags from pflag and we can do it right outselves.,29,29,akutz,5b121bc,0,2015-09-11 22:45:28,2015-09-01 03:36:55
cobra.go,5b121bc,akutz,"Template Function Injection  This patch enables developers to add one to many template functions that can be used by custom Usage and Help templates. Here is an example that is included in the file cobra_test.go as the test function named TestAddTemplateFunctions:      AddTemplateFunc(""t"", func() bool { return true })     AddTemplateFuncs(template.FuncMap{         ""f"": func() bool { return false },         ""h"": func() string { return ""Hello,"" },         ""w"": func() string { return ""world."" }})      const usage = ""Hello, world.""      c := &Command{}     c.SetUsageTemplate(`{{if t}}{{h}}{{end}}{{if f}}{{h}}{{end}} {{w}}`)      if us := c.UsageString(); us != usage {         t.Errorf(""c.UsageString() != \""%s\"", is \""%s\"""", usage, us)     }  In the above example four functions are added to the template function map used when the Usage and Help text is generated from the templates that enable custom logic as well as data injection during template execution.",40,41,Ahsanul Haque,e1e66f7,1,2015-09-01 03:36:55,2014-12-19 04:10:25
cobra.go,7cebca3,spf13,Add support for an InitializeConfig method as defined on Cobra by the user,44,44,spf13,6067837,0,2014-06-27 19:45:51,2013-09-11 13:52:15
cobra.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,32,32,Fabiano Franz,16b7ba5,0,2016-03-31 13:53:34,2016-03-15 21:22:20
cobra.go,93d1913,Yann Soubeyrand,"Add OnFinalize method (#1788)  This method is the OnInitialize counterpart. Like OnInitialize which allows loading the configuration before each command is executed, OnFinalize allows saving the configuration after each command has been executed.",43,43,Unai Martinez-Corral,6d978a9,0,2022-10-03 14:52:50,2022-09-16 11:55:56
cobra.go,864687a,spf13,"Adding ""OnInitialize()"" method instead of directly setting a property. Now can have multiple initializers.",42,42,spf13,6067837,0,2014-07-11 14:57:53,2013-09-11 13:52:15
cobra.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",46,49,Taavi Väänänen,2246fa8,0,2023-10-22 00:36:12,2023-06-13 15:12:49
cobra.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",50,51,Unai Martinez-Corral,652c755,0,2022-09-11 12:25:22,2021-02-08 00:08:50
cobra.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",45,45,Unai Martinez-Corral,652c755,0,2022-09-11 12:25:22,2021-02-08 00:08:50
cobra.go,5da9888,bogem,Edit documentation,54,54,bogem,101d434,0,2016-08-30 17:14:27,2016-08-30 16:58:52
cobra.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",55,55,Unai Martinez-Corral,652c755,0,2022-09-11 12:25:22,2021-02-08 00:08:50
cobra.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",53,53,bogem,101d434,1,2017-01-24 16:30:45,2016-08-30 16:58:52
cobra.go,2246fa8,Taavi Väänänen,"Fix grammar: 'allows to' (#1978)  The use in generated bash completion files is getting flagged by Lintian (the Debian package linting tool).  Signed-off-by: Taavi Väänänen <hi@taavi.wtf>",52,52,Unai Martinez-Corral,9e6b58a,1,2023-06-13 15:12:49,2023-03-06 02:28:31
cobra.go,5da9888,bogem,Edit documentation,57,58,bogem,101d434,0,2016-08-30 17:14:27,2016-08-30 16:58:52
cobra.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",59,62,Unai Martinez-Corral,652c755,0,2022-09-11 12:25:22,2021-02-08 00:08:50
cobra.go,b1e90a7,spf13,Making prefix matching opt in.,56,56,spf13,6067837,0,2014-10-07 20:15:19,2013-09-11 13:52:15
cobra.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",64,67,Taavi Väänänen,2246fa8,0,2023-10-22 00:36:12,2023-06-13 15:12:49
cobra.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",63,63,bep,beda194,0,2016-06-15 14:27:34,2015-04-01 19:14:40
cobra.go,67fc483,Willi Eggeling,"added variable to allow configuration of mousetrap message duration (#809)  new variable MousetrapDisplayDuration allows to modify the default display duration of 5s, or to completely disable the timeout and wait for the user to press the return key.",77,80,Albert Nigmatzianov,65c8acb,0,2019-03-21 00:05:52,2017-11-09 06:56:43
cobra.go,51f06c7,Bruce Downs,Correct all complaints from golint  * i.e. * go get golang.org/x/lint/golint * go list ./... | xargs golint,81,81,Albert Nigmatzianov,65c8acb,1,2019-08-01 20:25:21,2017-11-09 06:56:43
cobra.go,c46add8,Albert Nigmatzianov,Add ability to disable mousetrap  Fix #486 Close #383 (no progress there),73,76,Albert Nigmatzianov,4d2c4af,1,2017-07-11 12:08:33,2017-05-08 12:22:04
cobra.go,c46add8,Albert Nigmatzianov,Add ability to disable mousetrap  Fix #486 Close #383 (no progress there),68,71,Oleg Atamanenko,0f056af,1,2017-07-11 12:08:33,2017-01-24 16:30:45
cobra.go,67fc483,Willi Eggeling,"added variable to allow configuration of mousetrap message duration (#809)  new variable MousetrapDisplayDuration allows to modify the default display duration of 5s, or to completely disable the timeout and wait for the user to press the return key.",82,82,Albert Nigmatzianov,65c8acb,0,2019-03-21 00:05:52,2017-11-09 06:56:43
cobra.go,51f06c7,Bruce Downs,Correct all complaints from golint  * i.e. * go get golang.org/x/lint/golint * go list ./... | xargs golint,72,72,Oleg Atamanenko,0f056af,1,2019-08-01 20:25:21,2017-01-24 16:30:45
cobra.go,5b121bc,akutz,"Template Function Injection  This patch enables developers to add one to many template functions that can be used by custom Usage and Help templates. Here is an example that is included in the file cobra_test.go as the test function named TestAddTemplateFunctions:      AddTemplateFunc(""t"", func() bool { return true })     AddTemplateFuncs(template.FuncMap{         ""f"": func() bool { return false },         ""h"": func() string { return ""Hello,"" },         ""w"": func() string { return ""world."" }})      const usage = ""Hello, world.""      c := &Command{}     c.SetUsageTemplate(`{{if t}}{{h}}{{end}}{{if f}}{{h}}{{end}} {{w}}`)      if us := c.UsageString(); us != usage {         t.Errorf(""c.UsageString() != \""%s\"", is \""%s\"""", usage, us)     }  In the above example four functions are added to the template function map used when the Usage and Help text is generated from the templates that enable custom logic as well as data injection during template execution.",85,88,spf13,6067837,1,2015-09-01 03:36:55,2013-09-11 13:52:15
cobra.go,c156af3,Jonathan Hall,Explain OnInitialize better in the GoDoc (#594),97,98,Albert Nigmatzianov,4d2c4af,0,2017-12-06 18:18:45,2017-05-08 12:22:04
cobra.go,864687a,spf13,"Adding ""OnInitialize()"" method instead of directly setting a property. Now can have multiple initializers.",99,99,,,0,2014-07-11 14:57:53,
cobra.go,5da9888,bogem,Edit documentation,83,84,spf13,6067837,0,2016-08-30 17:14:27,2013-09-11 13:52:15
cobra.go,5da9888,bogem,Edit documentation,90,90,spf13,6067837,0,2016-08-30 17:14:27,2013-09-11 13:52:15
cobra.go,5b121bc,akutz,"Template Function Injection  This patch enables developers to add one to many template functions that can be used by custom Usage and Help templates. Here is an example that is included in the file cobra_test.go as the test function named TestAddTemplateFunctions:      AddTemplateFunc(""t"", func() bool { return true })     AddTemplateFuncs(template.FuncMap{         ""f"": func() bool { return false },         ""h"": func() string { return ""Hello,"" },         ""w"": func() string { return ""world."" }})      const usage = ""Hello, world.""      c := &Command{}     c.SetUsageTemplate(`{{if t}}{{h}}{{end}}{{if f}}{{h}}{{end}} {{w}}`)      if us := c.UsageString(); us != usage {         t.Errorf(""c.UsageString() != \""%s\"", is \""%s\"""", usage, us)     }  In the above example four functions are added to the template function map used when the Usage and Help text is generated from the templates that enable custom logic as well as data injection during template execution.",91,96,spf13,6067837,1,2015-09-01 03:36:55,2013-09-11 13:52:15
cobra.go,347767f,Eric Paris,"Partial revert of 4d2c4af 'Improve template mechanism' (#439)  There were template functions which we defined and others started using. Although we no longer want those functions, since others use them, deleting them breaks our API.  Putting those (unused) functions back.",109,159,Albert Nigmatzianov,4d2c4af,0,2017-05-09 19:07:05,2017-05-08 12:22:04
cobra.go,93d1913,Yann Soubeyrand,"Add OnFinalize method (#1788)  This method is the OnInitialize counterpart. Like OnInitialize which allows loading the configuration before each command is executed, OnFinalize allows saving the configuration after each command has been executed.",103,108,Unai Martinez-Corral,6d978a9,0,2022-10-03 14:52:50,2022-09-16 11:55:56
cobra.go,101d434,bogem,Simplify OnInitialize func,100,100,spf13,b1e90a7,0,2016-08-30 16:58:52,2014-10-07 20:15:19
cobra.go,347767f,Eric Paris,"Partial revert of 4d2c4af 'Improve template mechanism' (#439)  There were template functions which we defined and others started using. Although we no longer want those functions, since others use them, deleting them breaks our API.  Putting those (unused) functions back.",163,172,Eric Paris,8af2b2b,0,2017-05-09 19:07:05,2015-09-11 22:45:28
cobra.go,b6cb395,Théotime Lévêque,Fix typo in docstring (#360),89,89,spf13,6067837,1,2017-04-17 17:03:07,2013-09-11 13:52:15
cobra.go,7cebca3,spf13,Add support for an InitializeConfig method as defined on Cobra by the user,101,102,,,0,2014-06-27 19:45:51,
cobra.go,8af2b2b,Eric Paris,No newline after Flags in usage  The flags usage template from pflags has a trailing \n. We need to include a newline in case there are no flags in our template. This will trim the newline from the end of the flags from pflag and we can do it right outselves.,160,162,,,0,2015-09-11 22:45:28,
cobra.go,8858462,spf13,Add decent usage message,189,189,spf13,36e08ff,0,2013-09-12 14:37:35,2013-09-04 04:15:18
cobra.go,5da9888,bogem,Edit documentation,173,173,Eric Paris,8af2b2b,0,2016-08-30 17:14:27,2015-09-11 22:45:28
cobra.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",174,174,,,0,2014-01-17 12:36:57,
cobra.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",179,188,Ville Skyttä,3d8ac43,0,2025-01-27 14:43:43,2023-11-23 17:24:33
cobra.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",177,178,,,0,2014-01-17 12:36:57,
cobra.go,b4087da,Fabiano Franz,"Allows command suggestions along with ""unknown command"" errors",190,190,,,0,2015-09-14 02:35:10,
cobra.go,b4087da,Fabiano Franz,"Allows command suggestions along with ""unknown command"" errors",192,199,,,0,2015-09-14 02:35:10,
cobra.go,f25a3c6,Yash Ladha,"fix: conflict import name with variable (#1879)  `template` is an import in `cobra.go` file and also used as a variable name, which masks the library in the scope of that function.",175,176,Albert Nigmatzianov,4d2c4af,1,2022-12-15 10:39:50,2017-05-08 12:22:04
cobra.go,5da9888,bogem,Edit documentation,191,191,,,0,2016-08-30 17:14:27,
cobra.go,b4087da,Fabiano Franz,"Allows command suggestions along with ""unknown command"" errors",200,223,,,0,2015-09-14 02:35:10,
cobra.go,65c8acb,Albert Nigmatzianov,Improve tests,224,232,,,0,2017-11-09 06:56:43,
cobra.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,233,246,,,1,2021-02-08 00:08:50,
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,18,23,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Lopez Rubio,02a0d2f,0,2022-09-16 11:55:56,2020-08-26 15:18:51
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,26,28,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,15,17,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,29,29,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,25,25,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,24,24,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,02a0d2f,Marc Lopez Rubio,"doc: GenMarkdown skip Synopsis on empty long cmd (#1207)  This patch modifies the GenMarkdownCustom to skip writing a Synopsis header with the `cmd.Short` duplicated both before and after the header.  Instead, it only writes the `### Synopsis` header and the paragraph when a `cmd.Long` has some kind of content in it.  Adds `TestGenMdDocWithNoLongOrSynopsis` as the test case.  Signed-off-by: Marc Lopez <marc5.12@outlook.com>",44,44,Daniel Martí,5fa1003,1,2020-08-26 15:18:51,2016-01-06 10:49:16
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,63,64,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,55,57,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,62,62,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,45,54,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,58,58,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,59,61,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,30,43,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,75,76,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,65,74,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,77,77,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,78,83,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,85,89,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,84,84,Daniel Martí,5fa1003,0,2017-11-09 06:56:43,2016-01-06 10:49:16
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,95,97,,,0,2017-11-09 06:56:43,
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,98,100,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,02a0d2f,Marc Lopez Rubio,"doc: GenMarkdown skip Synopsis on empty long cmd (#1207)  This patch modifies the GenMarkdownCustom to skip writing a Synopsis header with the `cmd.Short` duplicated both before and after the header.  Instead, it only writes the `### Synopsis` header and the paragraph when a `cmd.Long` has some kind of content in it.  Adds `TestGenMdDocWithNoLongOrSynopsis` as the test case.  Signed-off-by: Marc Lopez <marc5.12@outlook.com>",90,94,Daniel Martí,5fa1003,1,2020-08-26 15:18:51,2016-01-06 10:49:16
doc/cmd_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,101,103,,,0,2017-11-09 06:56:43,
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,104,104,,,1,2015-12-24 14:01:59,
doc/cmd_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,105,105,,,1,2015-12-24 14:01:59,
bash_completionsV2.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Gyanendra Mishra,3daa4b9,0,2023-03-06 02:28:31,2023-02-25 20:57:12
bash_completionsV2.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Ville Skyttä,f911c0b,0,2022-09-16 11:55:56,2022-08-13 21:44:47
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",41,41,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",68,68,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",15,40,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",42,59,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,2246fa8,Taavi Väänänen,"Fix grammar: 'allows to' (#1978)  The use in generated bash completion files is getting flagged by Lintian (the Debian package linting tool).  Signed-off-by: Taavi Väänänen <hi@taavi.wtf>",60,60,Unai Martinez-Corral,9e6b58a,1,2023-06-13 15:12:49,2023-03-06 02:28:31
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",61,67,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",69,77,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",78,78,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",91,94,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",90,90,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",79,89,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,104,104,Ville Skyttä,badcce1,0,2023-02-25 20:57:12,2022-10-17 19:24:27
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",105,105,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",96,103,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,4f0facb,Ville Skyttä,"style(bash-v2): out is not an array variable, do not refer to it as such (#1681)  Even though this to my surprise works, it doesn't accomplish anything but some confusion. Remove it.",95,95,,,0,2022-04-28 02:27:52,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",111,112,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",106,106,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",113,118,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",107,110,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,119,131,Ville Skyttä,badcce1,0,2023-02-25 20:57:12,2022-10-17 19:24:27
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",132,133,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",134,141,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",148,148,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",147,147,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),151,151,Ville Skyttä,5b11656,0,2022-06-16 00:08:16,2022-05-18 00:57:08
bash_completionsV2.go,4ba5566,Ville Skyttä,"fix(bash): nounset unbound file filter variable on empty extension (#2228)  Happens at least if a flag is marked as filename, with """" given as extensions.",149,149,Marc Khouzam,41b26ec,1,2025-02-02 00:35:34,2025-01-30 00:28:46
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",150,150,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",152,152,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",154,159,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),153,153,Ville Skyttä,5b11656,0,2022-06-16 00:08:16,2022-05-18 00:57:08
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",164,165,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",161,162,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",163,163,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",166,172,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,3fed3ef,Marc Khouzam,"Support different bash completion options (#1509)  https://github.com/spf13/cobra/issues/1508  Based on the documentation found here https://www.gnu.org/software/bash/manual/html_node/Commands-For-Completion.html we remove descriptions for the following completion types: - menu-complete - menu-complete-backward - insert-completions  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",173,173,Marc Khouzam,b361960,0,2021-12-07 22:59:41,2021-06-30 21:24:58
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),142,146,Marc Khouzam,b361960,0,2022-06-16 00:08:16,2021-06-30 21:24:58
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",174,177,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),178,179,Ville Skyttä,5b11656,0,2022-06-16 00:08:16,2022-05-18 00:57:08
bash_completionsV2.go,41b26ec,Marc Khouzam,"Print ActiveHelp for bash along other completions (#2076)  In the bash shell we used to print ActiveHelp messages on every tab-press. In the example below, notice the ""Command help"" line which is ActiveHelp:  bash-5.1$ tanzu context u[tab] Command help: Configure and manage contexts for the Tanzu CLI  bash-5.1$ tanzu context u[tab] Command help: Configure and manage contexts for the Tanzu CLI  bash-5.1$ tanzu context u unset  (Unset the active context so that it is not used by default.) use    (Set the context to be used by default) bash-5.1$ tanzu context u  Above, on the first [tab] press, only the ActiveHelp is printed. On the second [tab] press, the ActiveHelp is printed again, followed by a re-print of the command-line, followed by the completions choices.  The separation between ActiveHelp and completion choices makes the ActiveHelp harder to see. Furthermore, I find the double printing of the ActiveHelp string to look bad.  Note that for zsh, the UX is different and that ActiveHelp messages are printed at the same time as the completion choices.  This commit aligns the UX for ActiveHelp in bash with the one for zsh: if there are other completions to be shown, the ActiveHelp messages are printed at the same time.  New behaviour: 1- ActiveHelp is no longer printed on the first [tab] press. This is    better aligned with bash's standard approach. 2- ActiveHelp is printed on the second [tab] press, above the completion    choices, with a `--` delimiter. 3- If there are no completion choices, the `--` delimiter is omitted.  This behaviour is the same as what is done for zsh (except that for zsh the first [tab] press immediately shows completion choices).  Below is the above example, but using this commit. Notice the more concise and easier to read completion output:  bash-5.1$ tanzu context u[tab][tab] Command help: Configure and manage contexts for the Tanzu CLI -- unset  (Unset the active context so that it is not used by default.) use    (Set the context to be used by default) bash-5.1$ tanzu context u  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",186,231,Toni Kangas,09d5664,0,2025-01-30 00:28:46,2025-01-23 02:28:30
bash_completionsV2.go,41b26ec,Marc Khouzam,"Print ActiveHelp for bash along other completions (#2076)  In the bash shell we used to print ActiveHelp messages on every tab-press. In the example below, notice the ""Command help"" line which is ActiveHelp:  bash-5.1$ tanzu context u[tab] Command help: Configure and manage contexts for the Tanzu CLI  bash-5.1$ tanzu context u[tab] Command help: Configure and manage contexts for the Tanzu CLI  bash-5.1$ tanzu context u unset  (Unset the active context so that it is not used by default.) use    (Set the context to be used by default) bash-5.1$ tanzu context u  Above, on the first [tab] press, only the ActiveHelp is printed. On the second [tab] press, the ActiveHelp is printed again, followed by a re-print of the command-line, followed by the completions choices.  The separation between ActiveHelp and completion choices makes the ActiveHelp harder to see. Furthermore, I find the double printing of the ActiveHelp string to look bad.  Note that for zsh, the UX is different and that ActiveHelp messages are printed at the same time as the completion choices.  This commit aligns the UX for ActiveHelp in bash with the one for zsh: if there are other completions to be shown, the ActiveHelp messages are printed at the same time.  New behaviour: 1- ActiveHelp is no longer printed on the first [tab] press. This is    better aligned with bash's standard approach. 2- ActiveHelp is printed on the second [tab] press, above the completion    choices, with a `--` delimiter. 3- If there are no completion choices, the `--` delimiter is omitted.  This behaviour is the same as what is done for zsh (except that for zsh the first [tab] press immediately shows completion choices).  Below is the above example, but using this commit. Notice the more concise and easier to read completion output:  bash-5.1$ tanzu context u[tab][tab] Command help: Configure and manage contexts for the Tanzu CLI -- unset  (Unset the active context so that it is not used by default.) use    (Set the context to be used by default) bash-5.1$ tanzu context u  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",180,184,Toni Kangas,09d5664,0,2025-01-30 00:28:46,2025-01-23 02:28:30
bash_completionsV2.go,41b26ec,Marc Khouzam,"Print ActiveHelp for bash along other completions (#2076)  In the bash shell we used to print ActiveHelp messages on every tab-press. In the example below, notice the ""Command help"" line which is ActiveHelp:  bash-5.1$ tanzu context u[tab] Command help: Configure and manage contexts for the Tanzu CLI  bash-5.1$ tanzu context u[tab] Command help: Configure and manage contexts for the Tanzu CLI  bash-5.1$ tanzu context u unset  (Unset the active context so that it is not used by default.) use    (Set the context to be used by default) bash-5.1$ tanzu context u  Above, on the first [tab] press, only the ActiveHelp is printed. On the second [tab] press, the ActiveHelp is printed again, followed by a re-print of the command-line, followed by the completions choices.  The separation between ActiveHelp and completion choices makes the ActiveHelp harder to see. Furthermore, I find the double printing of the ActiveHelp string to look bad.  Note that for zsh, the UX is different and that ActiveHelp messages are printed at the same time as the completion choices.  This commit aligns the UX for ActiveHelp in bash with the one for zsh: if there are other completions to be shown, the ActiveHelp messages are printed at the same time.  New behaviour: 1- ActiveHelp is no longer printed on the first [tab] press. This is    better aligned with bash's standard approach. 2- ActiveHelp is printed on the second [tab] press, above the completion    choices, with a `--` delimiter. 3- If there are no completion choices, the `--` delimiter is omitted.  This behaviour is the same as what is done for zsh (except that for zsh the first [tab] press immediately shows completion choices).  Below is the above example, but using this commit. Notice the more concise and easier to read completion output:  bash-5.1$ tanzu context u[tab][tab] Command help: Configure and manage contexts for the Tanzu CLI -- unset  (Unset the active context so that it is not used by default.) use    (Set the context to be used by default) bash-5.1$ tanzu context u  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",236,247,Toni Kangas,09d5664,0,2025-01-30 00:28:46,2025-01-23 02:28:30
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),232,235,Ville Skyttä,9e88759,0,2022-06-16 00:08:16,2022-05-04 20:23:02
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",185,185,Ville Skyttä,5b11656,0,2022-10-17 19:24:27,2022-05-18 00:57:08
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",255,256,Taavi Väänänen,2246fa8,0,2025-01-23 02:28:30,2023-06-13 15:12:49
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",257,257,Unai Martinez-Corral,6d978a9,0,2022-10-17 19:24:27,2022-09-16 11:55:56
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),248,250,Ville Skyttä,4f0facb,0,2022-06-16 00:08:16,2022-04-28 02:27:52
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),252,254,Ville Skyttä,4f0facb,0,2022-06-16 00:08:16,2022-04-28 02:27:52
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",160,160,Marc Khouzam,b361960,0,2022-10-17 19:24:27,2021-06-30 21:24:58
bash_completionsV2.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,251,251,Marc Khouzam,f464d6c,0,2023-02-25 20:57:12,2022-06-16 00:08:16
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),258,259,,,0,2022-06-16 00:08:16,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",268,269,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),261,266,Ville Skyttä,4f0facb,0,2022-06-16 00:08:16,2022-04-28 02:27:52
bash_completionsV2.go,3fed3ef,Marc Khouzam,"Support different bash completion options (#1509)  https://github.com/spf13/cobra/issues/1508  Based on the documentation found here https://www.gnu.org/software/bash/manual/html_node/Commands-For-Completion.html we remove descriptions for the following completion types: - menu-complete - menu-complete-backward - insert-completions  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",270,278,,,0,2021-12-07 22:59:41,
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",279,293,Taavi Väänänen,2246fa8,0,2025-01-23 02:28:30,2023-06-13 15:12:49
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",304,307,Taavi Väänänen,2246fa8,0,2025-01-23 02:28:30,2023-06-13 15:12:49
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",303,303,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,3fed3ef,Marc Khouzam,"Support different bash completion options (#1509)  https://github.com/spf13/cobra/issues/1508  Based on the documentation found here https://www.gnu.org/software/bash/manual/html_node/Commands-For-Completion.html we remove descriptions for the following completion types: - menu-complete - menu-complete-backward - insert-completions  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",294,302,,,0,2021-12-07 22:59:41,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",308,308,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,95d7df1,Ville Skyttä,"perf(bash-v2): short-circuit descriptionless candidate lists (#1686)  If the list of candidates has no descriptions, short circuit all the description processing logic, basically just do a `compgen -W` for the whole list and be done with it.  We could conceivably do some optimizations like this and more when generating the completions with `--no-descriptions` in Go code, by omitting some parts we know won't be needed, or doing some things differently. But doing it this way in bash, the improvements are available also to completions generated with descriptions enabled when they are invoked for completion cases that produce no descriptions. The result after this for descriptionless entries seems fast enough so it seems there's no immediate need to look into doing that.",309,309,,,0,2022-05-04 01:16:07,
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",311,322,Taavi Väänänen,2246fa8,0,2025-01-23 02:28:30,2023-06-13 15:12:49
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",326,326,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,7c9831d,Marc Khouzam,"Fix handling of descriptions for bash v3 (#1735)  Fixes #1734  Tab characters that introduce completion descriptions weren't properly being handled with bash v3.  This change fixes that.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",310,310,Ville Skyttä,4f0facb,1,2022-06-20 04:11:21,2022-04-28 02:27:52
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",260,260,Ville Skyttä,4f0facb,0,2022-10-17 19:24:27,2022-04-28 02:27:52
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",327,327,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",328,328,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,95d7df1,Ville Skyttä,"perf(bash-v2): short-circuit descriptionless candidate lists (#1686)  If the list of candidates has no descriptions, short circuit all the description processing logic, basically just do a `compgen -W` for the whole list and be done with it.  We could conceivably do some optimizations like this and more when generating the completions with `--no-descriptions` in Go code, by omitting some parts we know won't be needed, or doing some things differently. But doing it this way in bash, the improvements are available also to completions generated with descriptions enabled when they are invoked for completion cases that produce no descriptions. The result after this for descriptionless entries seems fast enough so it seems there's no immediate need to look into doing that.",323,325,,,0,2022-05-04 01:16:07,
bash_completionsV2.go,fb80311,Ville Skyttä,"perf(bash-v2): speed up filtering entries with descriptions (#1689)  Use simple prefix match instead of single word `compgen -W` command substitution for each candidate match.",340,340,,,0,2022-05-04 01:34:55,
bash_completionsV2.go,e1ded5c,Ville Skyttä,"fix(bash-v2): skip empty completions when filtering descriptions (#1691)  `read` gives a last null value following a trailing newline.  Regression from fb8031162c2ffab270774f13c6904bb04cbba5a7.",330,330,,,1,2022-05-17 17:47:47,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",339,339,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",352,354,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",329,329,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",346,346,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",267,267,,,0,2022-10-17 19:24:27,
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",347,351,Unai Martinez-Corral,6d978a9,0,2025-01-23 02:28:30,2022-09-16 11:55:56
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",356,356,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",360,363,Unai Martinez-Corral,6d978a9,0,2025-01-23 02:28:30,2022-09-16 11:55:56
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",365,374,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",357,357,Ville Skyttä,4f0facb,0,2025-01-23 02:28:30,2022-04-28 02:27:52
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",359,359,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",377,382,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),355,355,,,0,2022-06-16 00:08:16,
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",384,394,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",358,358,,,0,2022-10-17 19:24:27,
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",364,364,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",331,338,Ville Skyttä,4f0facb,0,2025-01-23 02:28:30,2022-04-28 02:27:52
bash_completionsV2.go,2722a75,Ville Skyttä,"perf(bash-v2): use backslash escape string expansion for tab (#1682)  Using a command substitution, i.e. a subshell, with `printf` is expensive for this purpose. For example `__*_format_comp_descriptions` is run once for each completion candidate; the expense adds up and shows when there are a lot of them.",383,383,,,0,2022-04-28 02:02:30,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",375,376,,,0,2022-10-17 19:24:27,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",395,395,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",396,401,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",411,411,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",410,410,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",416,424,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",412,413,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",437,437,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,09d6ba6,Ville Skyttä,"perf(bash-v2): standard completion optimizations (#1683)  Refactor to remove two loops over the entire list of candidates.  Format descriptions only for completions that are actually going to be displayed, instead of for all candidates.  Format descriptions inline in completions array, removing need for a command substitution/subshell and a printf escape per displayed completion.",403,409,,,0,2022-05-03 01:00:51,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",425,435,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,09d5664,Toni Kangas,"Add similar whitespace escape logic to bash v2 completions than in other completions (#1743)   Signed-off-by: Toni Kangas <toni.kangas@upcloud.com> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Jeffrey Faer <jeffrey.faer@gmail.com>",341,345,Ville Skyttä,4f0facb,0,2025-01-23 02:28:30,2022-04-28 02:27:52
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",439,464,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",467,484,,,0,2021-06-30 21:24:58,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",438,438,,,0,2022-10-17 19:24:27,
bash_completionsV2.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),466,466,,,0,2022-06-16 00:08:16,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",436,436,,,0,2022-10-17 19:24:27,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",414,415,,,0,2022-10-17 19:24:27,
bash_completionsV2.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,465,465,,,0,2023-02-25 20:57:12,
bash_completionsV2.go,badcce1,Ville Skyttä,"style(bash-v2): various cleanups (#1702)  * use arithmetic evaluation in numeric context  * remove unnecessary $ from array index variables  * [[ ]] over [ ], == over =, remove unnecessary quoting  * use ${foo-} rather than ${foo:-} in emptiness check  The result of the expansion is null no matter if the variable is unset or null in both cases; the former form is arguably easier on the eye.  * remove unnecessary trailing linefeed removal  No longer needed as of f464d6c82e9af74b7a46301a775163984af32cd1, saves a subshell.  * use herestring in activehelp extraction  Herestrings read cleaner than process substitutions, and work in posix mode (but we do and will have some process substitutions so this doesn't matter much). Both approaches may end up using temporary files.",402,402,,,0,2022-10-17 19:24:27,
doc/man_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,20,20,Anthony Fok,10546a0,1,2015-12-24 14:01:59,2015-11-21 13:23:56
doc/man_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,15,15,Anthony Fok,10546a0,1,2015-12-24 14:01:59,2015-11-21 13:23:56
doc/man_docs.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,8,14,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,2,5,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,16,19,,,0,2015-08-21 08:10:13,
doc/man_docs.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,Hugo,25f5bb5,0,2022-09-16 11:55:56,2022-05-14 20:10:36
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,21,21,,,0,2015-08-21 08:10:13,
doc/man_docs.go,8e6aca4,Garth Kidd,"Use filepath.Join, not string math. Fixes #226.",22,22,Daniel Martí,5df1341,0,2016-01-17 00:25:20,2016-01-06 11:25:27
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,23,23,,,0,2015-08-21 08:10:13,
doc/man_docs.go,77e4d5a,Peter Fern,Update md2man to v2.0.0 (#977)  Fixes #805,28,28,Aleksa Sarai,fe5e611,0,2019-10-19 22:17:41,2018-10-21 14:11:14
doc/man_docs.go,7192411,joe2far,Fixed typos in README and docstring,33,33,Garth Kidd,cb8496d,1,2016-06-07 10:50:48,2016-01-21 01:11:56
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,25,27,,,0,2015-08-21 08:10:13,
doc/man_docs.go,fe5e611,Aleksa Sarai,"doc: obey SOURCE_DATE_EPOCH with manpage generation (#735)  Previously if a cobra user didn't specify an explicit .Date header, the current time would be included in all of the generated man pages each time they were built. This causes an issue for reproducible builds, since each re-build of a package that includes the man pages will have different times listed in the man pages.  To fix this, add support for SOURCE_DATE_EPOCH (which is a standardised packaging environment variable, designed to be used specifically for this purpose[1]).  [1]: https://reproducible-builds.org/specs/source-date-epoch/  Signed-off-by: Aleksa Sarai <asarai@suse.de>",24,24,Pascal Dierich,ff0d02e,1,2018-10-21 14:11:14,2018-08-20 17:45:24
doc/man_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,29,29,Anthony Fok,10546a0,1,2015-12-24 14:01:59,2015-11-21 13:23:56
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,30,32,,,0,2015-08-21 08:10:13,
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",34,34,,,0,2015-09-08 22:52:09,
doc/man_docs.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",35,36,Albert Nigmatzianov,0960ff7,1,2017-04-19 12:39:58,2017-03-09 15:37:15
doc/man_docs.go,e291587,Daniel Nephin,Cretea a new GenManTree function that takes an options struct.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,39,41,Daniel Nephin,97206b3,0,2016-06-21 18:47:14,2016-06-21 18:30:54
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",37,37,,,0,2015-09-08 22:52:09,
doc/man_docs.go,e291587,Daniel Nephin,Cretea a new GenManTree function that takes an options struct.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,43,49,Daniel Nephin,97206b3,0,2016-06-21 18:47:14,2016-06-21 18:30:54
doc/man_docs.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",38,38,Frank Schroeder,b3f29e9,0,2016-01-06 11:25:27,2015-12-24 14:01:59
doc/man_docs.go,1dd5ff2,Raphael 'kena' Poss,Make SEE ALSO references and generated file names agree with each other.,42,42,Chris Broadfoot,d1371ec,0,2016-12-29 07:59:22,2016-08-23 20:30:43
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,53,53,,,0,2015-08-21 08:10:13,
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",50,52,,,0,2015-09-08 22:52:09,
doc/man_docs.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,54,54,Raphael 'kena' Poss,1dd5ff2,0,2017-03-09 15:37:15,2016-12-29 07:59:22
doc/man_docs.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",58,59,Frank Schroeder,b3f29e9,0,2016-01-06 11:25:27,2015-12-24 14:01:59
doc/man_docs.go,e291587,Daniel Nephin,Cretea a new GenManTree function that takes an options struct.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,57,57,Daniel Nephin,97206b3,0,2016-06-21 18:47:14,2016-06-21 18:30:54
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,55,56,,,0,2015-08-21 08:10:13,
doc/man_docs.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,61,64,Daniel Nephin,112c7dc,1,2016-06-21 18:30:54,2016-06-21 18:30:26
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,60,60,,,0,2015-08-21 08:10:13,
doc/man_docs.go,e291587,Daniel Nephin,Cretea a new GenManTree function that takes an options struct.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,66,69,Daniel Nephin,97206b3,0,2016-06-21 18:47:14,2016-06-21 18:30:54
doc/man_docs.go,d1371ec,Chris Broadfoot,"gofmt, govet, run those in Travis, add 1.7",71,71,Daniel Nephin,e291587,0,2016-08-23 20:30:43,2016-06-21 18:47:14
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,75,75,,,0,2015-08-21 08:10:13,
doc/man_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",70,70,Unai Martinez-Corral,652c755,0,2022-05-14 20:10:36,2021-02-08 00:08:50
doc/man_docs.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",72,72,Anthony Fok,10546a0,0,2016-01-06 11:25:27,2015-11-21 13:23:56
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,73,73,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9c32fb4,Anthony Fok,"Reset man page title when necessary in GenManTree  If the user did not define header.Title when calling GenManTree(), reset it after each call to GenMan(), otherwise the entire man page tree would be stuck with the full command name that was calculated for the first man page, leaving all subsequent man pages with an identical but incorrect title.",65,65,,,0,2015-11-21 13:18:37,
doc/man_docs.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",74,74,Anthony Fok,10546a0,0,2016-01-06 11:25:27,2015-11-21 13:23:56
doc/man_docs.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",76,77,Frank Schroeder,b3f29e9,0,2016-01-06 11:25:27,2015-12-24 14:01:59
doc/man_docs.go,e291587,Daniel Nephin,Cretea a new GenManTree function that takes an options struct.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,84,89,Daniel Nephin,97206b3,0,2016-06-21 18:47:14,2016-06-21 18:30:54
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,101,102,,,0,2015-08-21 08:10:13,
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",93,100,,,0,2015-09-08 22:52:09,
doc/man_docs.go,ff0d02e,Pascal Dierich,fix typo in doc/man_docs.go (#732),92,92,James DeFelice,0ab5b6b,1,2018-08-20 17:45:24,2018-04-24 16:15:12
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,80,81,,,0,2015-08-21 08:10:13,
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",90,91,,,0,2015-09-08 22:52:09,
doc/man_docs.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",103,105,Anthony Fok,10546a0,0,2016-01-06 11:25:27,2015-11-21 13:23:56
doc/man_docs.go,6bfe2ba,Albert Nigmatzianov,doc: Add docs,82,83,Albert Nigmatzianov,de484ee,0,2017-05-09 09:14:48,2017-04-26 19:30:17
doc/man_docs.go,e392f32,John McBride,"Man pages won't have auto gen tag when option is disabled (#1104)  * Man pages wont have  auto gen tag when option is disabled  - this addresses #741  * Add documentation for doc generation and a changelog",109,109,Peter Fern,77e4d5a,0,2020-04-29 17:15:55,2019-10-19 22:17:41
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",106,108,,,0,2015-09-08 22:52:09,
doc/man_docs.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,78,79,Frank Schroeder,b3f29e9,1,2016-06-21 18:30:54,2015-12-24 14:01:59
doc/man_docs.go,fe5e611,Aleksa Sarai,"doc: obey SOURCE_DATE_EPOCH with manpage generation (#735)  Previously if a cobra user didn't specify an explicit .Date header, the current time would be included in all of the generated man pages each time they were built. This causes an issue for reproducible builds, since each re-build of a package that includes the man pages will have different times listed in the man pages.  To fix this, add support for SOURCE_DATE_EPOCH (which is a standardised packaging environment variable, designed to be used specifically for this purpose[1]).  [1]: https://reproducible-builds.org/specs/source-date-epoch/  Signed-off-by: Aleksa Sarai <asarai@suse.de>",110,111,Pascal Dierich,ff0d02e,1,2018-10-21 14:11:14,2018-08-20 17:45:24
doc/man_docs.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",113,113,Anthony Fok,10546a0,0,2016-01-06 11:25:27,2015-11-21 13:23:56
doc/man_docs.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",115,115,Anthony Fok,10546a0,0,2016-01-06 11:25:27,2015-11-21 13:23:56
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,116,117,,,0,2015-08-21 08:10:13,
doc/man_docs.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,112,112,joe2far,7192411,1,2016-06-21 18:30:54,2016-06-07 10:50:48
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",119,119,,,0,2015-09-08 22:52:09,
doc/man_docs.go,e392f32,John McBride,"Man pages won't have auto gen tag when option is disabled (#1104)  * Man pages wont have  auto gen tag when option is disabled  - this addresses #741  * Add documentation for doc generation and a changelog",118,118,Peter Fern,77e4d5a,0,2020-04-29 17:15:55,2019-10-19 22:17:41
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",121,126,,,0,2015-09-08 22:52:09,
doc/man_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",120,120,Unai Martinez-Corral,652c755,0,2022-05-14 20:10:36,2021-02-08 00:08:50
doc/man_docs.go,fe5e611,Aleksa Sarai,"doc: obey SOURCE_DATE_EPOCH with manpage generation (#735)  Previously if a cobra user didn't specify an explicit .Date header, the current time would be included in all of the generated man pages each time they were built. This causes an issue for reproducible builds, since each re-build of a package that includes the man pages will have different times listed in the man pages.  To fix this, add support for SOURCE_DATE_EPOCH (which is a standardised packaging environment variable, designed to be used specifically for this purpose[1]).  [1]: https://reproducible-builds.org/specs/source-date-epoch/  Signed-off-by: Aleksa Sarai <asarai@suse.de>",127,133,Pascal Dierich,ff0d02e,1,2018-10-21 14:11:14,2018-08-20 17:45:24
doc/man_docs.go,6b5f577,Ville Skyttä,"More linting (#2099)  * Address gocritic findings, enable it  * Enable gosimple, no new findings to address",136,136,Unai Martinez-Corral,9e6b58a,0,2024-04-01 12:42:08,2023-03-06 02:28:31
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",134,135,,,0,2015-09-08 22:52:09,
doc/man_docs.go,e392f32,John McBride,"Man pages won't have auto gen tag when option is disabled (#1104)  * Man pages wont have  auto gen tag when option is disabled  - this addresses #741  * Add documentation for doc generation and a changelog",137,137,Peter Fern,77e4d5a,0,2020-04-29 17:15:55,2019-10-19 22:17:41
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",138,139,,,0,2015-09-08 22:52:09,
doc/man_docs.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",141,142,,,0,2015-09-08 22:52:09,
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,149,149,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,fe5e611,Aleksa Sarai,"doc: obey SOURCE_DATE_EPOCH with manpage generation (#735)  Previously if a cobra user didn't specify an explicit .Date header, the current time would be included in all of the generated man pages each time they were built. This causes an issue for reproducible builds, since each re-build of a package that includes the man pages will have different times listed in the man pages.  To fix this, add support for SOURCE_DATE_EPOCH (which is a standardised packaging environment variable, designed to be used specifically for this purpose[1]).  [1]: https://reproducible-builds.org/specs/source-date-epoch/  Signed-off-by: Aleksa Sarai <asarai@suse.de>",140,140,Pascal Dierich,ff0d02e,1,2018-10-21 14:11:14,2018-08-20 17:45:24
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,114,114,Anthony Fok,10546a0,0,2017-04-26 19:30:17,2015-11-21 13:23:56
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,143,143,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,150,150,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,157,158,,,0,2015-08-21 08:10:13,
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,152,156,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,160,160,,,0,2015-08-21 08:10:13,
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,159,159,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,3eac143,Eric Paris,Update IsAvailableCommand checks  This slightly changes IsAvailableCommand in that a non-runnable command with a runnable subcommand is now 'Available'  We also use IsAvailableCommand in the rest of the codebase instead of half kinda sorta doing it incorrectly other places.,161,161,,,0,2015-09-09 02:48:12,
doc/man_docs.go,29c0a1f,Daniel Nephin,Use the correct UseLine for the man page synposis.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,144,148,Anthony Fok,10546a0,1,2016-06-20 21:27:41,2015-11-21 13:23:56
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,151,151,Daniel Nephin,29c0a1f,0,2017-04-26 19:30:17,2016-06-20 21:27:41
doc/man_docs.go,112c7dc,Daniel Nephin,Hide deprecated shorthand flags in man page generation.,165,166,Anthony Fok,10546a0,0,2016-06-21 18:30:26,2015-11-21 13:23:56
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,162,164,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,167,167,,,0,2015-08-21 08:10:13,
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,171,171,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,169,170,,,0,2015-08-21 08:10:13,
doc/man_docs.go,112c7dc,Daniel Nephin,Hide deprecated shorthand flags in man page generation.,168,168,Anthony Fok,10546a0,0,2016-06-21 18:30:26,2015-11-21 13:23:56
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,176,176,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,172,174,,,0,2015-08-21 08:10:13,
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,175,175,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,177,177,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,181,181,,,0,2015-08-21 08:10:13,
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,182,182,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,180,180,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,178,179,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,184,186,,,0,2015-08-21 08:10:13,
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,183,183,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,188,188,,,0,2015-08-21 08:10:13,
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,187,187,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,190,190,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,195,195,Albert Nigmatzianov,6bfe2ba,0,2018-04-24 16:15:12,2017-05-09 09:14:48
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,193,194,,,0,2015-08-21 08:10:13,
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,192,192,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,199,201,,,0,2015-08-21 08:10:13,
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,198,198,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,197,197,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/man_docs.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,189,189,Albert Nigmatzianov,f95d58b,0,2018-04-24 16:15:12,2017-04-19 12:39:58
doc/man_docs.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,196,196,Sascha Steinbiss,86f8bfd,1,2021-02-08 00:08:50,2020-10-18 18:59:26
doc/man_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,202,202,Anthony Fok,10546a0,1,2015-12-24 14:01:59,2015-11-21 13:23:56
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,191,191,Daniel Nephin,97206b3,0,2017-04-26 19:30:17,2016-06-21 18:30:54
doc/man_docs.go,ca57f0f,Albert Nigmatzianov,doc: Ad help flag and cmd when generating docs,203,205,Albert Nigmatzianov,f95d58b,0,2017-05-20 17:28:06,2017-04-19 12:39:58
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,208,210,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,206,206,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,212,212,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,213,213,,,0,2015-08-21 08:10:13,
doc/man_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",207,207,Unai Martinez-Corral,652c755,0,2022-05-14 20:10:36,2021-02-08 00:08:50
doc/man_docs.go,29c0a1f,Daniel Nephin,Use the correct UseLine for the man page synposis.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,211,211,Garth Kidd,8e6aca4,1,2016-06-20 21:27:41,2016-01-17 00:25:20
doc/man_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,217,217,Anthony Fok,10546a0,1,2015-12-24 14:01:59,2015-11-21 13:23:56
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,216,216,,,0,2015-08-21 08:10:13,
doc/man_docs.go,cfecf13,Eric Paris,manpage generation: Make sure parent in SEE ALSO has dashes  The CommandPath() for a parent might have a space (if .Parent() != .Root()) so we need to replace those spaces with `-`,221,221,,,0,2015-09-08 16:32:15,
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,218,218,Raphael 'kena' Poss,1dd5ff2,0,2017-04-26 19:30:17,2016-12-29 07:59:22
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,220,220,,,0,2015-08-21 08:10:13,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,230,230,,,0,2015-08-21 08:10:13,
doc/man_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",222,222,Unai Martinez-Corral,652c755,0,2022-05-14 20:10:36,2021-02-08 00:08:50
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,231,232,,,0,2015-08-21 08:10:13,
doc/man_docs.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,226,229,,,0,2015-11-08 14:58:38,
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,214,215,Garth Kidd,8e6aca4,0,2017-04-26 19:30:17,2016-01-17 00:25:20
doc/man_docs.go,cb8496d,Garth Kidd,"Ensure SEE ALSO list has no leading comma, fixing #229",223,224,,,0,2016-01-21 01:11:56,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,235,236,,,0,2015-08-21 08:10:13,
doc/man_docs.go,cb8496d,Garth Kidd,"Ensure SEE ALSO list has no leading comma, fixing #229",237,238,,,0,2016-01-21 01:11:56,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,239,239,,,0,2015-08-21 08:10:13,
doc/man_docs.go,cb8496d,Garth Kidd,"Ensure SEE ALSO list has no leading comma, fixing #229",219,219,,,0,2016-01-21 01:11:56,
doc/man_docs.go,cb8496d,Garth Kidd,"Ensure SEE ALSO list has no leading comma, fixing #229",233,233,,,0,2016-01-21 01:11:56,
doc/man_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,225,225,,,1,2015-12-24 14:01:59,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,245,246,,,0,2015-08-21 08:10:13,
doc/man_docs.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,242,242,,,0,2015-11-08 14:58:38,
doc/man_docs.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,244,244,,,0,2015-11-08 14:58:38,
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,240,240,,,0,2017-04-26 19:30:17,
doc/man_docs.go,9e77886,Eric Paris,Auto generation of a man page,241,241,,,0,2015-08-21 08:10:13,
doc/man_docs.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,234,234,,,0,2017-03-09 15:37:15,
doc/man_docs.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,243,243,,,0,2017-04-26 19:30:17,
doc/man_examples_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/man_examples_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,22,22,Eric Paris,edcf765,1,2015-12-24 14:01:59,2015-09-08 22:52:09
doc/man_examples_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",26,29,,,0,2015-09-08 22:52:09,
doc/man_examples_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",23,24,,,0,2015-09-08 22:52:09,
doc/man_examples_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",16,21,,,0,2015-09-08 22:52:09,
doc/man_examples_test.go,6421115,Albert Nigmatzianov,doc: Fix govet complaints (#408),25,25,Frank Schroeder,b3f29e9,1,2017-04-01 20:45:39,2015-12-24 14:01:59
doc/man_examples_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,15,15,Eric Paris,edcf765,1,2015-12-24 14:01:59,2015-09-08 22:52:09
doc/man_examples_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,30,30,Eric Paris,edcf765,1,2015-12-24 14:01:59,2015-09-08 22:52:09
doc/man_examples_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",35,36,,,0,2015-09-08 22:52:09,
doc/man_examples_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Unai Martinez-Corral,652c755,0,2022-09-16 11:55:56,2021-02-08 00:08:50
doc/man_examples_test.go,6421115,Albert Nigmatzianov,doc: Fix govet complaints (#408),37,37,,,1,2017-04-01 20:45:39,
doc/man_examples_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",31,33,,,0,2015-09-08 22:52:09,
doc/man_examples_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,34,34,Albert Nigmatzianov,6421115,1,2021-02-08 00:08:50,2017-04-01 20:45:39
doc/man_examples_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",38,41,,,0,2015-09-08 22:52:09,
doc/man_examples_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,42,42,,,1,2015-12-24 14:01:59,
doc/man_examples_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",48,49,,,0,2015-09-08 22:52:09,
doc/man_examples_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",43,46,,,0,2015-09-08 22:52:09,
doc/man_examples_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,47,47,,,1,2021-02-08 00:08:50,
doc/md_docs.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,Hugo,25f5bb5,0,2022-09-16 11:55:56,2022-05-14 20:10:36
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",16,17,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",2,5,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",19,19,,,1,2015-04-12 18:40:34,
doc/md_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,15,15,Austin Riendeau,5144a3a,1,2015-12-24 14:01:59,2015-11-08 14:58:38
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,18,18,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",8,14,,,1,2015-04-12 18:40:34,
doc/md_docs.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",21,21,,,1,2015-04-12 18:40:34,
doc/md_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,26,27,Austin Riendeau,5144a3a,1,2015-12-24 14:01:59,2015-11-08 14:58:38
doc/md_docs.go,8e6aca4,Garth Kidd,"Use filepath.Join, not string math. Fixes #226.",22,22,Daniel Martí,eb5040e,0,2016-01-17 00:25:20,2016-01-06 11:21:04
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",28,29,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",23,25,,,1,2015-04-12 18:40:34,
doc/md_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,20,20,Austin Riendeau,5144a3a,1,2015-12-24 14:01:59,2015-11-08 14:58:38
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,32,32,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",33,33,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8b1eba4,Marc Khouzam,"Fix linter errors (#2052)  When using golangci-lint v1.55.0 some new errors were being reported.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",30,31,Unai Martinez-Corral,9e6b58a,1,2023-10-27 10:23:45,2023-03-06 02:28:31
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,34,34,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,36,36,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",37,37,,,1,2015-04-12 18:40:34,
doc/md_docs.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,35,35,Allen Sun,3a5f27b,0,2018-04-24 16:15:12,2017-12-04 10:43:02
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",39,41,,,1,2015-04-12 18:40:34,
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,42,42,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,43,43,Allen Sun,3a5f27b,0,2018-04-24 16:15:12,2017-12-04 10:43:02
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,38,38,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,44,44,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",45,45,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",47,47,,,1,2015-04-12 18:40:34,
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",48,48,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,46,46,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",56,56,Albert Nigmatzianov,0960ff7,1,2017-04-19 12:39:58,2017-03-09 15:37:15
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",52,53,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",49,50,,,1,2015-04-12 18:40:34,
doc/md_docs.go,ca57f0f,Albert Nigmatzianov,doc: Ad help flag and cmd when generating docs,58,60,Albert Nigmatzianov,6bfe2ba,0,2017-05-20 17:28:06,2017-05-09 09:14:48
doc/md_docs.go,1d99c8f,bep,"genmarkdown: add optional frontmatter- and linkadjustment-funcs  The automatic Markdown generator works great!  But to use it to render the documentation in Hugo, we need front matter and slightly different links.  This commit adds optional callback funcs to add that.",54,55,,,0,2015-05-13 13:22:00,
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,61,61,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",57,57,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",51,51,Daniel Martí,ea06b29,1,2017-04-19 12:39:58,2016-01-06 10:59:08
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",62,63,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",70,71,,,1,2015-04-12 18:40:34,
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,64,64,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,72,72,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,80,80,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",73,75,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",78,79,,,1,2015-04-12 18:40:34,
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,76,77,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",81,82,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,02a0d2f,Marc Lopez Rubio,"doc: GenMarkdown skip Synopsis on empty long cmd (#1207)  This patch modifies the GenMarkdownCustom to skip writing a Synopsis header with the `cmd.Short` duplicated both before and after the header.  Instead, it only writes the `### Synopsis` header and the paragraph when a `cmd.Long` has some kind of content in it.  Adds `TestGenMdDocWithNoLongOrSynopsis` as the test case.  Signed-off-by: Marc Lopez <marc5.12@outlook.com>",65,69,James DeFelice,0ab5b6b,1,2020-08-26 15:18:51,2018-04-24 16:15:12
doc/md_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,83,83,Austin Riendeau,5144a3a,1,2015-12-24 14:01:59,2015-11-08 14:58:38
doc/md_docs.go,3a5f27b,Allen Sun,doc: Add a necessary blank line after SEE ALSO (#592)  Signed-off-by: Allen Sun <shlallen1990@gmail.com>,84,84,Allen Sun,45a52e2,0,2017-12-04 10:43:02,2017-12-04 09:21:50
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",85,87,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8b1eba4,Marc Khouzam,"Fix linter errors (#2052)  When using golangci-lint v1.55.0 some new errors were being reported.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",88,88,Unai Martinez-Corral,9e6b58a,1,2023-10-27 10:23:45,2023-03-06 02:28:31
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,90,90,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,91,91,Austin Riendeau,5144a3a,1,2015-12-24 14:01:59,2015-11-08 14:58:38
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",96,101,,,1,2015-04-12 18:40:34,
doc/md_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",89,89,John McBride,ff416ad,0,2022-05-14 20:10:36,2021-01-23 23:05:55
doc/md_docs.go,8b1eba4,Marc Khouzam,"Fix linter errors (#2052)  When using golangci-lint v1.55.0 some new errors were being reported.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",106,106,Unai Martinez-Corral,9e6b58a,1,2023-10-27 10:23:45,2023-03-06 02:28:31
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",105,105,,,1,2015-04-12 18:40:34,
doc/md_docs.go,c3e48f9,Eric Paris,"Deprecated subcommands  They should still work, but shouldn't show up in help or usage output",103,104,,,0,2015-04-29 17:08:20,
doc/md_docs.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,102,102,Daniel Martí,ea06b29,0,2017-03-09 15:37:15,2016-01-06 10:59:08
doc/md_docs.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,92,95,,,0,2015-11-08 14:58:38,
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,108,108,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",109,109,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",111,111,,,1,2015-04-12 18:40:34,
doc/md_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",107,107,John McBride,ff416ad,0,2022-05-14 20:10:36,2021-01-23 23:05:55
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,110,110,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,113,113,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",125,125,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",117,118,,,1,2015-04-12 18:40:34,
doc/md_docs.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",119,124,Garth Kidd,8e6aca4,1,2017-04-19 12:39:58,2016-01-17 00:25:20
doc/md_docs.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,112,112,,,0,2015-11-08 14:58:38,
doc/md_docs.go,1f80fa2,racerole,chore: remove repetitive words (#2122)  Signed-off-by: racerole <jiangyifeng@outlook.com>,131,131,Marc Khouzam,8b1eba4,0,2024-03-12 10:40:19,2023-10-27 10:23:45
doc/md_docs.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,115,116,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs.go,ff416ad,John McBride,"Revert ""Add the ability to specify a filePostpender in GenMarkdownTreeCustom (#1270)"" (#1317)  This reverts commit 23a6174c7f9d0c64a48e634054bdf6886fb7fbba.",128,128,Joon-Ho Son,23a6174,0,2021-01-23 23:05:55,2021-01-21 03:33:16
doc/md_docs.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,114,114,,,0,2015-11-08 14:58:38,
doc/md_docs.go,ff416ad,John McBride,"Revert ""Add the ability to specify a filePostpender in GenMarkdownTreeCustom (#1270)"" (#1317)  This reverts commit 23a6174c7f9d0c64a48e634054bdf6886fb7fbba.",132,133,Joon-Ho Son,23a6174,0,2021-01-23 23:05:55,2021-01-21 03:33:16
doc/md_docs.go,9e77886,Eric Paris,Auto generation of a man page,129,130,,,0,2015-08-21 08:10:13,
doc/md_docs.go,7b4b4aa,Jeff Lowdermilk,Don't prepend filename in default GenMarkdownTree,126,127,,,0,2015-05-21 00:21:00,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",141,141,,,1,2015-04-12 18:40:34,
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",139,140,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,ff416ad,John McBride,"Revert ""Add the ability to specify a filePostpender in GenMarkdownTreeCustom (#1270)"" (#1317)  This reverts commit 23a6174c7f9d0c64a48e634054bdf6886fb7fbba.",138,138,Joon-Ho Son,23a6174,0,2021-01-23 23:05:55,2021-01-21 03:33:16
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",134,134,,,1,2015-04-12 18:40:34,
doc/md_docs.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,135,135,Daniel Martí,ea06b29,0,2017-03-09 15:37:15,2016-01-06 10:59:08
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",142,142,,,1,2015-04-12 18:40:34,
doc/md_docs.go,9e77886,Eric Paris,Auto generation of a man page,136,137,,,0,2015-08-21 08:10:13,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",146,146,,,1,2015-04-12 18:40:34,
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",145,145,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,8b1eba4,Marc Khouzam,"Fix linter errors (#2052)  When using golangci-lint v1.55.0 some new errors were being reported.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",143,143,Unai Martinez-Corral,9e6b58a,1,2023-10-27 10:23:45,2023-03-06 02:28:31
doc/md_docs.go,8e6aca4,Garth Kidd,"Use filepath.Join, not string math. Fixes #226.",144,144,Daniel Martí,ea06b29,0,2016-01-17 00:25:20,2016-01-06 10:59:08
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",147,147,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",148,148,,,1,2015-04-12 18:40:34,
doc/md_docs.go,1d99c8f,bep,"genmarkdown: add optional frontmatter- and linkadjustment-funcs  The automatic Markdown generator works great!  But to use it to render the documentation in Hugo, we need front matter and slightly different links.  This commit adds optional callback funcs to add that.",153,153,,,0,2015-05-13 13:22:00,
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",154,155,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",149,152,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",156,156,,,1,2015-04-12 18:40:34,
doc/md_docs.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",158,158,,,1,2015-04-12 18:40:34,
doc/md_docs.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",157,157,Daniel Martí,ea06b29,1,2016-01-06 11:21:04,2016-01-06 10:59:08
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,15,18,,,0,2015-04-08 00:13:49,
bash_completions_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
bash_completions_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
bash_completions_test.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",19,19,Edward Betts,3c0b56b,1,2018-02-08 21:34:46,2017-09-01 15:16:37
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,20,20,,,0,2015-04-08 00:13:49,
bash_completions_test.go,c3e48f9,Eric Paris,"Deprecated subcommands  They should still work, but shouldn't show up in help or usage output",27,28,,,0,2015-04-29 17:08:20,
bash_completions_test.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",22,22,John McCabe,fd32f09,1,2018-02-28 05:38:38,2018-02-08 21:34:46
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,23,26,,,0,2015-04-08 00:13:49,
bash_completions_test.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,21,21,Eric Paris,9b2e682,0,2016-04-02 21:16:12,2015-04-08 00:13:49
bash_completions_test.go,c3e48f9,Eric Paris,"Deprecated subcommands  They should still work, but shouldn't show up in help or usage output",30,32,,,0,2015-04-29 17:08:20,
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,33,34,,,0,2015-04-08 00:13:49,
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,57,57,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,35,35,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,36,38,,,0,2015-04-08 00:13:49,
bash_completions_test.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",46,55,Edward Betts,3c0b56b,1,2018-02-28 05:38:38,2017-09-01 15:16:37
bash_completions_test.go,6fd8e29,Paul,"Qualify custom bash func name (#730)  * Qualify custom bash func name   - fixes issue where multiple cobra apps using custom bash completion  would have their __custom_func collide  - support fallback to plain __custom_func to maintain compatibility  #694  * Improve tests for bash completion __custom_func   - check for the correct number of occurrences of function name  #694",39,45,John McCabe,fd32f09,1,2018-08-21 16:12:02,2018-02-08 21:34:46
bash_completions_test.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,56,56,Fabiano Franz,7290a94,0,2016-04-02 21:16:12,2015-11-06 13:43:09
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,29,29,Dr. Stefan Schimanski,1a0a490,0,2017-11-09 06:56:43,2016-04-02 10:39:19
bash_completions_test.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,60,67,Dr. Stefan Schimanski,1a0a490,0,2016-04-02 21:16:12,2016-04-02 10:39:19
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,59,59,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,58,58,Dr. Stefan Schimanski,1a0a490,0,2016-04-02 21:16:12,2016-04-02 10:39:19
bash_completions_test.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,72,76,Ian Walter,a0bd6c1,0,2016-04-02 21:16:12,2016-03-31 13:53:34
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,77,77,,,0,2015-04-08 00:13:49,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,71,71,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,82,83,,,0,2015-04-08 00:13:49,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,79,79,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,84,88,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,80,81,,,0,2015-04-08 00:13:49,
bash_completions_test.go,6fd8e29,Paul,"Qualify custom bash func name (#730)  * Qualify custom bash func name   - fixes issue where multiple cobra apps using custom bash completion  would have their __custom_func collide  - support fallback to plain __custom_func to maintain compatibility  #694  * Improve tests for bash completion __custom_func   - check for the correct number of occurrences of function name  #694",78,78,Edward Betts,3c0b56b,1,2018-08-21 16:12:02,2017-09-01 15:16:37
bash_completions_test.go,7547e83,Michael,"Run tests against go 1.11 and drop 1.9 (#737)  * Update the Travis and CircleCI Go versions  * Adapt to new gofmt formatting  The formatting of gofmt changed slightly in go 1.11.  The release notes recommend to use a specific binary of gofmt.  See https://golang.org/doc/go1.11#gofmt  This commit adapts to the new formatting applied by gofmt and changes the configs for travis and circleci to run gofmt only with go 1.11.",89,89,Edward Betts,3c0b56b,0,2019-01-09 00:34:09,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,90,91,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,92,92,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,93,95,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,97,99,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,68,70,Edward Betts,3c0b56b,1,2021-02-08 00:08:50,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,102,104,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,100,101,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,96,96,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,106,106,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,112,112,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,108,110,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,111,111,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,117,125,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,ba1052d,Daisuke Taniwaki,Fix two word flags (#807),113,116,John McCabe,fd32f09,1,2019-03-11 12:55:09,2018-02-08 21:34:46
bash_completions_test.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",128,128,Edward Betts,3c0b56b,1,2018-02-28 05:38:38,2017-09-01 15:16:37
bash_completions_test.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",126,126,Edward Betts,3c0b56b,1,2018-02-28 05:38:38,2017-09-01 15:16:37
bash_completions_test.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",130,130,Edward Betts,3c0b56b,1,2018-02-28 05:38:38,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,131,166,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,105,105,Edward Betts,3c0b56b,1,2021-02-08 00:08:50,2017-09-01 15:16:37
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,127,127,Edward Betts,3c0b56b,1,2021-02-08 00:08:50,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,183,183,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,177,178,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,175,176,,,0,2015-04-08 00:13:49,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,168,174,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,6fd8e29,Paul,"Qualify custom bash func name (#730)  * Qualify custom bash func name   - fixes issue where multiple cobra apps using custom bash completion  would have their __custom_func collide  - support fallback to plain __custom_func to maintain compatibility  #694  * Improve tests for bash completion __custom_func   - check for the correct number of occurrences of function name  #694",179,182,John McCabe,fd32f09,1,2018-08-21 16:12:02,2018-02-08 21:34:46
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,107,107,Edward Betts,3c0b56b,1,2021-02-08 00:08:50,2017-09-01 15:16:37
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,184,184,,,0,2015-04-08 00:13:49,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,187,189,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,185,185,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,129,129,Edward Betts,3c0b56b,1,2021-02-08 00:08:50,2017-09-01 15:16:37
bash_completions_test.go,6119fc9,Jordan Liggitt,Simplify setting file/extension annotations on a flag,190,190,,,0,2015-06-22 19:16:00,
bash_completions_test.go,6119fc9,Jordan Liggitt,Simplify setting file/extension annotations on a flag,192,192,,,0,2015-06-22 19:16:00,
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,167,167,John McCabe,6644d46,1,2021-02-08 00:08:50,2018-02-28 05:38:38
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,193,193,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",196,197,Edward Betts,3c0b56b,1,2018-02-28 05:38:38,2017-09-01 15:16:37
bash_completions_test.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",195,195,Edward Betts,3c0b56b,1,2018-02-08 21:34:46,2017-09-01 15:16:37
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,191,191,Edward Betts,3c0b56b,0,2017-11-09 06:56:43,2017-09-01 15:16:37
bash_completions_test.go,3c0b56b,Edward Betts,correct spelling mistake (#524),194,194,Albert Nigmatzianov,de6b168,1,2017-09-01 15:16:37,2017-05-18 13:03:00
bash_completions_test.go,1a0a490,Dr. Stefan Schimanski,Remove plural handling and add aliases for nouns in completion,186,186,,,0,2016-04-02 10:39:19,
bash_completions_test.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",200,200,,,0,2015-08-09 19:30:58,
bash_completions_test.go,8092588,Dr. Stefan Schimanski,Add custom bash flag completion,198,198,,,0,2016-03-21 07:05:54,
bash_completions_test.go,ba1052d,Daisuke Taniwaki,Fix two word flags (#807),205,210,Edward Betts,3c0b56b,1,2019-03-11 12:55:09,2017-09-01 15:16:37
bash_completions_test.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",202,203,Edward Betts,3c0b56b,1,2018-02-28 05:38:38,2017-09-01 15:16:37
bash_completions_test.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",211,217,Edward Betts,3c0b56b,1,2020-09-09 15:34:51,2017-09-01 15:16:37
bash_completions_test.go,c3e48f9,Eric Paris,"Deprecated subcommands  They should still work, but shouldn't show up in help or usage output",204,204,,,0,2015-04-29 17:08:20,
bash_completions_test.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,219,219,,,0,2016-04-02 21:16:12,
bash_completions_test.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,227,227,,,0,2015-04-08 00:13:49,
bash_completions_test.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,221,223,,,0,2016-04-02 21:16:12,
bash_completions_test.go,75daccd,Euan Kemp,Don't display hidden flags in bash completions,228,229,,,0,2016-08-02 21:49:33,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,199,199,,,0,2017-11-09 06:56:43,
bash_completions_test.go,75daccd,Euan Kemp,Don't display hidden flags in bash completions,231,231,,,0,2016-08-02 21:49:33,
bash_completions_test.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,225,226,,,0,2016-04-02 21:16:12,
bash_completions_test.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",201,201,,,1,2018-02-08 21:34:46,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,218,218,,,0,2017-11-09 06:56:43,
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,234,234,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,237,237,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,75daccd,Euan Kemp,Don't display hidden flags in bash completions,235,235,,,0,2016-08-02 21:49:33,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,238,238,,,0,2017-11-09 06:56:43,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,230,230,,,0,2017-11-09 06:56:43,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,220,220,,,0,2017-11-09 06:56:43,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,224,224,,,0,2017-11-09 06:56:43,
bash_completions_test.go,75daccd,Euan Kemp,Don't display hidden flags in bash completions,242,243,,,0,2016-08-02 21:49:33,
bash_completions_test.go,40e19b3,Euan Kemp,Don't display deprecated flags in bash completions,244,245,,,0,2016-08-02 22:01:33,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,248,249,,,0,2017-11-09 06:56:43,
bash_completions_test.go,75daccd,Euan Kemp,Don't display hidden flags in bash completions,239,239,,,0,2016-08-02 21:49:33,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,232,233,,,0,2017-11-09 06:56:43,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,240,241,,,0,2017-11-09 06:56:43,
bash_completions_test.go,fb1f399,Albert Nigmatzianov,Add benchmark for GenBashCompletion,251,251,,,0,2017-05-18 13:03:00,
bash_completions_test.go,fb1f399,Albert Nigmatzianov,Add benchmark for GenBashCompletion,247,247,,,0,2017-05-18 13:03:00,
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,253,253,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,246,246,,,0,2017-11-09 06:56:43,
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,250,250,Daisuke Taniwaki,ba1052d,1,2021-02-08 00:08:50,2019-03-11 12:55:09
bash_completions_test.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",260,267,Daisuke Taniwaki,ba1052d,1,2020-09-09 15:34:51,2019-03-11 12:55:09
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,236,236,,,0,2017-11-09 06:56:43,
bash_completions_test.go,fb1f399,Albert Nigmatzianov,Add benchmark for GenBashCompletion,255,255,,,0,2017-05-18 13:03:00,
bash_completions_test.go,84f4716,Albert Nigmatzianov,Make BenchmarkBashCompletion more honest  name              old time/op    new time/op    delta BashCompletion-4    67.4µs ± 1%    50.8µs ± 3%  -24.63%  (p=0.000 n=17+19)  name              old alloc/op   new alloc/op   delta BashCompletion-4    29.5kB ± 0%    29.5kB ± 0%   +0.00%  (p=0.020 n=20+20)  name              old allocs/op  new allocs/op  delta BashCompletion-4       253 ± 0%       253 ± 0%     ~     (all equal),252,252,,,0,2017-06-05 17:32:33,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,254,254,,,0,2017-11-09 06:56:43,
bash_completions_test.go,65c8acb,Albert Nigmatzianov,Improve tests,256,257,,,0,2017-11-09 06:56:43,
bash_completions_test.go,fb1f399,Albert Nigmatzianov,Add benchmark for GenBashCompletion,258,259,,,0,2017-05-18 13:03:00,
bash_completions_test.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",269,277,,,1,2020-09-09 15:34:51,
bash_completions_test.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),278,289,,,0,2022-06-16 00:08:16,
bash_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,268,268,,,1,2021-02-08 00:08:50,
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),8,32,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,33,33,Shahidh K Muhammed,419e0f8,0,2018-04-24 16:15:12,2017-10-07 17:39:47
doc/rest_docs.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Yash Ladha,bf11ab6,0,2023-03-06 02:28:31,2022-12-25 20:08:39
doc/rest_docs.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,42,42,Shahidh K Muhammed,419e0f8,0,2018-04-24 16:15:12,2017-10-07 17:39:47
doc/rest_docs.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,Hugo,25f5bb5,0,2022-09-16 11:55:56,2022-05-14 20:10:36
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),2,5,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),34,41,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),43,50,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",74,74,James DeFelice,0ab5b6b,0,2022-05-14 20:10:36,2018-04-24 16:15:12
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),75,102,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",51,51,Unai Martinez-Corral,6d978a9,1,2022-12-25 20:08:39,2022-09-16 11:55:56
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),52,73,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),104,119,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),121,142,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",103,103,James DeFelice,0ab5b6b,0,2022-05-14 20:10:36,2018-04-24 16:15:12
doc/rest_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",120,120,James DeFelice,0ab5b6b,0,2022-05-14 20:10:36,2018-04-24 16:15:12
doc/rest_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",155,155,James DeFelice,0ab5b6b,0,2022-05-14 20:10:36,2018-04-24 16:15:12
doc/rest_docs.go,1f80fa2,racerole,chore: remove repetitive words (#2122)  Signed-off-by: racerole <jiangyifeng@outlook.com>,143,143,Unai Martinez-Corral,9e6b58a,0,2024-03-12 10:40:19,2023-03-06 02:28:31
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),144,154,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),156,171,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/rest_docs.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",172,172,Unai Martinez-Corral,6d978a9,1,2022-12-25 20:08:39,2022-09-16 11:55:56
doc/rest_docs.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),173,186,Albert Nigmatzianov,ca57f0f,0,2017-10-07 17:39:47,2017-05-20 17:28:06
doc/md_docs_test.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",16,18,,,1,2015-04-12 18:40:34,
doc/md_docs_test.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",19,19,,,1,2015-04-12 18:40:34,
doc/md_docs_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,15,15,Austin Riendeau,5144a3a,1,2015-12-24 14:01:59,2015-11-08 14:58:38
doc/md_docs_test.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",22,22,,,1,2015-04-12 18:40:34,
doc/md_docs_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/md_docs_test.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",21,21,,,1,2015-04-12 18:40:34,
doc/md_docs_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,John McBride,ff416ad,0,2022-09-16 11:55:56,2021-01-23 23:05:55
doc/md_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",20,20,Austin Riendeau,5144a3a,1,2017-04-19 12:39:58,2015-11-08 14:58:38
doc/md_docs_test.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",25,26,,,1,2015-04-12 18:40:34,
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,27,29,Albert Nigmatzianov,97af803,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,32,40,Albert Nigmatzianov,97af803,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/md_docs_test.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",30,31,Austin Riendeau,5144a3a,1,2016-01-06 11:21:04,2015-11-08 14:58:38
doc/md_docs_test.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,41,43,Albert Nigmatzianov,2da4a54,0,2018-04-24 16:15:12,2017-11-09 06:56:43
doc/md_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",23,24,Frank Schroeder,b3f29e9,1,2017-04-19 12:39:58,2015-12-24 14:01:59
doc/md_docs_test.go,02a0d2f,Marc Lopez Rubio,"doc: GenMarkdown skip Synopsis on empty long cmd (#1207)  This patch modifies the GenMarkdownCustom to skip writing a Synopsis header with the `cmd.Short` duplicated both before and after the header.  Instead, it only writes the `### Synopsis` header and the paragraph when a `cmd.Long` has some kind of content in it.  Adds `TestGenMdDocWithNoLongOrSynopsis` as the test case.  Signed-off-by: Marc Lopez <marc5.12@outlook.com>",44,57,James DeFelice,0ab5b6b,1,2020-08-26 15:18:51,2018-04-24 16:15:12
doc/md_docs_test.go,8a18f25,Eric Paris,"Auto generation of markdown docs!  An example from the kubernetes project, for the `kubectl config` command, which as subcommands, and flags, and all sorts of stuff, it will generate markdown like so:  config modifies .kubeconfig files  config modifies .kubeconfig files using subcommands like ""kubectl config set current-context my-context""  ``` kubectl config SUBCOMMAND ```  ```       --envvar=false: use the .kubeconfig from $KUBECONFIG       --global=false: use the .kubeconfig from /home/username   -h, --help=false: help for config       --kubeconfig="""": use a particular .kubeconfig file       --local=false: use the .kubeconfig in the current directory ```  ```       --alsologtostderr=false: log to standard error as well as files       --api-version="""": The API version to use when talking to the server   -a, --auth-path="""": Path to the auth info file. If missing, prompt the user. Only used if using https.       --certificate-authority="""": Path to a cert. file for the certificate authority.       --client-certificate="""": Path to a client key file for TLS.       --client-key="""": Path to a client key file for TLS.       --cluster="""": The name of the kubeconfig cluster to use       --context="""": The name of the kubeconfig context to use       --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.       --log_backtrace_at=:0: when logging hits line file:N, emit a stack trace       --log_dir=: If non-empty, write log files in this directory       --log_flush_frequency=5s: Maximum number of seconds between log flushes       --logtostderr=true: log to standard error instead of files       --match-server-version=false: Require server version to match client version       --namespace="""": If present, the namespace scope for this CLI request.       --password="""": Password for basic authentication to the API server.   -s, --server="""": The address and port of the Kubernetes API server       --stderrthreshold=2: logs at or above this threshold go to stderr       --token="""": Bearer token for authentication to the API server.       --user="""": The name of the kubeconfig user to use       --username="""": Username for basic authentication to the API server.       --v=0: log level for V logs       --validate=false: If true, use a schema to validate the input before sending it       --vmodule=: comma-separated list of pattern=N settings for file-filtered logging ```  * [kubectl](kubectl.md)	 - kubectl controls the Kubernetes cluster manager * [kubectl config set](kubectl_config_set.md)	 - Sets an individual value in a .kubeconfig file * [kubectl config set-cluster](kubectl_config_set-cluster.md)	 - Sets a cluster entry in .kubeconfig * [kubectl config set-context](kubectl_config_set-context.md)	 - Sets a context entry in .kubeconfig * [kubectl config set-credentials](kubectl_config_set-credentials.md)	 - Sets a user entry in .kubeconfig * [kubectl config unset](kubectl_config_unset.md)	 - Unsets an individual value in a .kubeconfig file * [kubectl config use-context](kubectl_config_use-context.md)	 - Sets the current-context in a .kubeconfig file * [kubectl config view](kubectl_config_view.md)	 - displays merged .kubeconfig settings or a specified .kubeconfig file.",79,79,,,1,2015-04-12 18:40:34,
doc/md_docs_test.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,58,78,Albert Nigmatzianov,97af803,0,2018-04-24 16:15:12,2017-04-26 19:30:17
doc/md_docs_test.go,eb5040e,Daniel Martí,"Treat write errors in markdown doc generation  This code was already using io.Writer, but was completely ignoring write errors.  The most worrying part is how GenMarkdownTreeCustom used an unnecessary buffer to then dump all of its contents on a file, and instead of returning an error on file creation/writing, it would just exit the entire program.",87,88,Austin Riendeau,5144a3a,1,2016-01-06 11:21:04,2015-11-08 14:58:38
doc/md_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,84,84,,,0,2015-11-08 14:58:38,
doc/md_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",93,94,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/md_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,80,81,,,0,2015-11-08 14:58:38,
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,82,83,,,0,2017-11-09 06:56:43,
doc/md_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,90,90,,,0,2015-11-08 14:58:38,
doc/md_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",97,97,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/md_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,92,92,,,0,2015-11-08 14:58:38,
doc/md_docs_test.go,511af59,Nir Soffer,"Replace deprecated ioutil usage (#2181)  Fixing golangci-lint errors[1]:      Error: SA1019: ""io/ioutil"" has been deprecated since Go 1.19: As of     Go 1.16, the same functionality is now provided by package [io] or     package [os], and those implementations should be preferred in new     code. See the specific function documentation for details.     (staticcheck)  [1] https://github.com/spf13/cobra/actions/runs/10535452454/job/29194442289?pr=2180",96,96,Unai Martinez-Corral,9e6b58a,1,2024-08-24 11:05:26,2023-03-06 02:28:31
doc/md_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",99,101,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/md_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",104,109,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,85,86,,,0,2017-11-09 06:56:43,
doc/md_docs_test.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,110,111,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,89,89,,,0,2017-11-09 06:56:43,
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,95,95,,,0,2017-11-09 06:56:43,
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,91,91,,,0,2017-11-09 06:56:43,
doc/md_docs_test.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,113,120,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,102,103,,,0,2017-11-09 06:56:43,
doc/md_docs_test.go,511af59,Nir Soffer,"Replace deprecated ioutil usage (#2181)  Fixing golangci-lint errors[1]:      Error: SA1019: ""io/ioutil"" has been deprecated since Go 1.19: As of     Go 1.16, the same functionality is now provided by package [io] or     package [os], and those implementations should be preferred in new     code. See the specific function documentation for details.     (staticcheck)  [1] https://github.com/spf13/cobra/actions/runs/10535452454/job/29194442289?pr=2180",112,112,Unai Martinez-Corral,9e6b58a,1,2024-08-24 11:05:26,2023-03-06 02:28:31
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,121,121,,,0,2017-11-09 06:56:43,
doc/md_docs_test.go,97af803,Albert Nigmatzianov,doc: Cleanup md_docs  Performance gain: benchmark                        old ns/op     new ns/op     delta BenchmarkGenMarkdownToFile-4     23096         10295         -55.43%  benchmark                        old allocs     new allocs     delta BenchmarkGenMarkdownToFile-4     47             48             +2.13%  benchmark                        old bytes     new bytes     delta BenchmarkGenMarkdownToFile-4     1984          2832          +42.74%,122,125,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/md_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,98,98,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,15,15,Austin Riendeau,5144a3a,1,2015-12-24 14:01:59,2015-11-08 14:58:38
doc/man_docs_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Hugo,25f5bb5,0,2022-09-16 11:55:56,2022-05-14 20:10:36
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,16,17,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,18,18,Austin Riendeau,5144a3a,0,2016-01-21 01:12:26,2015-11-08 14:58:38
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,19,21,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,23,24,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,27,28,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,22,22,Austin Riendeau,5144a3a,1,2016-06-21 18:30:54,2015-11-08 14:58:38
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,37,39,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,35,35,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,25,26,Austin Riendeau,5144a3a,0,2016-01-21 01:12:26,2015-11-08 14:58:38
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,44,44,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,46,47,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,29,34,Albert Nigmatzianov,de484ee,1,2021-02-08 00:08:50,2017-04-26 19:30:17
doc/man_docs_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",40,43,,,0,2015-09-08 22:52:09,
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,45,45,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,51,51,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,cfecf13,Eric Paris,manpage generation: Make sure parent in SEE ALSO has dashes  The CommandPath() for a parent might have a space (if .Parent() != .Root()) so we need to replace those spaces with `-`,52,52,,,0,2015-09-08 16:32:15,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,50,50,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",48,49,Austin Riendeau,5144a3a,0,2016-01-06 11:25:27,2015-11-08 14:58:38
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,57,66,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,53,53,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,edcf765,Eric Paris,"Mangen: allow callers to specify header information  We previously had this weak argument called projectName which let you set a single part of a man page header. Instead do the best we can if the caller doesn't pass us anything, but let the caller specify anything they want.",56,56,,,0,2015-09-08 22:52:09,
doc/man_docs_test.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",36,36,Albert Nigmatzianov,de484ee,0,2022-05-14 20:10:36,2017-04-26 19:30:17
doc/man_docs_test.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",89,89,Albert Nigmatzianov,2da4a54,0,2022-05-14 20:10:36,2017-11-09 06:56:43
doc/man_docs_test.go,cfecf13,Eric Paris,manpage generation: Make sure parent in SEE ALSO has dashes  The CommandPath() for a parent might have a space (if .Parent() != .Root()) so we need to replace those spaces with `-`,55,55,,,0,2015-09-08 16:32:15,
doc/man_docs_test.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",54,54,Albert Nigmatzianov,2da4a54,0,2022-05-14 20:10:36,2017-11-09 06:56:43
doc/man_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,67,68,,,0,2015-11-08 14:58:38,
doc/man_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,105,105,,,0,2015-11-08 14:58:38,
doc/man_docs_test.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,69,88,Albert Nigmatzianov,2da4a54,0,2018-04-24 16:15:12,2017-11-09 06:56:43
doc/man_docs_test.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,90,104,Albert Nigmatzianov,de484ee,0,2018-04-24 16:15:12,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,113,113,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,108,112,,,0,2015-11-08 14:58:38,
doc/man_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,114,114,,,0,2015-11-08 14:58:38,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,115,116,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,119,119,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,106,107,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,9e77886,Eric Paris,Auto generation of a man page,125,125,,,0,2015-08-21 08:10:13,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,122,122,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,e392f32,John McBride,"Man pages won't have auto gen tag when option is disabled (#1104)  * Man pages wont have  auto gen tag when option is disabled  - this addresses #741  * Add documentation for doc generation and a changelog",123,124,Albert Nigmatzianov,de484ee,0,2020-04-29 17:15:55,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,128,132,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,126,127,Daniel Martí,5df1341,0,2016-01-21 01:12:26,2016-01-06 11:25:27
doc/man_docs_test.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,120,121,,,0,2015-11-08 14:58:38,
doc/man_docs_test.go,5df1341,Daniel Martí,"Treat write errors in man doc generation  Just like the last commit, but now for manpages.  genMan still works with a buffer and returns []byte instead of working directly with an io.Writer. This is because, in turn, md2man takes byte slices instead of readers and writers.  Wrapping genMan around a writer is unnecessary especially since it's not an exported function, and also because we'd still need a buffer to get the output bytes.",117,118,,,0,2016-01-06 11:25:27,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,133,133,Daniel Martí,5df1341,0,2016-01-21 01:12:26,2016-01-06 11:25:27
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,137,138,Daniel Martí,5df1341,0,2016-01-21 01:12:26,2016-01-06 11:25:27
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,135,135,Daniel Martí,5df1341,0,2016-01-21 01:12:26,2016-01-06 11:25:27
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,134,134,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,143,143,Daniel Martí,5df1341,0,2016-01-21 01:12:26,2016-01-06 11:25:27
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,140,140,Daniel Martí,5df1341,0,2016-01-21 01:12:26,2016-01-06 11:25:27
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,141,142,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,145,145,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,2a52778,Sebastiaan van Stijn,"go.mod: cpuguy83/go-md2man/v2 v2.0.1 (#1460)  full diff: https://github.com/cpuguy83/go-md2man/compare/v2.0.0...v2.0.1  - Fix handling multiple definition descriptions - Fix inline markup causing table cells to split - Remove escaping tilde character (prevents tildes (`~`) from disappearing). - Do not escape dash, underscore, and ampersand (prevents ampersands (`&`) from disappearing). - Ignore unknown HTML tags to prevent noisy warnings  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",144,144,John McBride,e392f32,1,2021-08-05 17:08:25,2020-04-29 17:15:55
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,139,139,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,146,148,Daniel Martí,5df1341,0,2016-01-21 01:12:26,2016-01-06 11:25:27
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,150,151,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,136,136,Daniel Martí,5df1341,0,2017-11-09 06:56:43,2016-01-06 11:25:27
doc/man_docs_test.go,112c7dc,Daniel Nephin,Hide deprecated shorthand flags in man page generation.,153,153,Daniel Martí,5df1341,0,2016-06-21 18:30:26,2016-01-06 11:25:27
doc/man_docs_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,152,152,Albert Nigmatzianov,de484ee,1,2021-02-08 00:08:50,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,157,157,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,112c7dc,Daniel Nephin,Hide deprecated shorthand flags in man page generation.,156,156,Daniel Martí,5df1341,0,2016-06-21 18:30:26,2016-01-06 11:25:27
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,154,155,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,159,160,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,112c7dc,Daniel Nephin,Hide deprecated shorthand flags in man page generation.,158,158,Daniel Martí,5df1341,0,2016-06-21 18:30:26,2016-01-06 11:25:27
doc/man_docs_test.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,166,166,Daniel Nephin,112c7dc,1,2016-06-21 18:30:54,2016-06-21 18:30:26
doc/man_docs_test.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,168,168,Daniel Nephin,112c7dc,1,2016-06-21 18:30:54,2016-06-21 18:30:26
doc/man_docs_test.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,164,164,Daniel Nephin,112c7dc,1,2016-06-21 18:30:54,2016-06-21 18:30:26
doc/man_docs_test.go,112c7dc,Daniel Nephin,Hide deprecated shorthand flags in man page generation.,161,163,Daniel Martí,5df1341,0,2016-06-21 18:30:26,2016-01-06 11:25:27
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,165,165,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,511af59,Nir Soffer,"Replace deprecated ioutil usage (#2181)  Fixing golangci-lint errors[1]:      Error: SA1019: ""io/ioutil"" has been deprecated since Go 1.19: As of     Go 1.16, the same functionality is now provided by package [io] or     package [os], and those implementations should be preferred in new     code. See the specific function documentation for details.     (staticcheck)  [1] https://github.com/spf13/cobra/actions/runs/10535452454/job/29194442289?pr=2180",167,167,gocurr,60d056d,1,2024-08-24 11:05:26,2023-07-20 15:27:44
doc/man_docs_test.go,60d056d,gocurr,"doc: fix typo, Deperecated -> Deprecated (#2000)",149,149,Unai Martinez-Corral,652c755,1,2023-07-20 15:27:44,2021-02-08 00:08:50
doc/man_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",169,169,Daniel Nephin,112c7dc,1,2017-04-19 12:39:58,2016-06-21 18:30:26
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,173,173,Albert Nigmatzianov,de484ee,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/man_docs_test.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,170,172,Daniel Nephin,112c7dc,1,2016-06-21 18:30:54,2016-06-21 18:30:26
doc/man_docs_test.go,97206b3,Daniel Nephin,Use the correct man page section for the filename  Also make header mutation cleaner.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,174,185,Daniel Nephin,112c7dc,1,2016-06-21 18:30:54,2016-06-21 18:30:26
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,199,200,,,0,2016-01-21 01:12:26,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,202,205,,,0,2016-01-21 01:12:26,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,206,206,,,0,2016-01-21 01:12:26,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,187,194,,,0,2016-01-21 01:12:26,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,208,210,,,0,2016-01-21 01:12:26,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,207,207,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,212,213,,,0,2016-01-21 01:12:26,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,196,197,,,0,2016-01-21 01:12:26,
doc/man_docs_test.go,57f4732,Garth Kidd,Add explicit doc.GenMan SEE ALSO test covering #229,215,215,,,0,2016-01-21 01:12:26,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,201,201,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,511af59,Nir Soffer,"Replace deprecated ioutil usage (#2181)  Fixing golangci-lint errors[1]:      Error: SA1019: ""io/ioutil"" has been deprecated since Go 1.19: As of     Go 1.16, the same functionality is now provided by package [io] or     package [os], and those implementations should be preferred in new     code. See the specific function documentation for details.     (staticcheck)  [1] https://github.com/spf13/cobra/actions/runs/10535452454/job/29194442289?pr=2180",218,218,gocurr,60d056d,1,2024-08-24 11:05:26,2023-07-20 15:27:44
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,186,186,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,216,217,Albert Nigmatzianov,f95d58b,0,2017-04-26 19:30:17,2017-04-19 12:39:58
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,214,214,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,195,195,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,198,198,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,211,211,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,228,231,,,0,2017-04-26 19:30:17,
doc/man_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,227,227,,,0,2017-11-09 06:56:43,
doc/man_docs_test.go,de484ee,Albert Nigmatzianov,doc: Refactor man docs  Performance impact (very strange): benchmark                        old ns/op     new ns/op     delta BenchmarkGenManToFile-4          30037         29001         -3.45%  benchmark                        old allocs     new allocs     delta BenchmarkGenManToFile-4          77             89             +15.58%  benchmark                        old bytes     new bytes     delta BenchmarkGenManToFile-4          9075          9651          +6.35%,219,226,,,0,2017-04-26 19:30:17,
doc/util.go,9e77886,Eric Paris,Auto generation of a man page,2,5,,,0,2015-08-21 08:10:13,
doc/util.go,9e77886,Eric Paris,Auto generation of a man page,23,23,,,0,2015-08-21 08:10:13,
doc/util.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,Felix Yan,a0b86e5,0,2022-09-16 11:55:56,2020-08-11 04:17:29
doc/util.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,17,21,Frank Schroeder,b3f29e9,0,2017-01-30 21:45:31,2015-12-24 14:01:59
doc/util.go,9e77886,Eric Paris,Auto generation of a man page,8,14,,,0,2015-08-21 08:10:13,
doc/util.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,15,16,Eric Paris,3eac143,1,2015-12-24 14:01:59,2015-09-09 02:48:12
doc/util.go,9e77886,Eric Paris,Auto generation of a man page,22,22,,,0,2015-08-21 08:10:13,
doc/util.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/util.go,9e77886,Eric Paris,Auto generation of a man page,25,25,,,0,2015-08-21 08:10:13,
doc/util.go,9e77886,Eric Paris,Auto generation of a man page,27,29,,,0,2015-08-21 08:10:13,
doc/util.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,30,30,Eric Paris,3eac143,1,2015-12-24 14:01:59,2015-09-09 02:48:12
doc/util.go,9e77886,Eric Paris,Auto generation of a man page,32,37,,,0,2015-08-21 08:10:13,
doc/util.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,31,31,French Ben,35136c0,0,2017-03-09 15:37:15,2017-01-30 21:45:31
doc/util.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,38,38,Eric Paris,3eac143,1,2015-12-24 14:01:59,2015-09-09 02:48:12
doc/util.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,26,26,Eric Paris,3eac143,1,2015-12-24 14:01:59,2015-09-09 02:48:12
doc/util.go,a0b86e5,Felix Yan,Correct a typo in doc/util.go (#1184),24,24,Albert Nigmatzianov,0960ff7,1,2020-08-11 04:17:29,2017-03-09 15:37:15
doc/util.go,6b5f577,Ville Skyttä,"More linting (#2099)  * Address gocritic findings, enable it  * Enable gosimple, no new findings to address",43,43,Unai Martinez-Corral,9e6b58a,0,2024-04-01 12:42:08,2023-03-06 02:28:31
doc/util.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,39,42,Frank Schroeder,b3f29e9,0,2017-01-30 21:45:31,2015-12-24 14:01:59
doc/util.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,44,47,Frank Schroeder,b3f29e9,0,2017-01-30 21:45:31,2015-12-24 14:01:59
doc/util.go,b3f29e9,Frank Schroeder,Issue #195: Move doc generation into separate pkg  * Move man_docs and md_docs into new doc pkg * Replace *bytes.Buffer with io.Writer * Replace c == cmd.helpCommand with c.IsHelpCommand() * Remove redundant len(children) == 0 check in HasSeeAlso * Duplicate test setup for doc generation,48,52,,,1,2015-12-24 14:01:59,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,2,5,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,8,26,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,42,49,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,dbf85f6,Tobias Klauser,"Update gopkg.in/yaml.v2 to gopkg.in/yaml.v3 (#1766)  API v3 was released in 2019 [1]. Update from the v2 API, no changes to the packages's use needed and no breaking changes expected.  [1] https://ubuntu.com/blog/api-v3-of-the-yaml-package-for-go-is-available",27,27,Zoran Regvart,7790bf9,0,2022-08-13 22:18:46,2022-08-13 21:31:45
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,28,40,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/yaml_docs.go,ed7b60e,Alessandro (Ale) Segala,"YAML documentation contains ""Usage"" (#1037)",41,41,Albert Nigmatzianov,ca57f0f,0,2020-06-15 22:51:03,2017-05-20 17:28:06
doc/yaml_docs.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,Tobias Klauser,dbf85f6,0,2022-09-16 11:55:56,2022-08-13 22:18:46
doc/yaml_docs.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",50,51,Albert Nigmatzianov,0960ff7,1,2017-04-19 12:39:58,2017-03-09 15:37:15
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,52,58,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,60,61,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,71,86,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",59,59,Albert Nigmatzianov,0960ff7,1,2017-04-19 12:39:58,2017-03-09 15:37:15
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,88,91,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,63,69,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,62,62,French Ben,35136c0,0,2017-03-09 15:37:15,2017-01-30 21:45:31
doc/yaml_docs.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",87,87,Albert Nigmatzianov,0960ff7,1,2017-04-19 12:39:58,2017-03-09 15:37:15
doc/yaml_docs.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",92,92,Albert Nigmatzianov,0960ff7,1,2017-04-19 12:39:58,2017-03-09 15:37:15
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,93,93,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",70,70,Alessandro (Ale) Segala,ed7b60e,0,2022-05-14 20:10:36,2020-06-15 22:51:03
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,97,102,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,ca57f0f,Albert Nigmatzianov,doc: Ad help flag and cmd when generating docs,94,96,Albert Nigmatzianov,6dd9084,0,2017-05-20 17:28:06,2017-04-26 19:30:17
doc/yaml_docs.go,ed7b60e,Alessandro (Ale) Segala,"YAML documentation contains ""Usage"" (#1037)",103,106,Albert Nigmatzianov,ca57f0f,0,2020-06-15 22:51:03,2017-05-20 17:28:06
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,107,128,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,133,141,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,130,131,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,129,129,,,0,2017-03-09 15:37:15,
doc/yaml_docs.go,6dd9084,Albert Nigmatzianov,doc: Use w.Write instead of fmt in yaml_docs  benchmark                        old ns/op     new ns/op     delta BenchmarkGenYamlToFile-4         62488         61622         -1.39%  benchmark                        old allocs     new allocs     delta BenchmarkGenYamlToFile-4         121            120            -0.83%  benchmark                        old bytes     new bytes     delta BenchmarkGenYamlToFile-4         26706         26280         -1.60%,142,143,,,0,2017-04-26 19:30:17,
doc/yaml_docs.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,144,175,,,0,2017-01-30 21:45:31,
doc/yaml_docs.go,7790bf9,Zoran Regvart,"fix: correct command path in see_also for YAML doc (#1771)  The `see_also` section for child commands would include only the name of the commands. This adds the whole path, similar to how it's done for the other documentation formats.",132,132,Hugo,25f5bb5,1,2022-08-13 21:31:45,2022-05-14 20:10:36
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),15,18,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),21,26,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,27,29,Shahidh K Muhammed,419e0f8,0,2017-11-09 06:56:43,2017-10-07 17:39:47
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),19,20,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),30,31,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,32,40,Shahidh K Muhammed,419e0f8,0,2017-11-09 06:56:43,2017-10-07 17:39:47
doc/rest_docs_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/rest_docs_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,James DeFelice,0ab5b6b,0,2022-09-16 11:55:56,2018-04-24 16:15:12
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),41,42,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,0ab5b6b,James DeFelice,doc: hide hidden parent flags (#686)  * fixes #685,43,65,Albert Nigmatzianov,2da4a54,0,2018-04-24 16:15:12,2017-11-09 06:56:43
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),72,73,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,70,71,Shahidh K Muhammed,419e0f8,0,2017-11-09 06:56:43,2017-10-07 17:39:47
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,74,74,Shahidh K Muhammed,419e0f8,0,2017-11-09 06:56:43,2017-10-07 17:39:47
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),66,66,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),69,69,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,67,68,Albert Nigmatzianov,6dd9084,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),75,76,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),78,80,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,511af59,Nir Soffer,"Replace deprecated ioutil usage (#2181)  Fixing golangci-lint errors[1]:      Error: SA1019: ""io/ioutil"" has been deprecated since Go 1.19: As of     Go 1.16, the same functionality is now provided by package [io] or     package [os], and those implementations should be preferred in new     code. See the specific function documentation for details.     (staticcheck)  [1] https://github.com/spf13/cobra/actions/runs/10535452454/job/29194442289?pr=2180",83,83,Unai Martinez-Corral,9e6b58a,1,2024-08-24 11:05:26,2023-03-06 02:28:31
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),84,88,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),100,107,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),90,98,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,419e0f8,Shahidh K Muhammed,doc: add ReST doc generation (#537),109,112,Albert Nigmatzianov,6dd9084,0,2017-10-07 17:39:47,2017-04-26 19:30:17
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,108,108,,,0,2017-11-09 06:56:43,
doc/rest_docs_test.go,511af59,Nir Soffer,"Replace deprecated ioutil usage (#2181)  Fixing golangci-lint errors[1]:      Error: SA1019: ""io/ioutil"" has been deprecated since Go 1.19: As of     Go 1.16, the same functionality is now provided by package [io] or     package [os], and those implementations should be preferred in new     code. See the specific function documentation for details.     (staticcheck)  [1] https://github.com/spf13/cobra/actions/runs/10535452454/job/29194442289?pr=2180",99,99,Unai Martinez-Corral,9e6b58a,1,2024-08-24 11:05:26,2023-03-06 02:28:31
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,77,77,,,0,2017-11-09 06:56:43,
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,81,82,,,0,2017-11-09 06:56:43,
doc/rest_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,89,89,,,0,2017-11-09 06:56:43,
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",19,19,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",15,18,,,0,2020-07-10 20:12:46,
fish_completions_test.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",23,35,,,0,2020-07-10 20:12:46,
fish_completions_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,kida,ed7bb9d,0,2022-09-16 11:55:56,2022-06-20 02:38:49
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",22,22,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),21,21,Marc Khouzam,675ae5f,0,2022-06-20 02:38:49,2020-07-10 20:12:46
fish_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,36,36,Marc Khouzam,675ae5f,1,2021-02-08 00:08:50,2020-07-10 20:12:46
fish_completions_test.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),20,20,Marc Khouzam,675ae5f,0,2022-06-16 00:08:16,2020-07-10 20:12:46
fish_completions_test.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",53,61,,,0,2020-07-10 20:12:46,
fish_completions_test.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",37,51,,,0,2020-07-10 20:12:46,
fish_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,52,52,,,1,2021-02-08 00:08:50,
fish_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,62,62,Marc Khouzam,675ae5f,1,2021-02-08 00:08:50,2020-07-10 20:12:46
fish_completions_test.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",63,76,,,0,2020-07-10 20:12:46,
fish_completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,77,77,,,1,2021-02-08 00:08:50,
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),103,103,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",102,102,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",78,87,,,0,2020-07-10 20:12:46,
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),105,106,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),88,99,,,0,2022-06-16 00:08:16,
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",104,104,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",107,107,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),100,101,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),108,116,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",117,117,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",121,121,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",126,126,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),127,127,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",123,123,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),118,120,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),124,125,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),122,122,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),129,138,Marc Khouzam,f464d6c,0,2022-06-20 02:38:49,2022-06-16 00:08:16
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",128,128,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,988bd76,Branch Vincent,"test: make fish_completions_test more robust (#1980)  Use temporary files instead of assuming the current directory is writable. Also, if creating a temporary file still returns an error, prevent the test from failing silently by replacing `log.Fatal` with `t.Fatal`.",139,141,Unai Martinez-Corral,9e6b58a,1,2023-06-16 14:25:30,2023-03-06 02:28:31
fish_completions_test.go,ed7bb9d,kida,Add unit test for fish completion (#1515),142,143,,,0,2022-06-20 02:38:49,
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,15,18,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,22,22,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Zoran Regvart,7790bf9,0,2022-09-16 11:55:56,2022-08-13 21:31:45
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,23,23,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,20,20,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",21,21,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,26,27,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,29,30,Albert Nigmatzianov,6dd9084,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,28,28,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",24,25,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/yaml_docs_test.go,7790bf9,Zoran Regvart,"fix: correct command path in see_also for YAML doc (#1771)  The `see_also` section for child commands would include only the name of the commands. This adds the whole path, similar to how it's done for the other documentation formats.",19,19,Albert Nigmatzianov,6dd9084,1,2022-08-13 21:31:45,2017-04-26 19:30:17
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,31,32,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,33,40,Albert Nigmatzianov,6dd9084,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,47,47,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,48,49,Albert Nigmatzianov,6dd9084,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,42,44,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,45,46,Albert Nigmatzianov,6dd9084,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,50,51,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,7790bf9,Zoran Regvart,"fix: correct command path in see_also for YAML doc (#1771)  The `see_also` section for child commands would include only the name of the commands. This adds the whole path, similar to how it's done for the other documentation formats.",41,41,Albert Nigmatzianov,6dd9084,1,2022-08-13 21:31:45,2017-04-26 19:30:17
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,53,53,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,54,54,Albert Nigmatzianov,6dd9084,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/yaml_docs_test.go,35136c0,French Ben,Added support for yaml ouptut in docs gen (#380)  Signed-off-by: French Ben <frenchben@docker.com>,55,55,Daniel Martí,eb5040e,0,2017-01-30 21:45:31,2016-01-06 11:21:04
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,58,58,Albert Nigmatzianov,6dd9084,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,52,52,Albert Nigmatzianov,6dd9084,0,2017-11-09 06:56:43,2017-04-26 19:30:17
doc/yaml_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",56,57,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/yaml_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",59,59,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/yaml_docs_test.go,511af59,Nir Soffer,"Replace deprecated ioutil usage (#2181)  Fixing golangci-lint errors[1]:      Error: SA1019: ""io/ioutil"" has been deprecated since Go 1.19: As of     Go 1.16, the same functionality is now provided by package [io] or     package [os], and those implementations should be preferred in new     code. See the specific function documentation for details.     (staticcheck)  [1] https://github.com/spf13/cobra/actions/runs/10535452454/job/29194442289?pr=2180",60,60,Unai Martinez-Corral,9e6b58a,1,2024-08-24 11:05:26,2023-03-06 02:28:31
doc/yaml_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",61,65,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/yaml_docs_test.go,6dd9084,Albert Nigmatzianov,doc: Use w.Write instead of fmt in yaml_docs  benchmark                        old ns/op     new ns/op     delta BenchmarkGenYamlToFile-4         62488         61622         -1.39%  benchmark                        old allocs     new allocs     delta BenchmarkGenYamlToFile-4         121            120            -0.83%  benchmark                        old bytes     new bytes     delta BenchmarkGenYamlToFile-4         26706         26280         -1.60%,86,86,French Ben,35136c0,0,2017-04-26 19:30:17,2017-01-30 21:45:31
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,66,66,Albert Nigmatzianov,f95d58b,0,2017-11-09 06:56:43,2017-04-19 12:39:58
doc/yaml_docs_test.go,6dd9084,Albert Nigmatzianov,doc: Use w.Write instead of fmt in yaml_docs  benchmark                        old ns/op     new ns/op     delta BenchmarkGenYamlToFile-4         62488         61622         -1.39%  benchmark                        old allocs     new allocs     delta BenchmarkGenYamlToFile-4         121            120            -0.83%  benchmark                        old bytes     new bytes     delta BenchmarkGenYamlToFile-4         26706         26280         -1.60%,74,74,Daniel Martí,eb5040e,0,2017-04-26 19:30:17,2016-01-06 11:21:04
doc/yaml_docs_test.go,ed7b60e,Alessandro (Ale) Segala,"YAML documentation contains ""Usage"" (#1037)",75,85,Albert Nigmatzianov,6dd9084,0,2020-06-15 22:51:03,2017-04-26 19:30:17
doc/yaml_docs_test.go,f95d58b,Albert Nigmatzianov,"Fix #401 (#402)  * doc: Add and edit docs  * doc: Add tests",67,73,Daniel Martí,eb5040e,1,2017-04-19 12:39:58,2016-01-06 11:21:04
doc/yaml_docs_test.go,6dd9084,Albert Nigmatzianov,doc: Use w.Write instead of fmt in yaml_docs  benchmark                        old ns/op     new ns/op     delta BenchmarkGenYamlToFile-4         62488         61622         -1.39%  benchmark                        old allocs     new allocs     delta BenchmarkGenYamlToFile-4         121            120            -0.83%  benchmark                        old bytes     new bytes     delta BenchmarkGenYamlToFile-4         26706         26280         -1.60%,88,95,French Ben,35136c0,0,2017-04-26 19:30:17,2017-01-30 21:45:31
doc/yaml_docs_test.go,511af59,Nir Soffer,"Replace deprecated ioutil usage (#2181)  Fixing golangci-lint errors[1]:      Error: SA1019: ""io/ioutil"" has been deprecated since Go 1.19: As of     Go 1.16, the same functionality is now provided by package [io] or     package [os], and those implementations should be preferred in new     code. See the specific function documentation for details.     (staticcheck)  [1] https://github.com/spf13/cobra/actions/runs/10535452454/job/29194442289?pr=2180",87,87,Unai Martinez-Corral,9e6b58a,1,2024-08-24 11:05:26,2023-03-06 02:28:31
doc/yaml_docs_test.go,6dd9084,Albert Nigmatzianov,doc: Use w.Write instead of fmt in yaml_docs  benchmark                        old ns/op     new ns/op     delta BenchmarkGenYamlToFile-4         62488         61622         -1.39%  benchmark                        old allocs     new allocs     delta BenchmarkGenYamlToFile-4         121            120            -0.83%  benchmark                        old bytes     new bytes     delta BenchmarkGenYamlToFile-4         26706         26280         -1.60%,97,100,French Ben,35136c0,0,2017-04-26 19:30:17,2017-01-30 21:45:31
doc/yaml_docs_test.go,2da4a54,Albert Nigmatzianov,Improve tests in doc/,96,96,,,0,2017-11-09 06:56:43,
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",2,5,,,0,2022-04-17 21:04:57,
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",8,45,,,0,2022-04-17 21:04:57,
flag_groups_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,John Schnake,68b6b24,0,2022-09-16 11:55:56,2022-04-17 21:04:57
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",55,67,,,0,2022-04-17 21:04:57,
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),68,72,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",73,82,,,0,2022-04-17 21:04:57,
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),46,54,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",88,97,,,0,2022-04-17 21:04:57,
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),83,87,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",103,107,,,0,2022-04-17 21:04:57,
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),98,102,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),108,108,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",127,130,,,0,2022-04-17 21:04:57,
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),114,120,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),126,126,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",109,113,,,0,2022-04-17 21:04:57,
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",121,125,,,0,2022-04-17 21:04:57,
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),131,135,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",182,195,,,0,2022-04-17 21:04:57,
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",149,169,,,0,2022-04-17 21:04:57,
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",136,139,,,0,2022-04-17 21:04:57,
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),140,148,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",173,178,,,0,2022-04-17 21:04:57,
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),179,181,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),170,172,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",2,5,,,0,2022-04-17 21:04:57,
flag_groups.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,Marc Khouzam,5f2ec3c,0,2022-09-16 11:55:56,2022-06-21 02:04:28
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",8,25,,,0,2022-04-17 21:04:57,
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",29,39,,,0,2022-04-17 21:04:57,
flag_groups.go,5c2c1d6,Nir Soffer,"Consistent annotation names (#2140)  Add `Annotation` suffix to the private annotations to allow nicer code using the constants.  For example one can use the current annotation names as a temporary variable instead of unclear shortcut. Instead of this:      rag := flagsFromAnnotation(c, f, requiredAsGroup)     me := flagsFromAnnotation(c, f, mutuallyExclusive)     or := flagsFromAnnotation(c, f, oneRequired)  We can use now:      requiredAsGrop := flagsFromAnnotation(c, f, requiredAsGroupAnnotation)     mutuallyExclusive := flagsFromAnnotation(c, f, mutuallyExclusiveAnnotation)     oneRequired := flagsFromAnnotation(c, f, oneRequiredAnnotation)  Example taken from #2105.",40,40,Ville Skyttä,3d8ac43,0,2024-05-18 13:41:31,2023-11-23 17:24:33
flag_groups.go,5c2c1d6,Nir Soffer,"Consistent annotation names (#2140)  Add `Annotation` suffix to the private annotations to allow nicer code using the constants.  For example one can use the current annotation names as a temporary variable instead of unclear shortcut. Instead of this:      rag := flagsFromAnnotation(c, f, requiredAsGroup)     me := flagsFromAnnotation(c, f, mutuallyExclusive)     or := flagsFromAnnotation(c, f, oneRequired)  We can use now:      requiredAsGrop := flagsFromAnnotation(c, f, requiredAsGroupAnnotation)     mutuallyExclusive := flagsFromAnnotation(c, f, mutuallyExclusiveAnnotation)     oneRequired := flagsFromAnnotation(c, f, oneRequiredAnnotation)  Example taken from #2105.",26,28,Ville Skyttä,3d8ac43,0,2024-05-18 13:41:31,2023-11-23 17:24:33
flag_groups.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Skeet WU,fce8d8a,0,2023-03-06 02:28:31,2022-09-27 10:27:48
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",41,46,,,0,2022-04-17 21:04:57,
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),47,55,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",63,72,,,0,2022-04-17 21:04:57,
flag_groups.go,5c2c1d6,Nir Soffer,"Consistent annotation names (#2140)  Add `Annotation` suffix to the private annotations to allow nicer code using the constants.  For example one can use the current annotation names as a temporary variable instead of unclear shortcut. Instead of this:      rag := flagsFromAnnotation(c, f, requiredAsGroup)     me := flagsFromAnnotation(c, f, mutuallyExclusive)     or := flagsFromAnnotation(c, f, oneRequired)  We can use now:      requiredAsGrop := flagsFromAnnotation(c, f, requiredAsGroupAnnotation)     mutuallyExclusive := flagsFromAnnotation(c, f, mutuallyExclusiveAnnotation)     oneRequired := flagsFromAnnotation(c, f, oneRequiredAnnotation)  Example taken from #2105.",73,73,Ville Skyttä,3d8ac43,0,2024-05-18 13:41:31,2023-11-23 17:24:33
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),57,62,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,5c2c1d6,Nir Soffer,"Consistent annotation names (#2140)  Add `Annotation` suffix to the private annotations to allow nicer code using the constants.  For example one can use the current annotation names as a temporary variable instead of unclear shortcut. Instead of this:      rag := flagsFromAnnotation(c, f, requiredAsGroup)     me := flagsFromAnnotation(c, f, mutuallyExclusive)     or := flagsFromAnnotation(c, f, oneRequired)  We can use now:      requiredAsGrop := flagsFromAnnotation(c, f, requiredAsGroupAnnotation)     mutuallyExclusive := flagsFromAnnotation(c, f, mutuallyExclusiveAnnotation)     oneRequired := flagsFromAnnotation(c, f, oneRequiredAnnotation)  Example taken from #2105.",56,56,Ville Skyttä,3d8ac43,0,2024-05-18 13:41:31,2023-11-23 17:24:33
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",80,80,,,0,2022-04-17 21:04:57,
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),79,79,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",74,78,,,0,2022-04-17 21:04:57,
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",82,90,,,0,2022-04-17 21:04:57,
flag_groups.go,fce8d8a,Skeet WU,Expose ValidateRequiredFlags and ValidateFlagGroups (#1760),81,81,,,0,2022-09-27 10:27:48,
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",92,93,,,0,2022-04-17 21:04:57,
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),91,91,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",97,101,,,0,2022-04-17 21:04:57,
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",105,132,,,0,2022-04-17 21:04:57,
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),102,104,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,5c2c1d6,Nir Soffer,"Consistent annotation names (#2140)  Add `Annotation` suffix to the private annotations to allow nicer code using the constants.  For example one can use the current annotation names as a temporary variable instead of unclear shortcut. Instead of this:      rag := flagsFromAnnotation(c, f, requiredAsGroup)     me := flagsFromAnnotation(c, f, mutuallyExclusive)     or := flagsFromAnnotation(c, f, oneRequired)  We can use now:      requiredAsGrop := flagsFromAnnotation(c, f, requiredAsGroupAnnotation)     mutuallyExclusive := flagsFromAnnotation(c, f, mutuallyExclusiveAnnotation)     oneRequired := flagsFromAnnotation(c, f, oneRequiredAnnotation)  Example taken from #2105.",94,96,Ville Skyttä,3d8ac43,0,2024-05-18 13:41:31,2023-11-23 17:24:33
flag_groups.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",133,133,Martijn Evers,c81c46a,1,2023-11-23 17:24:33,2023-07-16 16:38:22
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",134,166,,,0,2022-04-17 21:04:57,
flag_groups.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",188,218,,,0,2022-04-17 21:04:57,
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),222,222,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),167,187,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),232,232,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",223,231,John Schnake,68b6b24,0,2022-06-21 02:04:28,2022-04-17 21:04:57
flag_groups.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",233,234,,,0,2022-06-21 02:04:28,
flag_groups.go,5c2c1d6,Nir Soffer,"Consistent annotation names (#2140)  Add `Annotation` suffix to the private annotations to allow nicer code using the constants.  For example one can use the current annotation names as a temporary variable instead of unclear shortcut. Instead of this:      rag := flagsFromAnnotation(c, f, requiredAsGroup)     me := flagsFromAnnotation(c, f, mutuallyExclusive)     or := flagsFromAnnotation(c, f, oneRequired)  We can use now:      requiredAsGrop := flagsFromAnnotation(c, f, requiredAsGroupAnnotation)     mutuallyExclusive := flagsFromAnnotation(c, f, mutuallyExclusiveAnnotation)     oneRequired := flagsFromAnnotation(c, f, oneRequiredAnnotation)  Example taken from #2105.",235,237,Ville Skyttä,3d8ac43,0,2024-05-18 13:41:31,2023-11-23 17:24:33
flag_groups.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",219,221,John Schnake,68b6b24,0,2022-06-21 02:04:28,2022-04-17 21:04:57
flag_groups.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",238,252,,,0,2022-06-21 02:04:28,
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),253,255,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",256,256,Martijn Evers,c81c46a,1,2023-11-23 17:24:33,2023-07-16 16:38:22
flag_groups.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",260,260,Martijn Evers,c81c46a,1,2023-11-23 17:24:33,2023-07-16 16:38:22
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),261,265,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),257,257,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",258,258,Martijn Evers,c81c46a,1,2023-11-23 17:24:33,2023-07-16 16:38:22
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),267,272,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",266,266,Martijn Evers,c81c46a,1,2023-11-23 17:24:33,2023-07-16 16:38:22
flag_groups.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),259,259,Unai Martinez-Corral,9e6b58a,0,2023-07-16 16:38:22,2023-03-06 02:28:31
flag_groups.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",273,290,,,0,2022-06-21 02:04:28,
go.mod,9f90567,Sebastiaan van Stijn,"build(deps): bump github.com/cpuguy83/go-md2man/v2 from 2.0.5 to 2.0.6 (#2206)  fix compatibility with go versions before go1.17  diff: https://github.com/cpuguy83/go-md2man/compare/v2.0.5...v2.0.6  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",6,6,Mikel Olasagasti Uranga,8519630,1,2024-12-17 02:26:34,2024-12-11 12:26:08
go.mod,5755ecf,umarcor,"[TrivialPatches] Typos in README.md, fix and update CI, update projects list... (#840)  * update Example in README.md (#769)  * specify the color as the required arg (#777)  * command: fix typo in docstring of InheritedFlags (#779)  * add istio to the list of projects built with Cobra (#786)  * remove redundant 'else' (#806)  * add mattermost-server as a project built with Cobra (#824)  * update README.md (#826)  Fix the comment: consistent with others  * add uber/prototool as a project built with Cobra (#831)  * fix(ci): use go vet, update to Go 1.12, update shellcheck to v0.4.6 (#832)  * add go.mod and go.sum (#833)  * chore(travis): move 'diff' job to separate stage in Travis (#839)  * chore(travis): use language configuration list instead of explicit entries in matrix.include (#839)  * chore(travis): update shellcheck-docker to v0.6.0 (#839)  * update(README.md): separate projects by commas, instead of using a list  * chore: update viper to v1.3.2 and go-md2man to v1.0.10  * fix: convert CRLF to LF when comparing files  * use kyoh86/richgo to provide colored test outputs",1,2,,,1,2019-03-20 21:21:26,
go.mod,4fd30b6,Unai Martinez-Corral,"ci: test golang 1.16.x and 1.17.x too (#1425)  * ci: test golang 1.16.x too  * ci: style  * ci: test golang 1.17.x too  * bump go.mod to 1.15  * run gofmt",3,3,Sebastiaan van Stijn,2a52778,0,2021-08-26 03:18:53,2021-08-05 17:08:25
go.mod,5755ecf,umarcor,"[TrivialPatches] Typos in README.md, fix and update CI, update projects list... (#840)  * update Example in README.md (#769)  * specify the color as the required arg (#777)  * command: fix typo in docstring of InheritedFlags (#779)  * add istio to the list of projects built with Cobra (#786)  * remove redundant 'else' (#806)  * add mattermost-server as a project built with Cobra (#824)  * update README.md (#826)  Fix the comment: consistent with others  * add uber/prototool as a project built with Cobra (#831)  * fix(ci): use go vet, update to Go 1.12, update shellcheck to v0.4.6 (#832)  * add go.mod and go.sum (#833)  * chore(travis): move 'diff' job to separate stage in Travis (#839)  * chore(travis): use language configuration list instead of explicit entries in matrix.include (#839)  * chore(travis): update shellcheck-docker to v0.6.0 (#839)  * update(README.md): separate projects by commas, instead of using a list  * chore: update viper to v1.3.2 and go-md2man to v1.0.10  * fix: convert CRLF to LF when comparing files  * use kyoh86/richgo to provide colored test outputs",4,5,,,1,2019-03-20 21:21:26,
go.mod,5755ecf,umarcor,"[TrivialPatches] Typos in README.md, fix and update CI, update projects list... (#840)  * update Example in README.md (#769)  * specify the color as the required arg (#777)  * command: fix typo in docstring of InheritedFlags (#779)  * add istio to the list of projects built with Cobra (#786)  * remove redundant 'else' (#806)  * add mattermost-server as a project built with Cobra (#824)  * update README.md (#826)  Fix the comment: consistent with others  * add uber/prototool as a project built with Cobra (#831)  * fix(ci): use go vet, update to Go 1.12, update shellcheck to v0.4.6 (#832)  * add go.mod and go.sum (#833)  * chore(travis): move 'diff' job to separate stage in Travis (#839)  * chore(travis): use language configuration list instead of explicit entries in matrix.include (#839)  * chore(travis): update shellcheck-docker to v0.6.0 (#839)  * update(README.md): separate projects by commas, instead of using a list  * chore: update viper to v1.3.2 and go-md2man to v1.0.10  * fix: convert CRLF to LF when comparing files  * use kyoh86/richgo to provide colored test outputs",10,10,,,1,2019-03-20 21:21:26,
go.mod,5f9c408,John McBride,chore: Upgrade dependencies for v1.9.0 (#2233)  Signed-off-by: John McBirde <jpmmcbride@gmail.com>,8,8,Sebastiaan van Stijn,9f90567,0,2025-02-15 18:17:48,2024-12-17 02:26:34
go.mod,dbf85f6,Tobias Klauser,"Update gopkg.in/yaml.v2 to gopkg.in/yaml.v3 (#1766)  API v3 was released in 2019 [1]. Update from the v2 API, no changes to the packages's use needed and no breaking changes expected.  [1] https://ubuntu.com/blog/api-v3-of-the-yaml-package-for-go-is-available",9,9,dependabot[bot],6bf8cd8,0,2022-08-13 22:18:46,2022-08-13 21:02:01
go.mod,4fa4fdf,dependabot[bot],build(deps): bump github.com/inconshreveable/mousetrap (#1872),7,7,Tobias Klauser,dbf85f6,0,2023-01-03 02:43:06,2022-08-13 22:18:46
MAINTAINERS,8267283,Marc Khouzam,"Add MAINTAINERS file (alphabetical order) (#1545)  This should help the community know who they can turn to, but also give credit to the maintainers for all their hard work.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1,13,,,0,2022-02-28 15:24:45,
go.sum,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",9,9,John McBride,5b2b9e9,0,2022-04-17 21:04:57,2022-03-10 15:19:35
go.sum,dbf85f6,Tobias Klauser,"Update gopkg.in/yaml.v2 to gopkg.in/yaml.v3 (#1766)  API v3 was released in 2019 [1]. Update from the v2 API, no changes to the packages's use needed and no breaking changes expected.  [1] https://ubuntu.com/blog/api-v3-of-the-yaml-package-for-go-is-available",11,12,dependabot[bot],6bf8cd8,0,2022-08-13 22:18:46,2022-08-13 21:02:01
go.sum,9f90567,Sebastiaan van Stijn,"build(deps): bump github.com/cpuguy83/go-md2man/v2 from 2.0.5 to 2.0.6 (#2206)  fix compatibility with go versions before go1.17  diff: https://github.com/cpuguy83/go-md2man/compare/v2.0.5...v2.0.6  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",1,2,Mikel Olasagasti Uranga,8519630,1,2024-12-17 02:26:34,2024-12-11 12:26:08
go.sum,5f9c408,John McBride,chore: Upgrade dependencies for v1.9.0 (#2233)  Signed-off-by: John McBirde <jpmmcbride@gmail.com>,7,8,Sebastiaan van Stijn,9f90567,0,2025-02-15 18:17:48,2024-12-17 02:26:34
go.sum,5755ecf,umarcor,"[TrivialPatches] Typos in README.md, fix and update CI, update projects list... (#840)  * update Example in README.md (#769)  * specify the color as the required arg (#777)  * command: fix typo in docstring of InheritedFlags (#779)  * add istio to the list of projects built with Cobra (#786)  * remove redundant 'else' (#806)  * add mattermost-server as a project built with Cobra (#824)  * update README.md (#826)  Fix the comment: consistent with others  * add uber/prototool as a project built with Cobra (#831)  * fix(ci): use go vet, update to Go 1.12, update shellcheck to v0.4.6 (#832)  * add go.mod and go.sum (#833)  * chore(travis): move 'diff' job to separate stage in Travis (#839)  * chore(travis): use language configuration list instead of explicit entries in matrix.include (#839)  * chore(travis): update shellcheck-docker to v0.6.0 (#839)  * update(README.md): separate projects by commas, instead of using a list  * chore: update viper to v1.3.2 and go-md2man to v1.0.10  * fix: convert CRLF to LF when comparing files  * use kyoh86/richgo to provide colored test outputs",10,10,,,1,2019-03-20 21:21:26,
go.sum,4fa4fdf,dependabot[bot],build(deps): bump github.com/inconshreveable/mousetrap (#1872),3,4,Tobias Klauser,dbf85f6,0,2023-01-03 02:43:06,2022-08-13 22:18:46
go.sum,2a52778,Sebastiaan van Stijn,"go.mod: cpuguy83/go-md2man/v2 v2.0.1 (#1460)  full diff: https://github.com/cpuguy83/go-md2man/compare/v2.0.0...v2.0.1  - Fix handling multiple definition descriptions - Fix inline markup causing table cells to split - Remove escaping tilde character (prevents tildes (`~`) from disappearing). - Do not escape dash, underscore, and ampersand (prevents ampersands (`&`) from disappearing). - Ignore unknown HTML tags to prevent noisy warnings  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",5,6,Anthony Fok,1135bde,1,2021-08-05 17:08:25,2021-02-01 19:44:33
Makefile,39cf99f,Joshua Harshman,leverage makefile to run build tasks (#976)  remove circle ci,9,11,,,0,2020-02-20 19:25:38,
Makefile,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,4,7,Joshua Harshman,39cf99f,1,2021-02-08 00:08:50,2020-02-20 19:25:38
Makefile,5b2b9e9,John McBride,"Removes viper dependency by removing cobra/ CLI tool (#1604)  The cobra bootstrapping CLI tool has moved to https://github.com/spf13/cobra-cli  Signed-off-by: John McBride <jmcbride@vmware.com>",12,12,Matthieu MOREL,ff2c55e,0,2022-03-10 15:19:35,2021-12-07 23:06:09
Makefile,39cf99f,Joshua Harshman,leverage makefile to run build tasks (#976)  remove circle ci,13,17,,,0,2020-02-20 19:25:38,
Makefile,ff2c55e,Matthieu MOREL,chore(ci): use golangci-lint-action (#1477)  Signed-off-by: Matthieu MOREL <mmorel-35@users.noreply.github.com>,22,22,Joshua Harshman,39cf99f,0,2021-12-07 23:06:09,2020-02-20 19:25:38
Makefile,39cf99f,Joshua Harshman,leverage makefile to run build tasks (#976)  remove circle ci,1,3,,,0,2020-02-20 19:25:38,
Makefile,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,18,21,Joshua Harshman,39cf99f,1,2021-02-08 00:08:50,2020-02-20 19:25:38
Makefile,39cf99f,Joshua Harshman,leverage makefile to run build tasks (#976)  remove circle ci,23,23,,,0,2020-02-20 19:25:38,
Makefile,6200c8e,Unai Martinez-Corral,Makefile: add target richtest (#1865)  Don't require contributors to install richgo but keep it as an option and for CI,24,27,Marc Khouzam,0580724,0,2022-11-25 20:55:09,2022-08-30 14:34:58
Makefile,5b2b9e9,John McBride,"Removes viper dependency by removing cobra/ CLI tool (#1604)  The cobra bootstrapping CLI tool has moved to https://github.com/spf13/cobra-cli  Signed-off-by: John McBride <jmcbride@vmware.com>",8,8,Joshua Harshman,39cf99f,0,2022-03-10 15:19:35,2020-02-20 19:25:38
Makefile,39cf99f,Joshua Harshman,leverage makefile to run build tasks (#976)  remove circle ci,28,29,,,0,2020-02-20 19:25:38,
Makefile,39cf99f,Joshua Harshman,leverage makefile to run build tasks (#976)  remove circle ci,34,35,,,0,2020-02-20 19:25:38,
Makefile,39cf99f,Joshua Harshman,leverage makefile to run build tasks (#976)  remove circle ci,30,33,,,0,2020-02-20 19:25:38,
fish_completions.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Gyanendra Mishra,3daa4b9,0,2023-03-06 02:28:31,2023-02-25 20:57:12
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,15,21,,,0,2020-04-10 19:56:28,
fish_completions.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",22,22,,,0,2020-07-10 20:12:46,
fish_completions.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",26,27,,,0,2020-07-10 20:12:46,
fish_completions.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,23,24,,,0,2020-04-10 19:56:28,
fish_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,25,25,Matej Vasek,b97b5ea,1,2021-02-08 00:08:50,2020-10-06 03:54:06
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,31,34,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",38,38,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",30,30,,,0,2020-07-10 20:12:46,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,37,37,,,0,2020-04-10 19:56:28,
fish_completions.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",28,29,Marc Khouzam,06e4b59,0,2022-05-14 20:10:36,2021-05-03 16:23:34
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,39,44,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",45,45,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,46,46,,,0,2020-04-10 19:56:28,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,58,58,,,0,2020-04-10 19:56:28,
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,56,56,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",47,50,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,51,54,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",59,59,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",57,57,,,0,2020-06-29 19:52:14,
fish_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,35,36,,,1,2021-02-08 00:08:50,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,80,91,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",73,75,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,06e4b59,Marc Khouzam,"Allow fish comp to support trailing empty lines (#1284)  Some programs may output extra empty lines after the directive. Those lines must be ignored for fish shell completion to work. zsh and bash are not impacted.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca> Co-authored-by: Johannes Altmanninger <aclopte@gmail.com>  Co-authored-by: Johannes Altmanninger <aclopte@gmail.com>",60,72,Unai Martinez-Corral,652c755,0,2021-05-03 16:23:34,2021-02-08 00:08:50
fish_completions.go,284f410,Tom Payne,Fix typo in fish completions (#1945),116,116,Unai Martinez-Corral,9e6b58a,1,2023-04-08 04:47:33,2023-03-06 02:28:31
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,92,115,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,76,78,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",79,79,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,117,145,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,153,153,,,0,2020-04-10 19:56:28,
fish_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),55,55,Unai Martinez-Corral,652c755,0,2022-06-16 00:08:16,2021-02-08 00:08:50
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",150,152,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",146,148,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,149,149,,,0,2020-04-10 19:56:28,
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,156,157,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,154,155,,,0,2020-04-10 19:56:28,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,160,161,,,0,2020-04-10 19:56:28,
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,159,159,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,158,158,,,0,2020-04-10 19:56:28,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,163,164,,,0,2020-04-10 19:56:28,
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",162,162,Marc Khouzam,a684a6d,0,2020-06-29 19:52:14,2020-04-10 19:56:28
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,165,166,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",176,176,Marc Khouzam,a684a6d,0,2020-06-29 19:52:14,2020-04-10 19:56:28
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,167,170,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",171,175,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,177,180,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",181,181,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",185,185,,,0,2020-06-29 19:52:14,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,186,187,,,0,2020-04-10 19:56:28,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,182,184,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",196,197,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",188,189,Marc Khouzam,06e4b59,1,2021-05-03 18:00:01,2021-05-03 16:23:34
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",190,192,,,0,2020-06-29 19:52:14,
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",193,195,,,0,2020-06-29 19:52:14,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,198,200,,,0,2020-04-10 19:56:28,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,243,244,,,0,2020-04-10 19:56:28,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,236,236,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",225,227,,,1,2021-05-03 18:00:01,
fish_completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",224,224,,,1,2021-07-02 15:25:47,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",229,235,,,1,2021-05-03 18:00:01,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",201,223,Marc Khouzam,a684a6d,1,2021-05-03 18:00:01,2020-04-10 19:56:28
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,246,247,,,0,2020-04-10 19:56:28,
fish_completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",228,228,,,1,2021-07-02 15:25:47,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",237,242,,,1,2021-05-03 18:00:01,
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",248,249,,,0,2020-06-29 19:52:14,
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,261,261,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",245,245,,,1,2021-05-03 18:00:01,
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",258,259,,,0,2020-06-29 19:52:14,
fish_completions.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",260,260,,,0,2020-07-10 20:12:46,
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,262,263,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,675ae5f,Marc Khouzam,"Fish does not accept - or : in vars (#1122)  Fixes #1121. This is for programs that may contain a : or - in their name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",270,270,,,0,2020-07-10 20:12:46,
fish_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",271,271,,,0,2020-06-29 19:52:14,
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,266,269,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,273,292,,,0,2020-04-10 19:56:28,
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",250,257,,,1,2021-05-03 18:00:01,
fish_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,272,272,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
fish_completions.go,c2e21bd,Marc Khouzam,"Fix multiple fish completion issues (#1249)  * Fix fish for ShellDirectiveNoSpace and file comp  For fish shell we achieve ShellDirectiveNoSpace by outputing a fake second completion with an extra character.  However, this extra character was being added after the description string, instead of before.  This commit fixes that.  It also cleans up the script of useless code, now that fish completion details are better understood.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Handle case when completion starts with a space  Fixes #1303  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Support fish completion with env vars in the path  Fixes https://github.com/spf13/cobra/issues/1214 Fixes https://github.com/spf13/cobra/issues/1306  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update based on review  1- We use `set -l` for local variable to make sure there are no    conflicts with global variables 2- We use `commandline -opc` which:    a) splits the command line into tokens (-o)    b) only considers the current command (-p) (e.g., echo hello; helm <TAB>)    c) stops at the cursor (-c) 3- We extract the last arg with `commandline -ct` and escape it to handle    the case where it is a space, or unmatched quote. 4- We avoid looping when filtering on prefix. 5- We don't add a fake comp for ShellCompDirectiveNoSpace when the    completion ends with any of @=/:., as fish won't add a space  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",264,265,,,1,2021-05-03 18:00:01,
powershell_completions_test.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),33,33,,,0,2022-06-16 00:08:16,
powershell_completions_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
powershell_completions_test.go,fdee73b,Paul Holzinger,"powershell: escape variable with curly brackets (#1960)  This fixes an issue with program names that include a dot, in our case `podman.exe`. This was caused by the change in commit 6ba7ebbc.  Fixes #1853  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",32,32,Unai Martinez-Corral,9e6b58a,1,2023-06-19 16:16:18,2023-03-06 02:28:31
powershell_completions_test.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),15,31,,,0,2022-06-16 00:08:16,
powershell_completions_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,fe08012,0,2022-09-16 11:55:56,2022-09-11 21:04:53
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,23,27,,,0,2019-06-07 14:09:50,
shell_completions.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,2c5a0d3,0,2022-09-16 11:55:56,2020-06-29 19:52:14
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,15,20,,,0,2019-06-07 14:09:50,
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",35,36,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,30,34,,,0,2019-06-07 14:09:50,
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",21,22,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",28,29,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,37,41,,,0,2019-06-07 14:09:50,
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",42,43,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,61,65,,,0,2019-06-07 14:09:50,
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,44,48,,,0,2019-06-07 14:09:50,
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,67,70,,,0,2019-06-07 14:09:50,
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",66,66,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",49,53,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,54,58,,,0,2019-06-07 14:09:50,
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",74,76,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,73,73,,,0,2019-06-07 14:09:50,
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,77,81,,,0,2019-06-07 14:09:50,
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",59,60,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",71,72,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",82,82,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",95,95,,,0,2020-06-29 19:52:14,
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,90,94,,,0,2019-06-07 14:09:50,
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,83,87,,,0,2019-06-07 14:09:50,
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",88,89,,,0,2020-06-29 19:52:14,
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,98,98,,,0,2019-06-07 14:09:50,
shell_completions.go,e2c45ac,Haim Ashkenazi,Started working on Unified API for the various shell completions:  - Moved some general function to a more generic shell_completions file. - Added functions to mark flag as directory completion. - Started making the global functions docs more generic (not bash   specific) and added compatibility matrix.,96,96,,,0,2019-06-07 14:09:50,
shell_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",97,97,,,0,2020-06-29 19:52:14,
zsh_completions_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Unai Martinez-Corral,6d978a9,0,2023-03-06 02:28:31,2022-09-16 11:55:56
zsh_completions_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
zsh_completions_test.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),15,33,Marc Khouzam,2c5a0d3,0,2022-06-16 00:08:16,2020-06-29 19:52:14
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,26,27,,,0,2019-06-07 14:26:08,
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,15,24,,,0,2019-06-07 14:26:08,
powershell_completions.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
powershell_completions.go,d4040ad,Marc Khouzam,"Allow user to add completion for powershell alias (#1621)  When a user has an alias in powershell, she will need to register that alias for completion.  To make that possible, we store the completion logic into a scriptblock variable which can easily be accessed by the user to register aliases.  For example, if the user defines an alias for `helm`:    PS> sal h helm she will need to register the alias like so:    PS> Register-ArgumentCompleter -CommandName 'h' -ScriptBlock $__helmCompleterBlock  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",25,25,Unai Martinez-Corral,6d978a9,0,2022-10-03 17:06:04,2022-09-16 11:55:56
powershell_completions.go,d4040ad,Marc Khouzam,"Allow user to add completion for powershell alias (#1621)  When a user has an alias in powershell, she will need to register that alias for completion.  To make that possible, we store the completion logic into a scriptblock variable which can easily be accessed by the user to register aliases.  For example, if the user defines an alias for `helm`:    PS> sal h helm she will need to register the alias like so:    PS> Register-ArgumentCompleter -CommandName 'h' -ScriptBlock $__helmCompleterBlock  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",29,30,Unai Martinez-Corral,6d978a9,0,2022-10-03 17:06:04,2022-09-16 11:55:56
powershell_completions.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Oldřich Jedlička,567ea8e,0,2023-03-06 02:28:31,2023-02-25 21:30:37
powershell_completions.go,6b5f577,Ville Skyttä,"More linting (#2099)  * Address gocritic findings, enable it  * Enable gosimple, no new findings to address",31,32,Paul Holzinger,fdee73b,0,2024-04-01 12:42:08,2023-06-19 16:16:18
powershell_completions.go,d4040ad,Marc Khouzam,"Allow user to add completion for powershell alias (#1621)  When a user has an alias in powershell, she will need to register that alias for completion.  To make that possible, we store the completion logic into a scriptblock variable which can easily be accessed by the user to register aliases.  For example, if the user defines an alias for `helm`:    PS> sal h helm she will need to register the alias like so:    PS> Register-ArgumentCompleter -CommandName 'h' -ScriptBlock $__helmCompleterBlock  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",33,33,Unai Martinez-Corral,6d978a9,0,2022-10-03 17:06:04,2022-09-16 11:55:56
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,28,28,Jan Kuehle,21ccc7b,1,2021-02-08 00:08:50,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",34,36,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,37,37,,,0,2019-06-07 14:26:08,
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,39,39,,,0,2019-06-07 14:26:08,
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,44,45,,,0,2019-06-07 14:26:08,
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,48,49,,,0,2019-06-07 14:26:08,
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",40,43,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,38,38,Jan Kuehle,21ccc7b,1,2021-02-08 00:08:50,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",46,47,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,fdee73b,Paul Holzinger,"powershell: escape variable with curly brackets (#1960)  This fixes an issue with program names that include a dot, in our case `podman.exe`. This was caused by the change in commit 6ba7ebbc.  Fixes #1853  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",50,50,Unai Martinez-Corral,9e6b58a,1,2023-06-19 16:16:18,2023-03-06 02:28:31
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",51,68,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,69,69,Paul Holzinger,a4ab3fa,1,2021-02-08 00:08:50,2020-12-29 14:57:32
powershell_completions.go,d4040ad,Marc Khouzam,"Allow user to add completion for powershell alias (#1621)  When a user has an alias in powershell, she will need to register that alias for completion.  To make that possible, we store the completion logic into a scriptblock variable which can easily be accessed by the user to register aliases.  For example, if the user defines an alias for `helm`:    PS> sal h helm she will need to register the alias like so:    PS> Register-ArgumentCompleter -CommandName 'h' -ScriptBlock $__helmCompleterBlock  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",75,79,Unai Martinez-Corral,6d978a9,0,2022-10-03 17:06:04,2022-09-16 11:55:56
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",70,72,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,80,80,Norman Dankert,c6b9971,0,2023-02-25 20:57:12,2022-11-25 20:47:20
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",81,81,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,74,74,Jan Kuehle,21ccc7b,1,2021-02-08 00:08:50,2019-06-07 14:26:08
powershell_completions.go,d4040ad,Marc Khouzam,"Allow user to add completion for powershell alias (#1621)  When a user has an alias in powershell, she will need to register that alias for completion.  To make that possible, we store the completion logic into a scriptblock variable which can easily be accessed by the user to register aliases.  For example, if the user defines an alias for `helm`:    PS> sal h helm she will need to register the alias like so:    PS> Register-ArgumentCompleter -CommandName 'h' -ScriptBlock $__helmCompleterBlock  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",86,86,Unai Martinez-Corral,6d978a9,0,2022-10-03 17:06:04,2022-09-16 11:55:56
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",83,84,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,507caf5,Sebastiaan van Stijn,"completions: fix mixed tab/spaces indentation (#1473)  These templates use 4 spaces for indentation, but some lines used tabs.  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",73,73,Jan Kuehle,21ccc7b,1,2021-12-07 22:57:57,2019-06-07 14:26:08
powershell_completions.go,567ea8e,Oldřich Jedlička,"Add support for PowerShell 7.2+ (#1916)  PowerShell 7.2 has changed the way arguments are passed to executables. This was originally an experimental feature in 7.2, but as of 7.3 it is built-in. A simple """" is now sufficient for passing empty arguments, no back-tick escaping is required.  Fixes #1849  Signed-off-by: Oldřich Jedlička <oldium.pro@gmail.com> Co-authored-by: Oldřich Jedlička <oldrich.jedlicka@rohlik.cz>",110,120,Gyanendra Mishra,3daa4b9,0,2023-02-25 21:30:37,2023-02-25 20:57:12
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",87,88,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",90,109,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,89,89,Jan Kuehle,21ccc7b,1,2021-02-08 00:08:50,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",121,123,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,fdee73b,Paul Holzinger,"powershell: escape variable with curly brackets (#1960)  This fixes an issue with program names that include a dot, in our case `podman.exe`. This was caused by the change in commit 6ba7ebbc.  Fixes #1853  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",125,125,Unai Martinez-Corral,9e6b58a,1,2023-06-19 16:16:18,2023-03-06 02:28:31
powershell_completions.go,507caf5,Sebastiaan van Stijn,"completions: fix mixed tab/spaces indentation (#1473)  These templates use 4 spaces for indentation, but some lines used tabs.  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",82,82,Jan Kuehle,21ccc7b,1,2021-12-07 22:57:57,2019-06-07 14:26:08
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,138,138,Jan Kuehle,21ccc7b,1,2021-02-08 00:08:50,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",139,149,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),124,124,Jan Kuehle,21ccc7b,0,2022-06-16 00:08:16,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",131,137,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",127,130,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",169,178,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),85,85,Jan Kuehle,21ccc7b,0,2022-06-16 00:08:16,2019-06-07 14:26:08
powershell_completions.go,5a138f1,Leonhard Stemplinger,"Make Powershell completion script work in constrained mode (#2196)  Creating CompletionResult objects is not allowed in Powershell constrained mode, so return results as strings if constrained mode is enabled  Store results as PsCustomObjects instead of hashtables. This prevents Sort-Object from trying to convert the hashtable to a object, which is blocked in constrained mode. PsCustomObjects are created using New-Object to work around https://github.com/PowerShell/PowerShell/issues/20767",165,168,Ville Skyttä,6b5f577,0,2024-11-04 00:45:01,2024-04-01 12:42:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",151,164,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",180,189,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,190,190,,,0,2019-06-07 14:26:08,
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",192,195,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,196,196,Jan Kuehle,21ccc7b,1,2021-02-08 00:08:50,2019-06-07 14:26:08
powershell_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),126,126,Jan Kuehle,21ccc7b,0,2022-06-16 00:08:16,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",197,197,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,179,179,Jan Kuehle,21ccc7b,1,2021-02-08 00:08:50,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",216,221,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,4590150,tamo,"Correcting misspelled words (#1349)  * Correcting Misspelled Words * grammar fixes",191,191,Jan Kuehle,21ccc7b,0,2021-05-10 23:19:33,2019-06-07 14:26:08
powershell_completions.go,7223a99,Paul Holzinger,"powershell completion fix no file comp directive (#1363)  Make sure to filter the returned completions before we check if there are valid completions left.  Fixes #1362  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",203,215,Jan Kuehle,21ccc7b,1,2021-05-03 16:25:30,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",226,243,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,198,202,Paul Holzinger,ded486a,0,2023-02-25 20:57:12,2021-02-14 17:27:21
powershell_completions.go,5a138f1,Leonhard Stemplinger,"Make Powershell completion script work in constrained mode (#2196)  Creating CompletionResult objects is not allowed in Powershell constrained mode, so return results as strings if constrained mode is enabled  Store results as PsCustomObjects instead of hashtables. This prevents Sort-Object from trying to convert the hashtable to a object, which is blocked in constrained mode. PsCustomObjects are created using New-Object to work around https://github.com/PowerShell/PowerShell/issues/20767",246,251,Ville Skyttä,6b5f577,0,2024-11-04 00:45:01,2024-04-01 12:42:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",245,245,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",223,224,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,07445ea,Anthony Fok,Copyedit shell-completion related documentation,225,225,Paul Holzinger,a4ab3fa,0,2021-02-09 21:08:42,2020-12-29 14:57:32
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,244,244,,,0,2019-06-07 14:26:08,
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",252,265,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,4590150,tamo,"Correcting misspelled words (#1349)  * Correcting Misspelled Words * grammar fixes",222,222,Jan Kuehle,21ccc7b,0,2021-05-10 23:19:33,2019-06-07 14:26:08
powershell_completions.go,5a138f1,Leonhard Stemplinger,"Make Powershell completion script work in constrained mode (#2196)  Creating CompletionResult objects is not allowed in Powershell constrained mode, so return results as strings if constrained mode is enabled  Store results as PsCustomObjects instead of hashtables. This prevents Sort-Object from trying to convert the hashtable to a object, which is blocked in constrained mode. PsCustomObjects are created using New-Object to work around https://github.com/PowerShell/PowerShell/issues/20767",266,271,Ville Skyttä,6b5f577,0,2024-11-04 00:45:01,2024-04-01 12:42:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",287,290,,,0,2020-12-29 14:57:32,
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,291,291,,,1,2021-02-08 00:08:50,
powershell_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,278,278,Jan Kuehle,21ccc7b,1,2021-02-08 00:08:50,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",292,292,,,0,2020-12-29 14:57:32,
powershell_completions.go,5a138f1,Leonhard Stemplinger,"Make Powershell completion script work in constrained mode (#2196)  Creating CompletionResult objects is not allowed in Powershell constrained mode, so return results as strings if constrained mode is enabled  Store results as PsCustomObjects instead of hashtables. This prevents Sort-Object from trying to convert the hashtable to a object, which is blocked in constrained mode. PsCustomObjects are created using New-Object to work around https://github.com/PowerShell/PowerShell/issues/20767",280,286,Ville Skyttä,6b5f577,0,2024-11-04 00:45:01,2024-04-01 12:42:08
powershell_completions.go,5a138f1,Leonhard Stemplinger,"Make Powershell completion script work in constrained mode (#2196)  Creating CompletionResult objects is not allowed in Powershell constrained mode, so return results as strings if constrained mode is enabled  Store results as PsCustomObjects instead of hashtables. This prevents Sort-Object from trying to convert the hashtable to a object, which is blocked in constrained mode. PsCustomObjects are created using New-Object to work around https://github.com/PowerShell/PowerShell/issues/20767",294,300,Ville Skyttä,6b5f577,0,2024-11-04 00:45:01,2024-04-01 12:42:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",279,279,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,c6b9971,Norman Dankert,fix: force ForEach-Object to return array in pwsh completion (#1850)  Fixes #1847,150,150,Jan Kuehle,21ccc7b,1,2022-11-25 20:47:20,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",272,277,Jan Kuehle,21ccc7b,0,2020-12-29 14:57:32,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",311,315,,,0,2020-12-29 14:57:32,
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",309,309,,,0,2020-12-29 14:57:32,
powershell_completions.go,1854bb5,Stefan Weil,Fix some typos (mostly found by codespell) (#1514)  Signed-off-by: Stefan Weil <sw@weilnetz.de>,293,293,,,1,2021-12-07 23:06:52,
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,316,319,,,0,2019-06-07 14:26:08,
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",301,305,,,0,2020-12-29 14:57:32,
powershell_completions.go,d4040ad,Marc Khouzam,"Allow user to add completion for powershell alias (#1621)  When a user has an alias in powershell, she will need to register that alias for completion.  To make that possible, we store the completion logic into a scriptblock variable which can easily be accessed by the user to register aliases.  For example, if the user defines an alias for `helm`:    PS> sal h helm she will need to register the alias like so:    PS> Register-ArgumentCompleter -CommandName 'h' -ScriptBlock $__helmCompleterBlock  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",306,306,Jan Kuehle,21ccc7b,0,2022-10-03 17:06:04,2019-06-07 14:26:08
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",320,320,,,0,2020-12-29 14:57:32,
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,321,326,,,0,2019-06-07 14:26:08,
powershell_completions.go,a4ab3fa,Paul Holzinger,"powershell completion with custom comp (#1208)  The current powershell completion is not very capable.  Let's port it to the go custom completion logic to have a unified experience accross all shells.  Powershell supports three different completion modes  - TabCompleteNext (default windows style - on each key press the next option is displayed) - Complete (works like bash) - MenuComplete (works like zsh)  You set the mode with `Set-PSReadLineKeyHandler -Key Tab -Function <mode>`  To keep it backwards compatible `GenPowerShellCompletion` will not display descriptions. Use `GenPowerShellCompletionWithDesc` instead. Descriptions will only be displayed with `MenuComplete` or `Complete`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",327,349,,,0,2020-12-29 14:57:32,
powershell_completions.go,d4040ad,Marc Khouzam,"Allow user to add completion for powershell alias (#1621)  When a user has an alias in powershell, she will need to register that alias for completion.  To make that possible, we store the completion logic into a scriptblock variable which can easily be accessed by the user to register aliases.  For example, if the user defines an alias for `helm`:    PS> sal h helm she will need to register the alias like so:    PS> Register-ArgumentCompleter -CommandName 'h' -ScriptBlock $__helmCompleterBlock  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",308,308,Jan Kuehle,21ccc7b,0,2022-10-03 17:06:04,2019-06-07 14:26:08
powershell_completions.go,21ccc7b,Jan Kuehle,Add basic PowerShell completions,350,350,,,0,2019-06-07 14:26:08,
powershell_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,310,310,Jan Kuehle,21ccc7b,0,2023-02-25 20:57:12,2019-06-07 14:26:08
powershell_completions.go,fdee73b,Paul Holzinger,"powershell: escape variable with curly brackets (#1960)  This fixes an issue with program names that include a dot, in our case `podman.exe`. This was caused by the change in commit 6ba7ebbc.  Fixes #1853  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",307,307,Jan Kuehle,21ccc7b,1,2023-06-19 16:16:18,2019-06-07 14:26:08
zsh_completions.go,d7ba195,bpicode,Add basic zsh completion (command hierarchy only)  Partially fixes #107 See PR #497,15,17,,,0,2017-07-30 08:44:28,
zsh_completions.go,d7ba195,bpicode,Add basic zsh completion (command hierarchy only)  Partially fixes #107 See PR #497,19,20,,,0,2017-07-30 08:44:28,
zsh_completions.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Gyanendra Mishra,3daa4b9,0,2023-03-06 02:28:31,2023-02-25 20:57:12
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",24,24,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,edbb671,Haim Ashkenazi,zsh-completions: implemented argument completion.,22,23,Haim Ashkenazi,d262154,0,2019-06-07 14:09:50,2019-06-07 14:09:50
zsh_completions.go,4de692c,agmen,adding a GenZshCompletionFile function to mirror bash_completion (#529),21,21,bpicode,d7ba195,0,2017-09-05 16:32:32,2017-07-30 08:44:28
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",18,18,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
zsh_completions.go,b787445,Eric Paris,Use func (c *Command) consistently (#530)  It makes the docs looks better. The idea was suggested by @SamWhited,25,25,agmen,4de692c,0,2017-09-05 17:20:51,2017-09-05 16:32:32
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",26,26,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,edbb671,Haim Ashkenazi,zsh-completions: implemented argument completion.,38,39,Haim Ashkenazi,e8018e8,0,2019-06-07 14:09:50,2019-06-07 14:09:50
zsh_completions.go,4de692c,agmen,adding a GenZshCompletionFile function to mirror bash_completion (#529),27,28,,,0,2017-09-05 16:32:32,
zsh_completions.go,b787445,Eric Paris,Use func (c *Command) consistently (#530)  It makes the docs looks better. The idea was suggested by @SamWhited,31,31,agmen,4de692c,0,2017-09-05 17:20:51,2017-09-05 16:32:32
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",35,37,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,edbb671,Haim Ashkenazi,zsh-completions: implemented argument completion.,33,34,Haim Ashkenazi,e8018e8,0,2019-06-07 14:09:50,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",40,43,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",29,30,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",32,32,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",46,55,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,edbb671,Haim Ashkenazi,zsh-completions: implemented argument completion.,56,58,Haim Ashkenazi,f0508c8,0,2019-06-07 14:09:50,2019-06-07 14:09:50
zsh_completions.go,edbb671,Haim Ashkenazi,zsh-completions: implemented argument completion.,44,45,Haim Ashkenazi,2662787,0,2019-06-07 14:09:50,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",59,67,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,ec4b8c9,Haim Ashkenazi,zsh-completions: revised flags completion rendering + new features:  - If the flags are not bool the completion expects argument. - You don't have to specify file extensions for file completion to   work. - Allow multiple occurrences of flag if type is stringArray.  Need to verify that these assumption are correct :),68,69,Haim Ashkenazi,2662787,1,2019-06-07 14:09:50,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",70,73,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,ec4b8c9,Haim Ashkenazi,zsh-completions: revised flags completion rendering + new features:  - If the flags are not bool the completion expects argument. - You don't have to specify file extensions for file completion to   work. - Allow multiple occurrences of flag if type is stringArray.  Need to verify that these assumption are correct :),74,74,Eric Paris,b787445,1,2019-06-07 14:09:50,2017-09-05 17:20:51
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",75,75,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,45360a5,Marc Khouzam,"Allow sourcing zsh completion script (#1917)  Although it is not the recommended approach, sourcing a completion script is the simplest way to get people to try using shell completion. Not allowing it for zsh has turned out to complicate shell completion adoption.  Further, many tools modify the zsh script to allow sourcing.  This commit allows sourcing of the zsh completion script.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",93,93,Unai Martinez-Corral,9e6b58a,0,2023-03-22 22:41:05,2023-03-06 02:28:31
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",88,91,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",77,86,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,112,112,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",94,111,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,ec4b8c9,Haim Ashkenazi,zsh-completions: revised flags completion rendering + new features:  - If the flags are not bool the completion expects argument. - You don't have to specify file extensions for file completion to   work. - Allow multiple occurrences of flag if type is stringArray.  Need to verify that these assumption are correct :),76,76,Eric Paris,b787445,1,2019-06-07 14:09:50,2017-09-05 17:20:51
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",113,113,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",115,181,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,114,114,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
zsh_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,182,182,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
zsh_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),187,199,Tom Payne,37d481d,0,2022-06-16 00:08:16,2022-06-05 19:45:59
zsh_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,87,87,Haim Ashkenazi,e2c45ac,1,2021-02-08 00:08:50,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",200,206,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",186,186,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),183,185,Tom Payne,37d481d,0,2022-06-16 00:08:16,2022-06-05 19:45:59
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",208,209,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,95d23d2,Marc Khouzam,"Fix zsh for DirectiveNoSpace and DirectiveNoFileComp (#1213)  Fixes #1211  When handling ShellCompDirectiveNoSpace we must still properly handle descriptions.  To do so we cannot simply use 'compadd', but must use zsh's '_describe' function.  Also, when handling ShellCompDirectiveNoSpace we cannot assume that only a single completion will be given to the script.  In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix.  Therefore, we cannot use the number of completions received in the completion script to determine if we should activate the ""no space"" directive.  Instead, we can leave it all to the '_describe' function.  Fixes #1212  When handling ShellCompDirectiveNoFileComp we cannot base ourself on the script receiving no valid completion. In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix at all.  Therefore, we cannot use the number of completions received by the completion script to determine if we should activate the ""no file comp"" directive.  Instead, we can check if the '_describe' function has found any completions.  Finally, it is important for the script to return the return code of the called zsh functions (_describe, _arguments).  This tells zsh if completions were found or not, which if not, will trigger different matching attempts, such as matching what the user typed with the the content of possible completions (instead of just as the prefix).  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",227,231,Unai Martinez-Corral,652c755,1,2021-05-03 16:54:00,2021-02-08 00:08:50
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",210,215,Haim Ashkenazi,e2c45ac,0,2020-06-29 19:52:14,2019-06-07 14:09:50
zsh_completions.go,37d481d,Tom Payne,"fix: Don't complete _command on zsh (#1690)  Previously the generated zsh completion script started with the line      #compdef _<command> <command>  where <command> is the command that the zsh completion script is generated for.  This enabled completions for both <command> and _<command>, but _<command> is the completion function itself and should not be completed. Furthermore, attempting to autocomplete _<command> (e.g. typing ""_<command><Space><Tab>"" in a zsh shell) causes zsh to hang.  This commit fixes the #compdef line to only complete <command>, not _<command>.  Co-authored-by: Arvid Norlander <VorpalBlade@users.noreply.github.com>",92,92,Haim Ashkenazi,e2c45ac,1,2022-06-05 19:45:59,2019-06-07 14:09:50
zsh_completions.go,bf6cb58,Paul Chesnais,"Wrap printf tab with quotes (#1665)  Without this, slightly older versions of zsh fail to correctly parse the output of the __complete command. Tested that with zsh 5.0.2 and zsh 5.8. Since this is just correctly quoting the output of a command, it shouldn't cause any compatibility issues.",207,207,Marc Khouzam,95d23d2,0,2022-04-14 04:30:27,2021-05-03 16:54:00
zsh_completions.go,c7a4421,favonia,"fix: typo in {bash,zsh}_completions.go (#1459)  * Fix typo in bash_completions.go * Fix the same typo in zsh_completions.go",254,254,Marc Khouzam,2c5a0d3,1,2021-12-07 22:53:38,2020-06-29 19:52:14
zsh_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,232,236,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",255,262,,,0,2020-06-29 19:52:14,
zsh_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),216,226,Unai Martinez-Corral,652c755,0,2022-06-16 00:08:16,2021-02-08 00:08:50
zsh_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,272,272,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
zsh_completions.go,95d23d2,Marc Khouzam,"Fix zsh for DirectiveNoSpace and DirectiveNoFileComp (#1213)  Fixes #1211  When handling ShellCompDirectiveNoSpace we must still properly handle descriptions.  To do so we cannot simply use 'compadd', but must use zsh's '_describe' function.  Also, when handling ShellCompDirectiveNoSpace we cannot assume that only a single completion will be given to the script.  In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix.  Therefore, we cannot use the number of completions received in the completion script to determine if we should activate the ""no space"" directive.  Instead, we can leave it all to the '_describe' function.  Fixes #1212  When handling ShellCompDirectiveNoFileComp we cannot base ourself on the script receiving no valid completion. In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix at all.  Therefore, we cannot use the number of completions received by the completion script to determine if we should activate the ""no file comp"" directive.  Instead, we can check if the '_describe' function has found any completions.  Finally, it is important for the script to return the return code of the called zsh functions (_describe, _arguments).  This tells zsh if completions were found or not, which if not, will trigger different matching attempts, such as matching what the user typed with the the content of possible completions (instead of just as the prefix).  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",263,263,,,1,2021-05-03 16:54:00,
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",266,268,,,0,2020-06-29 19:52:14,
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",277,277,,,0,2020-06-29 19:52:14,
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",237,253,,,0,2020-06-29 19:52:14,
zsh_completions.go,95d23d2,Marc Khouzam,"Fix zsh for DirectiveNoSpace and DirectiveNoFileComp (#1213)  Fixes #1211  When handling ShellCompDirectiveNoSpace we must still properly handle descriptions.  To do so we cannot simply use 'compadd', but must use zsh's '_describe' function.  Also, when handling ShellCompDirectiveNoSpace we cannot assume that only a single completion will be given to the script.  In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix.  Therefore, we cannot use the number of completions received in the completion script to determine if we should activate the ""no space"" directive.  Instead, we can leave it all to the '_describe' function.  Fixes #1212  When handling ShellCompDirectiveNoFileComp we cannot base ourself on the script receiving no valid completion. In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix at all.  Therefore, we cannot use the number of completions received by the completion script to determine if we should activate the ""no file comp"" directive.  Instead, we can check if the '_describe' function has found any completions.  Finally, it is important for the script to return the return code of the called zsh functions (_describe, _arguments).  This tells zsh if completions were found or not, which if not, will trigger different matching attempts, such as matching what the user typed with the the content of possible completions (instead of just as the prefix).  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",278,295,,,1,2021-05-03 16:54:00,
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",297,298,,,0,2020-06-29 19:52:14,
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",296,296,,,0,2020-06-29 19:52:14,
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",264,264,,,0,2020-06-29 19:52:14,
zsh_completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,306,306,Unai Martinez-Corral,6d978a9,0,2023-02-25 20:57:12,2022-09-16 11:55:56
zsh_completions.go,f64bfa1,midchildan,"Fix zsh completion not working on the first time in a shell session (#1237)  The zsh completion script output by cobra is a stub completion function which replaces itself with the actual completion function. This technique enables cobra to define helper functions without splitting the completion script into multiple files.  However, the current implementation forgets to call the actual completion function at the end of the stub function, meaning that completion won't work the first time it's invoked in a shell session. This commit is a fix for this problem.",303,303,,,1,2020-10-04 01:25:07,
zsh_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",304,305,,,0,2020-06-29 19:52:14,
zsh_completions.go,507caf5,Sebastiaan van Stijn,"completions: fix mixed tab/spaces indentation (#1473)  These templates use 4 spaces for indentation, but some lines used tabs.  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",302,302,,,1,2021-12-07 22:57:57,
zsh_completions.go,95d23d2,Marc Khouzam,"Fix zsh for DirectiveNoSpace and DirectiveNoFileComp (#1213)  Fixes #1211  When handling ShellCompDirectiveNoSpace we must still properly handle descriptions.  To do so we cannot simply use 'compadd', but must use zsh's '_describe' function.  Also, when handling ShellCompDirectiveNoSpace we cannot assume that only a single completion will be given to the script.  In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix.  Therefore, we cannot use the number of completions received in the completion script to determine if we should activate the ""no space"" directive.  Instead, we can leave it all to the '_describe' function.  Fixes #1212  When handling ShellCompDirectiveNoFileComp we cannot base ourself on the script receiving no valid completion. In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix at all.  Therefore, we cannot use the number of completions received by the completion script to determine if we should activate the ""no file comp"" directive.  Instead, we can check if the '_describe' function has found any completions.  Finally, it is important for the script to return the return code of the called zsh functions (_describe, _arguments).  This tells zsh if completions were found or not, which if not, will trigger different matching attempts, such as matching what the user typed with the the content of possible completions (instead of just as the prefix).  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",265,265,,,1,2021-05-03 16:54:00,
zsh_completions.go,95d23d2,Marc Khouzam,"Fix zsh for DirectiveNoSpace and DirectiveNoFileComp (#1213)  Fixes #1211  When handling ShellCompDirectiveNoSpace we must still properly handle descriptions.  To do so we cannot simply use 'compadd', but must use zsh's '_describe' function.  Also, when handling ShellCompDirectiveNoSpace we cannot assume that only a single completion will be given to the script.  In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix.  Therefore, we cannot use the number of completions received in the completion script to determine if we should activate the ""no space"" directive.  Instead, we can leave it all to the '_describe' function.  Fixes #1212  When handling ShellCompDirectiveNoFileComp we cannot base ourself on the script receiving no valid completion. In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix at all.  Therefore, we cannot use the number of completions received by the completion script to determine if we should activate the ""no file comp"" directive.  Instead, we can check if the '_describe' function has found any completions.  Finally, it is important for the script to return the return code of the called zsh functions (_describe, _arguments).  This tells zsh if completions were found or not, which if not, will trigger different matching attempts, such as matching what the user typed with the the content of possible completions (instead of just as the prefix).  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",269,271,,,1,2021-05-03 16:54:00,
zsh_completions.go,95d23d2,Marc Khouzam,"Fix zsh for DirectiveNoSpace and DirectiveNoFileComp (#1213)  Fixes #1211  When handling ShellCompDirectiveNoSpace we must still properly handle descriptions.  To do so we cannot simply use 'compadd', but must use zsh's '_describe' function.  Also, when handling ShellCompDirectiveNoSpace we cannot assume that only a single completion will be given to the script.  In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix.  Therefore, we cannot use the number of completions received in the completion script to determine if we should activate the ""no space"" directive.  Instead, we can leave it all to the '_describe' function.  Fixes #1212  When handling ShellCompDirectiveNoFileComp we cannot base ourself on the script receiving no valid completion. In fact, ValidArgsFunction can return multiple completions, even if they don't match the 'toComplete' argument prefix at all.  Therefore, we cannot use the number of completions received by the completion script to determine if we should activate the ""no file comp"" directive.  Instead, we can check if the '_describe' function has found any completions.  Finally, it is important for the script to return the return code of the called zsh functions (_describe, _arguments).  This tells zsh if completions were found or not, which if not, will trigger different matching attempts, such as matching what the user typed with the the content of possible completions (instead of just as the prefix).  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",273,276,,,1,2021-05-03 16:54:00,
zsh_completions.go,f64bfa1,midchildan,"Fix zsh completion not working on the first time in a shell session (#1237)  The zsh completion script output by cobra is a stub completion function which replaces itself with the actual completion function. This technique enables cobra to define helper functions without splitting the completion script into multiple files.  However, the current implementation forgets to call the actual completion function at the end of the stub function, meaning that completion won't work the first time it's invoked in a shell session. This commit is a fix for this problem.",299,301,,,1,2020-10-04 01:25:07,
zsh_completions.go,8822449,Haim Ashkenazi,zsh-completion: added escapinng of single quotes in flag description.,308,308,,,0,2019-06-07 14:09:50,
zsh_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),307,307,,,0,2022-06-16 00:08:16,
bash_completions.go,0fc734c,Eric Paris,Sort the valid args before output  We do this so we get stable repeatable output and can see if updates are necessary or if it is just golang doing the same thing twice differently,22,22,,,0,2015-04-13 22:44:05,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,19,19,,,0,2015-04-08 00:13:49,
bash_completions.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Yash Ladha,bf11ab6,0,2023-03-06 02:28:31,2022-12-25 20:08:39
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,21,21,,,0,2015-04-08 00:13:49,
bash_completions.go,463be14,Daniel Martí,Replace *bytes.Buffer with io.Writer  Also adds support for generating bash completions on writers other than just buffers.  Found via github.com/mvdan/interfacer.,20,20,,,0,2016-01-05 20:30:42,
bash_completions.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,f464d6c,0,2022-09-16 11:55:56,2022-06-16 00:08:16
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,15,17,,,0,2015-04-08 00:13:49,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,18,18,Euan Kemp,40e19b3,0,2017-05-18 13:03:00,2016-08-02 22:01:33
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,29,29,,,0,2015-04-08 00:13:49,
bash_completions.go,6e17f4e,bogem,Fix typos,30,30,,,1,2016-08-20 07:04:53,
bash_completions.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",33,33,,,0,2015-08-09 19:30:58,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,23,27,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,32,32,,,0,2015-04-08 00:13:49,
bash_completions.go,8092588,Dr. Stefan Schimanski,Add custom bash flag completion,31,31,,,0,2016-03-21 07:05:54,
bash_completions.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",28,28,,,1,2017-01-24 16:30:45,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",39,39,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,43,45,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,34,35,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,40,40,,,0,2015-04-08 00:13:49,
bash_completions.go,f4b3401,Eric Paris,Clean up minor bash complaints from shellcheck.net,42,42,,,0,2015-05-04 18:40:27,
bash_completions.go,32e87e3,Eric Paris,"Enable bash completions on Macs  If they installed bash-completions from homebrew, this should make our completions work.",46,47,,,0,2015-09-03 21:00:18,
bash_completions.go,32e87e3,Eric Paris,"Enable bash completions on Macs  If they installed bash-completions from homebrew, this should make our completions work.",49,50,,,0,2015-09-03 21:00:18,
bash_completions.go,7d556a0,Dr. Stefan Schimanski,Enable bash completion after --flag= or --flag=abc,51,51,,,0,2016-03-21 07:05:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",54,54,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,32e87e3,Eric Paris,"Enable bash completions on Macs  If they installed bash-completions from homebrew, this should make our completions work.",52,53,,,0,2015-09-03 21:00:18,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,55,65,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,67,74,,,0,2015-04-08 00:13:49,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",75,78,Marc Khouzam,bf26895,0,2020-04-03 19:43:43,2019-12-26 17:55:42
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,36,38,Jake Dodd,c2bbfaa,1,2021-02-08 00:08:50,2018-02-05 19:53:53
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",66,66,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,2246fa8,Taavi Väänänen,"Fix grammar: 'allows to' (#1978)  The use in generated bash completion files is getting flagged by Lintian (the Debian package linting tool).  Signed-off-by: Taavi Väänänen <hi@taavi.wtf>",88,88,Unai Martinez-Corral,9e6b58a,1,2023-06-13 15:12:49,2023-03-06 02:28:31
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",48,48,,,1,2018-02-08 21:34:46,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",85,87,Marc Khouzam,bf26895,0,2020-04-03 19:43:43,2019-12-26 17:55:42
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",79,84,Marc Khouzam,bf26895,0,2020-06-29 19:52:14,2019-12-26 17:55:42
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",89,89,Marc Khouzam,bf26895,0,2020-04-03 19:43:43,2019-12-26 17:55:42
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",119,119,Marc Khouzam,0431872,0,2020-06-29 19:52:14,2020-06-16 20:49:26
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",118,118,Marc Khouzam,bf26895,0,2020-04-03 19:43:43,2019-12-26 17:55:42
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",92,116,Marc Khouzam,bf26895,0,2020-04-03 19:43:43,2019-12-26 17:55:42
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",120,123,Marc Khouzam,bf26895,0,2020-04-03 19:43:43,2019-12-26 17:55:42
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",124,124,Marc Khouzam,0431872,0,2020-06-29 19:52:14,2020-06-16 20:49:26
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",130,130,Marc Khouzam,0431872,0,2020-06-29 19:52:14,2020-06-16 20:49:26
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",125,129,rsteube,21f39ca,0,2020-04-03 19:43:43,2019-07-11 18:18:47
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",131,135,rsteube,21f39ca,0,2020-04-03 19:43:43,2019-07-11 18:18:47
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",136,136,Marc Khouzam,0431872,0,2020-06-29 19:52:14,2020-06-16 20:49:26
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",138,142,Marc Khouzam,0431872,0,2020-06-29 19:52:14,2020-06-16 20:49:26
bash_completions.go,6f19fa9,Eden Tsai,"fix: unbound variables in bash completion (#1321)  when `set -o nounset` in Bash, the warnings of unbound variables will break the bash completion.  use `kubectl` as example:  ```sh $ set -o nounset $ my-cli <Tab>-bash: BASH_COMP_DEBUG_FILE: unbound variable $ ```  the warning break bash completion without any completion result, and cause my cursor move to the newline.  Use `${variable:-}` substitution in Bash, that assign an empty string as default for unbound variables to fix the warnings.",41,41,Jake Dodd,c2bbfaa,1,2021-12-07 22:44:39,2018-02-05 19:53:53
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",137,137,rsteube,21f39ca,0,2020-04-03 19:43:43,2019-07-11 18:18:47
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",155,162,Marc Khouzam,bf26895,0,2020-06-29 19:52:14,2019-12-26 17:55:42
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",144,151,Marc Khouzam,0431872,0,2020-06-29 19:52:14,2020-06-16 20:49:26
bash_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),90,91,Marc Khouzam,bf26895,0,2022-06-16 00:08:16,2019-12-26 17:55:42
bash_completions.go,f17e5a2,Ville Skyttä,"style(bash): out is not an array variable, do not refer to it as such (#1684)  For legacy bash completions, similarly as commit 4f0facbcee0aadb87179d3fed80e92709de491a9 is for bash completions v2.  As a side effect, fixes test suite with shellcheck 0.8.0 installed; apparently the 0.7.0 that's in GitHub Actions' ubuntu-latest at the moment does not flag the array quoting related issue that was provoked from 0.8.0 before this change.",143,143,Marc Khouzam,0431872,1,2022-05-03 01:41:07,2020-06-16 20:49:26
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",153,153,Marc Khouzam,bf26895,0,2020-06-29 19:52:14,2019-12-26 17:55:42
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",169,169,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,170,170,,,0,2015-04-08 00:13:49,
bash_completions.go,f17e5a2,Ville Skyttä,"style(bash): out is not an array variable, do not refer to it as such (#1684)  For legacy bash completions, similarly as commit 4f0facbcee0aadb87179d3fed80e92709de491a9 is for bash completions v2.  As a side effect, fixes test suite with shellcheck 0.8.0 installed; apparently the 0.7.0 that's in GitHub Actions' ubuntu-latest at the moment does not flag the array quoting related issue that was provoked from 0.8.0 before this change.",117,117,Marc Khouzam,0431872,1,2022-05-03 01:41:07,2020-06-16 20:49:26
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",166,168,Jake Dodd,c2bbfaa,0,2020-04-03 19:43:43,2018-02-05 19:53:53
bash_completions.go,f17e5a2,Ville Skyttä,"style(bash): out is not an array variable, do not refer to it as such (#1684)  For legacy bash completions, similarly as commit 4f0facbcee0aadb87179d3fed80e92709de491a9 is for bash completions v2.  As a side effect, fixes test suite with shellcheck 0.8.0 installed; apparently the 0.7.0 that's in GitHub Actions' ubuntu-latest at the moment does not flag the array quoting related issue that was provoked from 0.8.0 before this change.",154,154,Marc Khouzam,bf26895,1,2022-05-03 01:41:07,2019-12-26 17:55:42
bash_completions.go,bf26895,Marc Khouzam,"Fix regression when calling *_custom_func (#1001)  PR #889 introduced a regression where the global variable $c is no longer set when *custom_func is called.  This is because $c is re-used by mistake in the read loop.  This PR simply changes the name of the variable used in the loop.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",172,172,Haim Ashkenazi,e2c45ac,1,2019-12-26 17:55:42,2019-06-07 14:09:50
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",171,171,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,c7a4421,favonia,"fix: typo in {bash,zsh}_completions.go (#1459)  * Fix typo in bash_completions.go * Fix the same typo in zsh_completions.go",152,152,Marc Khouzam,bf26895,1,2021-12-07 22:53:38,2019-12-26 17:55:42
bash_completions.go,0e4c02d,Anthony Fok,"Restore bash completion behaviour for bash 4.x  In Pull Request #178, the use of `builtin compopt` as a test condition is inappropriate.  Use `[[ $(type -t compopt) = ""builtin"" ]]` instead.  Also clean up formatting of the resulting bash completion script.",175,176,,,0,2015-11-07 11:39:28,
bash_completions.go,428babe,Matt McCoy,Modifying bash completions so they can run on OSX,177,177,,,0,2015-11-03 20:21:24,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,173,174,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,178,183,,,0,2015-04-08 00:13:49,
bash_completions.go,0e4c02d,Anthony Fok,"Restore bash completion behaviour for bash 4.x  In Pull Request #178, the use of `builtin compopt` as a test condition is inappropriate.  Use `[[ $(type -t compopt) = ""builtin"" ]]` instead.  Also clean up formatting of the resulting bash completion script.",187,187,,,0,2015-11-07 11:39:28,
bash_completions.go,428babe,Matt McCoy,Modifying bash completions so they can run on OSX,189,189,,,0,2015-11-03 20:21:24,
bash_completions.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,188,188,,,0,2016-04-02 21:16:12,
bash_completions.go,7d556a0,Dr. Stefan Schimanski,Enable bash completion after --flag= or --flag=abc,190,198,,,0,2016-03-21 07:05:49,
bash_completions.go,21f39ca,rsteube,"bash: fix shellcheck errors (#889)  https://github.com/koalaman/shellcheck/wiki/SC2207 https://github.com/koalaman/shellcheck/wiki/SC2164",186,186,Jake Dodd,c2bbfaa,1,2019-07-11 18:18:47,2018-02-05 19:53:53
bash_completions.go,7d556a0,Dr. Stefan Schimanski,Enable bash completion after --flag= or --flag=abc,201,201,,,0,2016-03-21 07:05:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",199,199,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,bf26895,Marc Khouzam,"Fix regression when calling *_custom_func (#1001)  PR #889 introduced a regression where the global variable $c is no longer set when *custom_func is called.  This is because $c is re-used by mistake in the read loop.  This PR simply changes the name of the variable used in the loop.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",184,185,Jake Dodd,c2bbfaa,1,2019-12-26 17:55:42,2018-02-05 19:53:53
bash_completions.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,202,203,,,0,2016-04-02 21:16:12,
bash_completions.go,7d556a0,Dr. Stefan Schimanski,Enable bash completion after --flag= or --flag=abc,204,204,,,0,2016-03-21 07:05:49,
bash_completions.go,5deb57b,tomerf,Fixed completion of dash parameters arguments (#415),200,200,,,1,2017-04-08 14:45:37,
bash_completions.go,6f19fa9,Eden Tsai,"fix: unbound variables in bash completion (#1321)  when `set -o nounset` in Bash, the warnings of unbound variables will break the bash completion.  use `kubectl` as example:  ```sh $ set -o nounset $ my-cli <Tab>-bash: BASH_COMP_DEBUG_FILE: unbound variable $ ```  the warning break bash completion without any completion result, and cause my cursor move to the newline.  Use `${variable:-}` substitution in Bash, that assign an empty string as default for unbound variables to fix the warnings.",205,205,Paul Holzinger,de187e8,1,2021-12-07 22:44:39,2021-07-02 15:25:47
bash_completions.go,7d556a0,Dr. Stefan Schimanski,Enable bash completion after --flag= or --flag=abc,208,210,,,0,2016-03-21 07:05:49,
bash_completions.go,defeccc,Dr. Stefan Schimanski,Run shellcheck on bash completion,207,207,,,0,2016-04-02 21:16:12,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",163,164,,,0,2020-04-03 19:43:43,
bash_completions.go,845c905,Kazuki Suda,Fix typo,206,206,,,1,2017-10-11 04:52:18,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,224,234,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,218,222,,,0,2015-04-08 00:13:49,
bash_completions.go,ecc7ea6,Eric Paris,Show both commands and 'required flags' instead of only 'required flags',235,236,,,0,2016-06-03 16:44:54,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",238,239,Haim Ashkenazi,e2c45ac,0,2020-04-03 19:43:43,2019-06-07 14:09:50
bash_completions.go,ecc7ea6,Eric Paris,Show both commands and 'required flags' instead of only 'required flags',241,243,,,0,2016-06-03 16:44:54,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",223,223,,,1,2018-02-08 21:34:46,
bash_completions.go,f8fdd17,Marc Khouzam,Complete command names even if ValidArgs present (#1088)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,237,237,Haim Ashkenazi,e2c45ac,0,2020-05-07 21:04:14,2019-06-07 14:09:50
bash_completions.go,bf26895,Marc Khouzam,"Fix regression when calling *_custom_func (#1001)  PR #889 introduced a regression where the global variable $c is no longer set when *custom_func is called.  This is because $c is re-used by mistake in the read loop.  This PR simply changes the name of the variable used in the loop.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",245,246,Eric Paris,1a618fb,1,2019-12-26 17:55:42,2018-02-21 15:50:56
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,248,248,,,0,2015-04-08 00:13:49,
bash_completions.go,1a0a490,Dr. Stefan Schimanski,Remove plural handling and add aliases for nouns in completion,249,249,,,0,2016-04-02 10:39:19,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,244,244,,,0,2015-04-08 00:13:49,
bash_completions.go,bf26895,Marc Khouzam,"Fix regression when calling *_custom_func (#1001)  PR #889 introduced a regression where the global variable $c is no longer set when *custom_func is called.  This is because $c is re-used by mistake in the read loop.  This PR simply changes the name of the variable used in the loop.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",250,251,Jake Dodd,c2bbfaa,1,2019-12-26 17:55:42,2018-02-05 19:53:53
bash_completions.go,21f39ca,rsteube,"bash: fix shellcheck errors (#889)  https://github.com/koalaman/shellcheck/wiki/SC2207 https://github.com/koalaman/shellcheck/wiki/SC2164",252,252,Jake Dodd,c2bbfaa,1,2019-07-11 18:18:47,2018-02-05 19:53:53
bash_completions.go,21f39ca,rsteube,"bash: fix shellcheck errors (#889)  https://github.com/koalaman/shellcheck/wiki/SC2207 https://github.com/koalaman/shellcheck/wiki/SC2164",247,247,Eric Paris,1a618fb,1,2019-07-11 18:18:47,2018-02-21 15:50:56
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,255,255,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,263,263,,,0,2015-04-08 00:13:49,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",240,240,Jake Dodd,c2bbfaa,0,2020-04-03 19:43:43,2018-02-05 19:53:53
bash_completions.go,1a0a490,Dr. Stefan Schimanski,Remove plural handling and add aliases for nouns in completion,253,254,,,0,2016-04-02 10:39:19,
bash_completions.go,1a618fb,Eric Paris,Do not add a space after a single flag completion (#625),269,274,Jake Dodd,c2bbfaa,0,2018-02-21 15:50:56,2018-02-05 19:53:53
bash_completions.go,fe79245,Adam Bozanich,Bash completion for names with ':' character.,264,264,,,0,2015-12-10 04:57:45,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,275,276,,,0,2015-04-08 00:13:49,
bash_completions.go,dff410a,Eric Paris,make filename extension handling a bash function  We were trying to call a bash function with bash stuff like @ () from a variable.  Stop that.  Just call a function with an arg from a variable instead of trying to pass around the bash.  Should fix https://github.com/spf13/cobra/pull/103,277,277,,,1,2015-05-04 22:41:53,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",278,278,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",211,217,Jake Dodd,c2bbfaa,0,2021-11-01 19:01:33,2018-02-05 19:53:53
bash_completions.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",285,286,,,0,2015-08-09 19:30:58,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",284,284,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,21f39ca,rsteube,"bash: fix shellcheck errors (#889)  https://github.com/koalaman/shellcheck/wiki/SC2207 https://github.com/koalaman/shellcheck/wiki/SC2164",287,287,John McCabe,6644d46,1,2019-07-11 18:18:47,2018-02-28 05:38:38
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,291,291,,,0,2015-04-08 00:13:49,
bash_completions.go,dff410a,Eric Paris,make filename extension handling a bash function  We were trying to call a bash function with bash stuff like @ () from a variable.  Stop that.  Just call a function with an arg from a variable instead of trying to pass around the bash.  Should fix https://github.com/spf13/cobra/pull/103,279,283,,,1,2015-05-04 22:41:53,
bash_completions.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",288,289,,,0,2015-08-09 19:30:58,
bash_completions.go,66da711,Lucy Davies,"__ltrim_colon_completions is not always available on macOS (#459)  * __ltrim_colon_completions is not always available on macOS, so bash-completion should check first",265,268,,,0,2017-06-05 15:18:07,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,293,295,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",292,292,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,297,298,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",290,290,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,300,302,,,0,2015-04-08 00:13:49,
bash_completions.go,f17e5a2,Ville Skyttä,"style(bash): out is not an array variable, do not refer to it as such (#1684)  For legacy bash completions, similarly as commit 4f0facbcee0aadb87179d3fed80e92709de491a9 is for bash completions v2.  As a side effect, fixes test suite with shellcheck 0.8.0 installed; apparently the 0.7.0 that's in GitHub Actions' ubuntu-latest at the moment does not flag the array quoting related issue that was provoked from 0.8.0 before this change.",165,165,,,1,2022-05-03 01:41:07,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",303,304,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,60b8213,Kenjiro Nakayama,Add flaghash to bash_completion to keep flag value,299,299,,,0,2015-12-24 13:53:30,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,305,307,,,0,2015-04-08 00:13:49,
bash_completions.go,507caf5,Sebastiaan van Stijn,"completions: fix mixed tab/spaces indentation (#1473)  These templates use 4 spaces for indentation, but some lines used tabs.  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",256,262,John McCabe,fd32f09,1,2021-12-07 22:57:57,2018-02-08 21:34:46
bash_completions.go,60b8213,Kenjiro Nakayama,Add flaghash to bash_completion to keep flag value,313,313,,,0,2015-12-24 13:53:30,
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',308,308,,,0,2016-06-03 16:44:58,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",309,309,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',310,312,,,0,2016-06-03 16:44:58,
bash_completions.go,60b8213,Kenjiro Nakayama,Add flaghash to bash_completion to keep flag value,323,324,,,0,2015-12-24 13:53:30,
bash_completions.go,ba1052d,Daisuke Taniwaki,Fix two word flags (#807),326,326,John McCabe,6644d46,1,2019-03-11 12:55:09,2018-02-28 05:38:38
bash_completions.go,9979838,Kazuki Suda,"Fix attemptd assignment to non-variable in bash 3 (#628)  * Fix attemptd assignment to non-variable in bash 3  flaghash variable is an associative array which is only supported in bash > 3.  * Use -gt instead of >",316,322,tomerf,5deb57b,1,2018-02-04 16:42:17,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,325,325,,,0,2015-04-08 00:13:49,
bash_completions.go,9979838,Kazuki Suda,"Fix attemptd assignment to non-variable in bash 3 (#628)  * Fix attemptd assignment to non-variable in bash 3  flaghash variable is an associative array which is only supported in bash > 3.  * Use -gt instead of >",314,314,tomerf,5deb57b,1,2018-02-04 16:42:17,2017-04-08 14:45:37
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",339,339,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,340,340,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",341,341,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,335,338,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,328,334,,,0,2015-04-08 00:13:49,
bash_completions.go,ea9a77d,Dr. Stefan Schimanski,Add support for plural nouns in bash completion,346,346,,,0,2016-03-21 07:05:54,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,342,342,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,344,344,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",343,343,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",353,353,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,347,352,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",345,345,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",355,355,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,356,358,,,0,2015-04-08 00:13:49,
bash_completions.go,fe79245,Adam Bozanich,Bash completion for names with ':' character.,359,359,,,0,2015-12-10 04:57:45,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,354,354,,,0,2015-04-08 00:13:49,
bash_completions.go,65a708c,Anthony Fok,Allow bash-completion to work with full-path executable,361,361,,,0,2016-02-08 22:06:27,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,360,360,,,0,2015-04-08 00:13:49,
bash_completions.go,65a708c,Anthony Fok,Allow bash-completion to work with full-path executable,363,365,,,0,2016-02-08 22:06:27,
bash_completions.go,a1e4933,Rajat Jindal,"Bash completion aliases (#638)  * alias support with bash completions  * add cmdname to rootcmdname  * remove print statement  * add documentation for bash alias",362,362,tomerf,5deb57b,0,2018-02-21 17:51:53,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,370,371,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,366,367,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",372,372,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,373,374,,,0,2015-04-08 00:13:49,
bash_completions.go,7aeaa2c,Tamir Duberstein,"Avoid storing pointer to nil (#411)  * Fix shellcheck  Before this change:  	In - line 204: 	    declare -F $next_command >/dev/null && $next_command 	               ^-- SC2086: Double quote to prevent globbing and word splitting.  	--- FAIL: TestBashCompletions (0.34s) 		bash_completions_test.go:138: shellcheck failed: exit status 1  * Avoid storing pointer to nil  Before this change, the new test fails with:  	--- FAIL: TestSetOutput (0.00s) 		command_test.go:198: expected setting output to nil to revert back to stdout, got <nil>",369,369,,,1,2017-04-02 14:14:34,
bash_completions.go,0e4c02d,Anthony Fok,"Restore bash completion behaviour for bash 4.x  In Pull Request #178, the use of `builtin compopt` as a test condition is inappropriate.  Use `[[ $(type -t compopt) = ""builtin"" ]]` instead.  Also clean up formatting of the resulting bash completion script.",376,376,,,0,2015-11-07 11:39:28,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,377,377,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,379,379,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",368,368,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",380,382,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,6f19fa9,Eden Tsai,"fix: unbound variables in bash completion (#1321)  when `set -o nounset` in Bash, the warnings of unbound variables will break the bash completion.  use `kubectl` as example:  ```sh $ set -o nounset $ my-cli <Tab>-bash: BASH_COMP_DEBUG_FILE: unbound variable $ ```  the warning break bash completion without any completion result, and cause my cursor move to the newline.  Use `${variable:-}` substitution in Bash, that assign an empty string as default for unbound variables to fix the warnings.",315,315,Daisuke Taniwaki,d2d81d9,1,2021-12-07 22:44:39,2018-11-27 13:31:06
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",375,375,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",384,384,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",378,378,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,a1e4933,Rajat Jindal,"Bash completion aliases (#638)  * alias support with bash completions  * add cmdname to rootcmdname  * remove print statement  * add documentation for bash alias",383,383,tomerf,5deb57b,0,2018-02-21 17:51:53,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,393,393,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,395,395,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",396,396,Jake Dodd,c2bbfaa,1,2018-02-08 21:34:46,2018-02-05 19:53:53
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",385,386,tomerf,5deb57b,0,2018-04-23 12:47:20,2017-04-08 14:45:37
bash_completions.go,6f19fa9,Eden Tsai,"fix: unbound variables in bash completion (#1321)  when `set -o nounset` in Bash, the warnings of unbound variables will break the bash completion.  use `kubectl` as example:  ```sh $ set -o nounset $ my-cli <Tab>-bash: BASH_COMP_DEBUG_FILE: unbound variable $ ```  the warning break bash completion without any completion result, and cause my cursor move to the newline.  Use `${variable:-}` substitution in Bash, that assign an empty string as default for unbound variables to fix the warnings.",296,296,Jake Dodd,c2bbfaa,1,2021-12-07 22:44:39,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,397,398,,,0,2015-04-08 00:13:49,
bash_completions.go,6f19fa9,Eden Tsai,"fix: unbound variables in bash completion (#1321)  when `set -o nounset` in Bash, the warnings of unbound variables will break the bash completion.  use `kubectl` as example:  ```sh $ set -o nounset $ my-cli <Tab>-bash: BASH_COMP_DEBUG_FILE: unbound variable $ ```  the warning break bash completion without any completion result, and cause my cursor move to the newline.  Use `${variable:-}` substitution in Bash, that assign an empty string as default for unbound variables to fix the warnings.",387,387,Luap99,50258f1,1,2021-12-07 22:44:39,2020-09-09 15:34:51
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",394,394,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,507caf5,Sebastiaan van Stijn,"completions: fix mixed tab/spaces indentation (#1473)  These templates use 4 spaces for indentation, but some lines used tabs.  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",327,327,Jake Dodd,c2bbfaa,1,2021-12-07 22:57:57,2018-02-05 19:53:53
bash_completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),401,401,Paul Holzinger,de187e8,0,2022-06-16 00:08:16,2021-07-02 15:25:47
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",388,392,tomerf,5deb57b,0,2018-04-23 12:47:20,2017-04-08 14:45:37
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,404,404,Marc Khouzam,bf26895,1,2021-02-08 00:08:50,2019-12-26 17:55:42
bash_completions.go,801364a,Anthony Fok,"Skip ""bash: declare: -A: invalid option"" error gracefully  The use of ""declare -A flaghash"" (associative array) was introduced in PR #205, which works perfectly for Bash 4.x, but OS X insists on shipping a very outdated Bash 3.2.x.  This patch hides the ""bash: declare: -A: invalid option"" error message and allows the bash completion script to continue gracefully on OS X, albeit without the benefit of the new feature in PR #205.  Fixes #240",409,409,,,1,2016-02-05 05:04:36,
bash_completions.go,58e38f9,Eric Paris,Check for _init_completion not_init_completionS,411,411,,,0,2015-11-03 20:09:37,
bash_completions.go,32e87e3,Eric Paris,"Enable bash completions on Macs  If they installed bash-completions from homebrew, this should make our completions work.",412,413,,,0,2015-09-03 21:00:18,
bash_completions.go,eb3b639,Ville Skyttä,Bash completion variable leak fixes (#1352)  Fixes bash variables leaking into the parent shell without `local`,408,408,Unai Martinez-Corral,652c755,0,2021-02-18 15:26:03,2021-02-08 00:08:50
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,402,403,,,0,2015-04-08 00:13:49,
bash_completions.go,32e87e3,Eric Paris,"Enable bash completions on Macs  If they installed bash-completions from homebrew, this should make our completions work.",415,415,,,0,2015-09-03 21:00:18,
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",410,410,tomerf,5deb57b,0,2018-04-23 12:47:20,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,416,416,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,417,417,,,0,2015-04-08 00:13:49,
bash_completions.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",405,405,Paul Holzinger,de187e8,0,2022-05-14 20:10:36,2021-07-02 15:25:47
bash_completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",399,400,Jake Dodd,c2bbfaa,0,2020-06-29 19:52:14,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,419,420,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,406,407,Marc Khouzam,bf26895,1,2021-02-08 00:08:50,2019-12-26 17:55:42
bash_completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",418,418,Unai Martinez-Corral,652c755,0,2021-11-01 19:01:33,2021-02-08 00:08:50
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',421,421,,,0,2016-06-03 16:44:58,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,422,423,,,0,2015-04-08 00:13:49,
bash_completions.go,eb3b639,Ville Skyttä,Bash completion variable leak fixes (#1352)  Fixes bash variables leaking into the parent shell without `local`,425,425,Luap99,50258f1,0,2021-02-18 15:26:03,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,430,430,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",414,414,Euan Kemp,75daccd,1,2018-02-08 21:34:46,2016-08-02 21:49:33
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",424,424,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,426,427,,,0,2015-04-08 00:13:49,
bash_completions.go,eb3b639,Ville Skyttä,Bash completion variable leak fixes (#1352)  Fixes bash variables leaking into the parent shell without `local`,431,431,Luap99,50258f1,0,2021-02-18 15:26:03,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,432,432,,,0,2015-04-08 00:13:49,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,436,436,tomerf,5deb57b,0,2017-05-18 13:03:00,2017-04-08 14:45:37
bash_completions.go,c6399cd,Tamer TAS,Use readline's default filename completion if completion fails  If the `compspec` generates no matches it uses bash filename completion instead.,438,438,,,0,2016-01-02 06:11:35,
bash_completions.go,0e4c02d,Anthony Fok,"Restore bash completion behaviour for bash 4.x  In Pull Request #178, the use of `builtin compopt` as a test condition is inappropriate.  Use `[[ $(type -t compopt) = ""builtin"" ]]` instead.  Also clean up formatting of the resulting bash completion script.",439,439,,,0,2015-11-07 11:39:28,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,434,435,,,0,2015-04-08 00:13:49,
bash_completions.go,6f19fa9,Eden Tsai,"fix: unbound variables in bash completion (#1321)  when `set -o nounset` in Bash, the warnings of unbound variables will break the bash completion.  use `kubectl` as example:  ```sh $ set -o nounset $ my-cli <Tab>-bash: BASH_COMP_DEBUG_FILE: unbound variable $ ```  the warning break bash completion without any completion result, and cause my cursor move to the newline.  Use `${variable:-}` substitution in Bash, that assign an empty string as default for unbound variables to fix the warnings.",428,429,Luap99,50258f1,1,2021-12-07 22:44:39,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,437,437,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,c6399cd,Tamer TAS,Use readline's default filename completion if completion fails  If the `compspec` generates no matches it uses bash filename completion instead.,440,440,,,0,2016-01-02 06:11:35,
bash_completions.go,0e4c02d,Anthony Fok,"Restore bash completion behaviour for bash 4.x  In Pull Request #178, the use of `builtin compopt` as a test condition is inappropriate.  Use `[[ $(type -t compopt) = ""builtin"" ]]` instead.  Also clean up formatting of the resulting bash completion script.",441,442,,,0,2015-11-07 11:39:28,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,443,443,tomerf,5deb57b,0,2017-05-18 13:03:00,2017-04-08 14:45:37
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,444,444,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,447,448,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,445,446,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",433,433,tomerf,5deb57b,1,2018-02-08 21:34:46,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,449,449,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,453,453,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,455,455,,,0,2015-04-08 00:13:49,
bash_completions.go,c3e48f9,Eric Paris,"Deprecated subcommands  They should still work, but shouldn't show up in help or usage output",451,452,,,0,2015-04-29 17:08:20,
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",454,454,John McCabe,6644d46,0,2018-04-23 12:47:20,2018-02-28 05:38:38
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,457,458,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,456,456,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,459,459,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,460,462,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,463,463,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,464,464,,,0,2015-04-08 00:13:49,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,469,469,tomerf,5deb57b,0,2017-05-18 13:03:00,2017-04-08 14:45:37
bash_completions.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",467,467,Eric Paris,1a618fb,1,2018-02-28 05:38:38,2018-02-21 15:50:56
bash_completions.go,6119fc9,Jordan Liggitt,Simplify setting file/extension annotations on a flag,470,470,,,0,2015-06-22 19:16:00,
bash_completions.go,6119fc9,Jordan Liggitt,Simplify setting file/extension annotations on a flag,466,466,,,0,2015-06-22 19:16:00,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,465,465,tomerf,5deb57b,0,2017-05-18 13:03:00,2017-04-08 14:45:37
bash_completions.go,6119fc9,Jordan Liggitt,Simplify setting file/extension annotations on a flag,468,468,,,0,2015-06-22 19:16:00,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,471,471,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,8092588,Dr. Stefan Schimanski,Add custom bash flag completion,475,476,,,0,2016-03-21 07:05:54,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,477,477,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,479,479,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,8092588,Dr. Stefan Schimanski,Add custom bash flag completion,472,472,,,0,2016-03-21 07:05:54,
bash_completions.go,8092588,Dr. Stefan Schimanski,Add custom bash flag completion,478,478,,,0,2016-03-21 07:05:54,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,473,474,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,8092588,Dr. Stefan Schimanski,Add custom bash flag completion,480,480,,,0,2016-03-21 07:05:54,
bash_completions.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",450,450,Jake Dodd,c2bbfaa,0,2020-06-16 20:49:26,2018-02-05 19:53:53
bash_completions.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",481,481,,,0,2015-08-09 19:30:58,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,482,482,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",483,483,,,0,2015-08-09 19:30:58,
bash_completions.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",485,485,,,0,2015-08-09 19:30:58,
bash_completions.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",487,487,,,0,2015-08-09 19:30:58,
bash_completions.go,1e6fdf6,Anthony Fok,"Add new BashCompSubdirsInDir annotation  This first `cd` to a specified directory, then lists the subdirectories therein with `_filedir -d`.  This can be used by e.g. `hugo --theme=[Tab][Tab]`, which would give a list of subdirectories under the `themes` directory.",489,489,,,0,2015-08-09 19:30:58,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,490,490,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,6644d46,John McCabe,"Prefix bash functions with root command name (#643)  * Prefix bash functions with root command name  Prior to this commit the autocomplete bash functions were being prefixed with the root command name, but references to those functions from subcommands were having the subcommands prefixed instead - causing the function lookups to fail and error out.  For example (as observed in kubernetes/kubernetes#60517):  kubectl create -f [Tab] failed with the following message: kubectl create -f __create_handle_filename_extension_flag: command not found  in this case the function being invoked should be __kubectl_handle_filename_extension_flag  Signed-off-by: John McCabe <john@johnmccabe.net>  * Test filename extension and subdirs_in_dir for subcommands  This commit adds two regex based tests to ensure that the handle filename extension and handle subdirs in dir functions are prefixed by the root command when present in subcommands.  Previously they had been prefixed incorrectly with the subcommand name.  Signed-off-by: John McCabe <john@johnmccabe.net>",486,486,Lucy Davies,66da711,1,2018-02-28 05:38:38,2017-06-05 15:18:07
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,491,494,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,495,497,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,501,502,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,503,504,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,498,499,,,0,2015-04-08 00:13:49,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",505,505,Kazuki Suda,9979838,1,2018-02-08 21:34:46,2018-02-04 16:42:17
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,506,507,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,509,510,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,508,508,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,488,488,,,0,2017-05-18 13:03:00,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,512,513,,,0,2015-04-08 00:13:49,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,484,484,,,0,2017-05-18 13:03:00,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,500,500,,,0,2017-05-18 13:03:00,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,511,511,,,0,2017-05-18 13:03:00,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,521,522,,,0,2015-04-08 00:13:49,
bash_completions.go,ba1052d,Daisuke Taniwaki,Fix two word flags (#807),516,516,tomerf,5deb57b,1,2019-03-11 12:55:09,2017-04-08 14:45:37
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",520,520,Lucy Davies,66da711,1,2018-02-08 21:34:46,2017-06-05 15:18:07
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,523,523,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',524,524,,,0,2016-06-03 16:44:58,
bash_completions.go,ba1052d,Daisuke Taniwaki,Fix two word flags (#807),519,519,Lucy Davies,66da711,1,2019-03-11 12:55:09,2017-06-05 15:18:07
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',528,528,,,0,2016-06-03 16:44:58,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,514,515,Marc Khouzam,bf26895,1,2021-02-08 00:08:50,2019-12-26 17:55:42
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,525,525,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,529,529,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,527,527,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,517,518,Marc Khouzam,bf26895,1,2021-02-08 00:08:50,2019-12-26 17:55:42
bash_completions.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",535,535,Unai Martinez-Corral,6d978a9,1,2022-12-25 20:08:39,2022-09-16 11:55:56
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,526,526,,,0,2017-05-18 13:03:00,
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',533,534,,,0,2016-06-03 16:44:58,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",540,550,Marc Khouzam,bf26895,0,2020-04-03 19:43:43,2019-12-26 17:55:42
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",552,552,Marc Khouzam,bf26895,0,2020-04-03 19:43:43,2019-12-26 17:55:42
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,551,551,Jake Dodd,c2bbfaa,1,2021-02-08 00:08:50,2018-02-05 19:53:53
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,554,554,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,553,553,Jake Dodd,c2bbfaa,1,2021-02-08 00:08:50,2018-02-05 19:53:53
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',555,555,,,0,2016-06-03 16:44:58,
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',565,565,,,0,2016-06-03 16:44:58,
bash_completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",560,564,Marc Khouzam,2c5a0d3,0,2021-11-01 19:01:33,2020-06-29 19:52:14
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,566,566,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,556,559,,,0,2015-04-08 00:13:49,
bash_completions.go,40e19b3,Euan Kemp,Don't display deprecated flags in bash completions,567,567,,,0,2016-08-02 22:01:33,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",536,536,tomerf,5deb57b,0,2020-04-03 19:43:43,2017-04-08 14:45:37
bash_completions.go,75daccd,Euan Kemp,Don't display hidden flags in bash completions,568,569,,,0,2016-08-02 21:49:33,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,571,571,,,0,2015-04-08 00:13:49,
bash_completions.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",532,532,tomerf,5deb57b,1,2020-09-09 15:34:51,2017-04-08 14:45:37
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,531,531,tomerf,5deb57b,1,2021-02-08 00:08:50,2017-04-08 14:45:37
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,573,573,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,579,579,,,0,2015-04-08 00:13:49,
bash_completions.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",530,530,tomerf,5deb57b,1,2020-09-09 15:34:51,2017-04-08 14:45:37
bash_completions.go,dab963a,Fabiano Franz,Persistent flags should also be used in completions,580,580,,,0,2015-11-06 13:43:09,
bash_completions.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',578,578,,,0,2016-06-03 16:44:58,
bash_completions.go,75daccd,Euan Kemp,Don't display hidden flags in bash completions,582,583,,,0,2016-08-02 21:49:33,
bash_completions.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",574,576,tomerf,5deb57b,1,2020-09-09 15:34:51,2017-04-08 14:45:37
bash_completions.go,dab963a,Fabiano Franz,Persistent flags should also be used in completions,585,585,,,0,2015-11-06 13:43:09,
bash_completions.go,40e19b3,Euan Kemp,Don't display deprecated flags in bash completions,581,581,,,0,2016-08-02 22:01:33,
bash_completions.go,dab963a,Fabiano Franz,Persistent flags should also be used in completions,587,588,,,0,2015-11-06 13:43:09,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",572,572,,,1,2018-02-08 21:34:46,
bash_completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",537,539,tomerf,5deb57b,1,2021-07-02 15:25:47,2017-04-08 14:45:37
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,577,577,,,0,2017-05-18 13:03:00,
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",586,586,,,1,2018-02-08 21:34:46,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,590,590,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",570,570,,,1,2018-02-08 21:34:46,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,591,592,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,589,589,,,0,2015-04-08 00:13:49,
bash_completions.go,40e19b3,Euan Kemp,Don't display deprecated flags in bash completions,597,597,,,0,2016-08-02 22:01:33,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,593,594,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,fd32f09,John McCabe,"Fix generated bash completion for Bash 3 (OSX) (#520)  * Make preamble functions unique to command  Prior to this commit the functions in the preamble had names that didn't vary based on the command for which the bash completion was generated.  This meant that if you had two bash completions with differences in the preamble functions then only the last loaded function would be available.  This commit prefixes all of these functions with the name of the command so that multiple cobra generated completion files won't clash.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Fix function names in writeFlagHandler  The references to the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions in `writeFlagHandler` hadn't been updated correctly in the previous commits.  Signed-off-by: John McCabe <john@johnmccabe.net>  * Pass cmd into writeFlagHandler  This commit passes the cmd pointer into the writeFlagHandler so that the `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions can have the `cmd.Name()` prefixed.  * Update Bash completion tests  Prefixes the tested `__handle_filename_extension_flag` and `__handle_subdirs_in_dir_flag` functions with the command name.",584,584,,,1,2018-02-08 21:34:46,
bash_completions.go,75daccd,Euan Kemp,Don't display hidden flags in bash completions,598,599,,,0,2016-08-02 21:49:33,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,595,596,,,0,2015-04-08 00:13:49,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,610,614,,,0,2015-04-08 00:13:49,
bash_completions.go,6b5f577,Ville Skyttä,"More linting (#2099)  * Address gocritic findings, enable it  * Enable gosimple, no new findings to address",600,609,Ville Skyttä,3d8ac43,0,2024-04-01 12:42:08,2023-11-23 17:24:33
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,615,617,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,618,618,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,622,622,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",621,621,Taavi Väänänen,2246fa8,1,2023-11-23 17:24:33,2023-06-13 15:12:49
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,623,623,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,625,625,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,627,628,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,629,629,Marc Khouzam,f8fdd17,1,2021-02-08 00:08:50,2020-05-07 21:04:14
bash_completions.go,6f19fa9,Eden Tsai,"fix: unbound variables in bash completion (#1321)  when `set -o nounset` in Bash, the warnings of unbound variables will break the bash completion.  use `kubectl` as example:  ```sh $ set -o nounset $ my-cli <Tab>-bash: BASH_COMP_DEBUG_FILE: unbound variable $ ```  the warning break bash completion without any completion result, and cause my cursor move to the newline.  Use `${variable:-}` substitution in Bash, that assign an empty string as default for unbound variables to fix the warnings.",636,636,Luap99,50258f1,1,2021-12-07 22:44:39,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,634,634,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",637,637,,,0,2018-04-23 12:47:20,
bash_completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,619,620,Lucy Davies,66da711,0,2020-04-10 19:56:28,2017-06-05 15:18:07
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",630,633,,,0,2018-04-23 12:47:20,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,641,642,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,644,646,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,1a0a490,Dr. Stefan Schimanski,Remove plural handling and add aliases for nouns in completion,647,647,,,0,2016-04-02 10:39:19,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,638,639,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,1a0a490,Dr. Stefan Schimanski,Remove plural handling and add aliases for nouns in completion,650,651,,,0,2016-04-02 10:39:19,
bash_completions.go,1a0a490,Dr. Stefan Schimanski,Remove plural handling and add aliases for nouns in completion,649,649,,,0,2016-04-02 10:39:19,
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",640,640,,,0,2018-04-23 12:47:20,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",624,624,tomerf,5deb57b,0,2020-04-03 19:43:43,2017-04-08 14:45:37
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,652,652,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,648,648,Luap99,50258f1,1,2021-02-08 00:08:50,2020-09-09 15:34:51
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,653,653,,,0,2015-04-08 00:13:49,
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",635,635,,,0,2018-04-23 12:47:20,
bash_completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",626,626,bogem,71a9c08,0,2020-04-03 19:43:43,2016-08-30 16:57:12
bash_completions.go,c3e48f9,Eric Paris,"Deprecated subcommands  They should still work, but shouldn't show up in help or usage output",655,656,,,0,2015-04-29 17:08:20,
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",643,643,,,0,2018-04-23 12:47:20,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,657,657,,,0,2017-05-18 13:03:00,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,658,659,,,0,2015-04-08 00:13:49,
bash_completions.go,25f5bb5,Hugo,"Prefer ReplaceAll instead of Replace(..., -1) (#1530)",660,661,Luap99,50258f1,0,2022-05-14 20:10:36,2020-09-09 15:34:51
bash_completions.go,a1e4933,Rajat Jindal,"Bash completion aliases (#638)  * alias support with bash completions  * add cmdname to rootcmdname  * remove print statement  * add documentation for bash alias",667,668,,,0,2018-02-21 17:51:53,
bash_completions.go,7ee208b,Rajat Jindal,"support completions for command aliases (#669)  * support completions for command aliases  * try newer version of shellcheck  * initialize aliashash only when BASH_VERSION > 3",673,673,,,0,2018-04-23 12:47:20,
bash_completions.go,a1e4933,Rajat Jindal,"Bash completion aliases (#638)  * alias support with bash completions  * add cmdname to rootcmdname  * remove print statement  * add documentation for bash alias",662,663,,,0,2018-02-21 17:51:53,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,674,678,,,0,2017-05-18 13:03:00,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,679,679,Daisuke Taniwaki,ba1052d,1,2021-02-08 00:08:50,2019-03-11 12:55:09
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,669,672,Lucy Davies,66da711,1,2021-02-08 00:08:50,2017-06-05 15:18:07
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,680,681,,,0,2015-04-08 00:13:49,
bash_completions.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",682,682,,,1,2017-01-24 16:30:45,
bash_completions.go,a1e4933,Rajat Jindal,"Bash completion aliases (#638)  * alias support with bash completions  * add cmdname to rootcmdname  * remove print statement  * add documentation for bash alias",665,665,,,0,2018-02-21 17:51:53,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,688,688,,,0,2015-04-08 00:13:49,
bash_completions.go,b787445,Eric Paris,Use func (c *Command) consistently (#530)  It makes the docs looks better. The idea was suggested by @SamWhited,683,683,,,0,2017-09-05 17:20:51,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,684,684,,,0,2017-05-18 13:03:00,
bash_completions.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",654,654,,,0,2020-06-16 20:49:26,
bash_completions.go,b787445,Eric Paris,Use func (c *Command) consistently (#530)  It makes the docs looks better. The idea was suggested by @SamWhited,685,687,,,0,2017-09-05 17:20:51,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,694,695,,,0,2015-04-08 00:13:49,
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,664,664,Lucy Davies,66da711,1,2021-02-08 00:08:50,2017-06-05 15:18:07
bash_completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,666,666,tomerf,5deb57b,1,2021-02-08 00:08:50,2017-04-08 14:45:37
bash_completions.go,40e19b3,Euan Kemp,Don't display deprecated flags in bash completions,696,699,,,0,2016-08-02 22:01:33,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,702,707,,,0,2015-04-08 00:13:49,
bash_completions.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",700,700,,,1,2017-01-24 16:30:45,
bash_completions.go,de6b168,Albert Nigmatzianov,Simplify bash_completions.go  Improve test coverage from 80% to 85%.,691,693,,,0,2017-05-18 13:03:00,
bash_completions.go,b787445,Eric Paris,Use func (c *Command) consistently (#530)  It makes the docs looks better. The idea was suggested by @SamWhited,689,690,,,0,2017-09-05 17:20:51,
bash_completions.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,709,709,,,0,2015-04-08 00:13:49,
bash_completions.go,b787445,Eric Paris,Use func (c *Command) consistently (#530)  It makes the docs looks better. The idea was suggested by @SamWhited,708,708,,,0,2017-09-05 17:20:51,
bash_completions.go,b787445,Eric Paris,Use func (c *Command) consistently (#530)  It makes the docs looks better. The idea was suggested by @SamWhited,701,701,,,0,2017-09-05 17:20:51,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",22,22,,,0,2020-04-03 19:43:43,
completions_test.go,00b68a1,Marc Khouzam,"Add tests for flag completion registration (#2053)  Different problems have been reported about flag completion registration. These two tests are the cases that were not being verified but had been mentioned as problematic.  Ref: - https://github.com/spf13/cobra/issues/1320 - https://github.com/spf13/cobra/pull/1438#issuecomment-872928669  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",20,20,Marc Khouzam,b711e87,0,2023-10-28 20:11:59,2023-10-28 20:10:06
completions_test.go,6d00909,Lukas Malkmus,Pass context to completion (#1265),19,19,Unai Martinez-Corral,652c755,0,2021-05-03 16:33:57,2021-02-08 00:08:50
completions_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Dominik Roos,b4f979a,0,2023-03-06 02:28:31,2023-01-03 00:58:36
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",15,18,,,0,2020-04-03 19:43:43,
completions_test.go,00b68a1,Marc Khouzam,"Add tests for flag completion registration (#2053)  Different problems have been reported about flag completion registration. These two tests are the cases that were not being verified but had been mentioned as problematic.  Ref: - https://github.com/spf13/cobra/issues/1320 - https://github.com/spf13/cobra/pull/1438#issuecomment-872928669  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",23,23,Marc Khouzam,b711e87,0,2023-10-28 20:11:59,2023-10-28 20:10:06
completions_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,5f2ec3c,0,2022-09-16 11:55:56,2022-06-21 02:04:28
completions_test.go,e63925d,Ville Skyttä,"Add env variable to suppress completion descriptions on create (#1938)  COBRA_COMPLETION_DESCRIPTIONS=0  or  <PROGRAM>_COMPLETION_DESCRIPTIONS=0 can now be used to disable shell completion descriptions.",21,21,Marc Khouzam,a0a6ae0,0,2023-12-17 18:50:59,2023-11-02 15:23:08
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",24,26,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,33,33,,,0,2020-04-10 19:56:28,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",29,29,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",30,32,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",38,38,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",28,28,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",34,37,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",27,27,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",39,40,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",41,41,,,0,2020-04-06 17:28:44,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",43,43,,,0,2020-04-06 17:28:44,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",52,52,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",44,46,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",48,51,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",42,42,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",53,54,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,47,47,,,0,2020-04-10 19:56:28,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",96,96,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",55,95,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",164,209,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",97,144,,,0,2020-06-29 19:52:14,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",225,225,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",146,161,,,0,2020-06-29 19:52:14,
completions_test.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",162,163,,,1,2020-09-09 15:34:51,
completions_test.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",226,268,,,1,2020-09-09 15:34:51,
completions_test.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",210,224,,,1,2020-09-09 15:34:51,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",397,397,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions_test.go,c3573e2,Frank Chiarulli Jr,"Completion: Capitalize short desc, and remove extra space from long (#1455)",145,145,Unai Martinez-Corral,652c755,0,2021-12-07 22:52:50,2021-02-08 00:08:50
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",269,396,,,0,2020-06-29 19:52:14,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",499,501,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",448,448,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",517,517,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",502,516,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",398,447,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",449,498,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",518,534,,,0,2020-06-29 19:52:14,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",570,571,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",535,536,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",573,574,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",537,569,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",572,572,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",575,588,,,0,2020-06-29 19:52:14,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",589,592,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",597,607,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",609,625,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",593,595,,,0,2020-06-29 19:52:14,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",664,665,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",628,660,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",663,663,,,0,2020-06-29 19:52:14,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",661,662,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",626,627,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",719,720,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",674,696,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,8a63648,Luap99,"Handle linebreaks in custom completions. (#1162)  If a command/flag description contains a linebreak then the shell completion script will interpret this as new command/flag.  To fix this we only use the first line from the description in the output.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",596,596,,,1,2020-09-09 17:27:42,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",666,673,,,0,2020-06-29 19:52:14,
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",734,734,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",697,718,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",735,755,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",721,732,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",758,766,,,0,2020-06-29 19:52:14,
completions_test.go,c3573e2,Frank Chiarulli Jr,"Completion: Capitalize short desc, and remove extra space from long (#1455)",608,608,Unai Martinez-Corral,652c755,0,2021-12-07 22:52:50,2021-02-08 00:08:50
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",757,757,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",768,774,,,0,2020-06-29 19:52:14,
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",767,767,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",782,782,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",800,800,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",783,799,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",776,780,,,0,2020-06-29 19:52:14,
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",775,775,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",801,808,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",813,831,,,0,2020-06-29 19:52:14,
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",811,812,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",833,859,,,0,2020-06-29 19:52:14,
completions_test.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",832,832,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",861,863,,,0,2020-06-29 19:52:14,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,860,860,,,1,2021-02-08 00:08:50,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,870,870,,,1,2021-02-08 00:08:50,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",865,869,,,0,2020-06-29 19:52:14,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,864,864,,,1,2021-02-08 00:08:50,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",733,733,Unai Martinez-Corral,652c755,0,2022-10-04 22:41:30,2021-02-08 00:08:50
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",881,881,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1007,1007,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",871,880,,,0,2020-06-29 19:52:14,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",756,756,Unai Martinez-Corral,652c755,0,2022-10-04 22:41:30,2021-02-08 00:08:50
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1047,1049,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1008,1045,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",882,1006,,,0,2020-06-29 19:52:14,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",781,781,Unai Martinez-Corral,652c755,0,2022-10-04 22:41:30,2021-02-08 00:08:50
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1046,1046,,,1,2021-02-08 00:08:50,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1050,1050,,,1,2021-02-08 00:08:50,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1055,1057,,,0,2020-06-29 19:52:14,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1054,1054,,,1,2021-02-08 00:08:50,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1059,1167,,,0,2020-06-29 19:52:14,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",809,810,Unai Martinez-Corral,652c755,0,2022-10-04 22:41:30,2021-02-08 00:08:50
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1051,1053,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1169,1171,,,0,2020-06-29 19:52:14,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1173,1175,,,0,2020-06-29 19:52:14,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1318,1325,,,0,2020-04-03 19:43:43,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1168,1168,,,1,2021-02-08 00:08:50,
completions_test.go,6d00909,Lukas Malkmus,Pass context to completion (#1265),1276,1317,Unai Martinez-Corral,652c755,0,2021-05-03 16:33:57,2021-02-08 00:08:50
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1326,1326,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1327,1334,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1335,1335,,,0,2020-04-06 17:28:44,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1342,1342,,,0,2020-04-10 19:56:28,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1177,1275,,,0,2020-06-29 19:52:14,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1058,1058,,,1,2021-02-08 00:08:50,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1343,1349,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1350,1350,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1336,1341,,,0,2020-04-03 19:43:43,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1172,1172,,,1,2021-02-08 00:08:50,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1351,1369,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1370,1370,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1371,1376,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1378,1398,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1377,1377,,,0,2020-04-06 17:28:44,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1176,1176,,,1,2021-02-08 00:08:50,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1400,1407,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1408,1408,,,0,2020-04-06 17:28:44,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1399,1399,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1409,1414,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1415,1415,,,0,2020-04-10 19:56:28,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1423,1423,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1416,1422,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1424,1429,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1430,1430,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1431,1436,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1445,1452,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1437,1437,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1454,1458,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1453,1453,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1438,1443,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1444,1444,,,0,2020-04-10 19:56:28,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1459,1459,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1460,1466,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1467,1467,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1468,1473,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1475,1480,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1474,1474,,,0,2020-04-10 19:56:28,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1481,1481,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1482,1498,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1499,1499,,,0,2020-04-10 19:56:28,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1508,1508,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1500,1507,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1509,1514,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1515,1515,,,0,2020-04-10 19:56:28,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1523,1523,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1524,1529,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1516,1522,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1538,1543,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1531,1536,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1537,1537,,,0,2020-04-06 17:28:44,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1530,1530,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1545,1553,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1555,1559,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1544,1544,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1561,1568,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1575,1584,,,0,2020-04-10 19:56:28,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1560,1560,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1570,1574,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1586,1590,,,0,2020-04-10 19:56:28,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1591,1600,,,0,2020-06-29 19:52:14,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1569,1569,,,1,2021-02-08 00:08:50,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1624,1629,,,0,2020-04-03 19:43:43,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1618,1623,,,0,2020-06-29 19:52:14,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1554,1554,,,1,2021-02-08 00:08:50,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1585,1585,,,1,2021-02-08 00:08:50,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",1602,1616,,,0,2020-06-29 19:52:14,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1631,1631,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1632,1632,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1633,1636,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1637,1637,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1639,1639,,,0,2020-04-03 19:43:43,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1630,1630,,,1,2021-02-08 00:08:50,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1617,1617,,,1,2021-02-08 00:08:50,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1643,1646,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1647,1647,,,0,2020-04-06 17:28:44,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1601,1601,,,1,2021-02-08 00:08:50,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1642,1642,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1641,1641,,,0,2020-04-03 19:43:43,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1661,1661,,,0,2020-04-06 17:28:44,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1651,1651,,,0,2020-04-10 19:56:28,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1640,1640,,,1,2021-02-08 00:08:50,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1649,1650,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1652,1660,,,0,2020-04-03 19:43:43,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1638,1638,,,1,2021-02-08 00:08:50,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1677,1677,,,0,2020-04-06 17:28:44,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1662,1667,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1678,1683,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1669,1676,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1684,1684,,,0,2020-04-10 19:56:28,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1694,1694,,,0,2020-04-06 17:28:44,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1668,1668,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1695,1700,,,0,2020-04-03 19:43:43,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1702,1709,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1701,1701,,,0,2020-04-10 19:56:28,
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1685,1693,,,0,2020-04-03 19:43:43,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1648,1648,,,1,2021-02-08 00:08:50,
completions_test.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1710,1710,,,0,2020-04-06 17:28:44,
completions_test.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",1821,1849,Marc Khouzam,b361960,0,2021-07-01 15:47:10,2021-06-30 21:24:58
completions_test.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",1851,2043,Marc Khouzam,b361960,0,2021-07-01 15:47:10,2021-06-30 21:24:58
completions_test.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1711,1715,,,0,2020-04-03 19:43:43,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,1716,1820,,,0,2020-04-10 19:56:28,
completions_test.go,00b68a1,Marc Khouzam,"Add tests for flag completion registration (#2053)  Different problems have been reported about flag completion registration. These two tests are the cases that were not being verified but had been mentioned as problematic.  Ref: - https://github.com/spf13/cobra/issues/1320 - https://github.com/spf13/cobra/pull/1438#issuecomment-872928669  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",2079,2186,Marc Khouzam,b711e87,0,2023-10-28 20:11:59,2023-10-28 20:10:06
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,2194,2200,,,0,2020-04-10 19:56:28,
completions_test.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",2044,2078,Unai Martinez-Corral,652c755,1,2021-07-02 15:25:47,2021-02-08 00:08:50
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,2187,2192,,,0,2020-04-10 19:56:28,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,2202,2202,,,0,2020-04-10 19:56:28,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,2204,2210,,,0,2020-04-10 19:56:28,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,2201,2201,,,1,2021-02-08 00:08:50,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",1850,1850,Marc Khouzam,b361960,0,2022-10-04 22:41:30,2021-06-30 21:24:58
completions_test.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",2279,2279,,,0,2020-06-16 20:49:26,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",2280,2380,,,0,2020-06-29 19:52:14,
completions_test.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,2212,2278,,,0,2020-04-10 19:56:28,
completions_test.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",2381,2407,,,0,2020-06-16 20:49:26,
completions_test.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",2410,2411,,,0,2020-06-29 19:52:14,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,2193,2193,,,1,2021-02-08 00:08:50,
completions_test.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",2412,2425,,,0,2020-06-16 20:49:26,
completions_test.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",2427,2449,,,0,2020-06-16 20:49:26,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2408,2408,,,0,2021-02-15 17:47:01,
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,2211,2211,,,1,2021-02-08 00:08:50,
completions_test.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",2409,2409,,,0,2020-06-16 20:49:26,
completions_test.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",2477,2487,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,2203,2203,,,1,2021-02-08 00:08:50,
completions_test.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",2468,2468,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2426,2426,,,0,2021-02-15 17:47:01,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2469,2476,,,0,2021-02-15 17:47:01,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2450,2467,,,0,2021-02-15 17:47:01,
completions_test.go,6f84ef4,Marc Khouzam,"Provide option to hide default 'completion' cmd (#1541)  Fixes #1507  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2590,2604,Paul Holzinger,de187e8,0,2021-12-07 23:02:02,2021-07-02 15:25:47
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2547,2547,,,0,2021-02-15 17:47:01,
completions_test.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",2609,2644,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2556,2589,,,0,2021-02-15 17:47:01,
completions_test.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",2652,2652,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2549,2555,,,0,2021-02-15 17:47:01,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2488,2545,,,0,2021-02-15 17:47:01,
completions_test.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",2657,2657,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions_test.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2548,2548,,,0,2021-06-30 21:24:58,
completions_test.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2546,2546,,,0,2021-06-30 21:24:58,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2645,2651,,,0,2021-02-15 17:47:01,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2605,2608,,,0,2021-02-15 17:47:01,
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2653,2656,,,0,2021-02-15 17:47:01,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",2838,2839,Simon Ser,5d066b7,0,2022-10-04 22:41:30,2022-03-18 01:37:54
completions_test.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2658,2692,,,0,2021-02-15 17:47:01,
completions_test.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2786,2837,,,0,2021-11-01 19:01:33,
completions_test.go,a97f9fd,ccoVeille,"fix CompletionFunc implementation (#2234)  The new type CompletionFunc could lead to a regression. This commit make the new `CompletionFunc` type a type alias instead, in case projects using Cobra have created their own similar type.  This commit also adds a test to ensure that the completion function remains backwards-compatible.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com>",2888,2889,Marc Khouzam,24ada7f,1,2025-02-16 18:08:14,2025-02-15 18:07:02
completions_test.go,2d94892,Paul Holzinger,"Custom completion handle multiple shorhand flags together (#1258)  Flag definitions like `-asd` are not handled correctly by the custom completion logic. They should be treated as multiple flags. For details refer to #1257.  Fixes #1257  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",2693,2785,,,0,2021-05-03 16:42:00,
completions_test.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2840,2848,,,0,2021-11-01 19:01:33,
completions_test.go,9054739,Marc Khouzam,"Remove __complete cmd for program without subcmds (#1563)  Fixes #1562  Programs that don't have sub-commands can accept any number of args. However, when doing shell completion for such programs, within the __complete code this very __complete command makes it that the program suddenly has a sub-command, and the call to Find() -> legacyArgs() will then return an error if there are more than one argument on the command-line being completed.  To avoid this, we first remove the __complete command in such a case so as to get back to having no sub-commands.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2849,2887,,,1,2021-12-14 18:22:22,
completions_test.go,a97f9fd,ccoVeille,"fix CompletionFunc implementation (#2234)  The new type CompletionFunc could lead to a regression. This commit make the new `CompletionFunc` type a type alias instead, in case projects using Cobra have created their own similar type.  This commit also adds a test to ensure that the completion function remains backwards-compatible.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com>",2896,2980,Marc Khouzam,24ada7f,1,2025-02-16 18:08:14,2025-02-15 18:07:02
completions_test.go,9054739,Marc Khouzam,"Remove __complete cmd for program without subcmds (#1563)  Fixes #1562  Programs that don't have sub-commands can accept any number of args. However, when doing shell completion for such programs, within the __complete code this very __complete command makes it that the program suddenly has a sub-command, and the call to Find() -> legacyArgs() will then return an error if there are more than one argument on the command-line being completed.  To avoid this, we first remove the __complete command in such a case so as to get back to having no sub-commands.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",2890,2894,,,1,2021-12-14 18:22:22,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3105,3106,Unai Martinez-Corral,6d978a9,0,2022-10-04 22:41:30,2022-09-16 11:55:56
completions_test.go,c81c46a,Martijn Evers,Add 'one required flag' group (#1952),3126,3223,Marc Khouzam,212ea40,0,2023-07-16 16:38:22,2022-10-04 22:41:30
completions_test.go,5d066b7,Simon Ser,"Introduce FixedCompletions (#1574)  Example usage:      choices := []string{""choice1"", ""choice2"", ""choice3""}     cmd.RegisterFlagCompletionFunc(cobra.FixedCompletions(choices, ShellCompDirectiveNoFileComp))",2981,3006,,,0,2022-03-18 01:37:54,
completions_test.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",3008,3057,Unai Martinez-Corral,9e6b58a,0,2025-02-09 16:06:07,2023-03-06 02:28:31
completions_test.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",3224,3302,,,0,2022-06-21 02:04:28,
completions_test.go,5d066b7,Simon Ser,"Introduce FixedCompletions (#1574)  Example usage:      choices := []string{""choice1"", ""choice2"", ""choice3""}     cmd.RegisterFlagCompletionFunc(cobra.FixedCompletions(choices, ShellCompDirectiveNoFileComp))",2895,2895,,,0,2022-03-18 01:37:54,
completions_test.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",3305,3314,,,0,2022-06-21 02:04:28,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3303,3304,,,0,2022-10-04 22:41:30,
completions_test.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",3317,3324,,,0,2022-06-21 02:04:28,
completions_test.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",3327,3348,,,0,2022-06-21 02:04:28,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3349,3380,,,0,2022-10-04 22:41:30,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3325,3326,,,0,2022-10-04 22:41:30,
completions_test.go,b711e87,Marc Khouzam,"Don't complete --help flag when flag parsing disabled (#2061)  Fixes #2060  When a command sets `DisableFlagParsing = true` it requests the responsibility of doing all the flag parsing. Therefore even the `--help/-f/--version/-v` flags should not be automatically completed by Cobra in such a case.  Without this change the `--help/-h/--version/-v` flags can end up being completed twice for plugins: one time from cobra and one time from the plugin (which has set `DisableFlagParsing = true`).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3381,3398,,,0,2023-10-28 20:10:06,
completions_test.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",3007,3007,,,0,2022-06-21 02:04:28,
completions_test.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",3058,3104,,,0,2022-06-21 02:04:28,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3399,3399,,,0,2022-10-04 22:41:30,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3315,3316,,,0,2022-10-04 22:41:30,
completions_test.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",3107,3125,,,0,2022-06-21 02:04:28,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3401,3411,,,0,2022-10-04 22:41:30,
completions_test.go,b711e87,Marc Khouzam,"Don't complete --help flag when flag parsing disabled (#2061)  Fixes #2060  When a command sets `DisableFlagParsing = true` it requests the responsibility of doing all the flag parsing. Therefore even the `--help/-f/--version/-v` flags should not be automatically completed by Cobra in such a case.  Without this change the `--help/-h/--version/-v` flags can end up being completed twice for plugins: one time from cobra and one time from the plugin (which has set `DisableFlagParsing = true`).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3400,3400,,,0,2023-10-28 20:10:06,
completions_test.go,b711e87,Marc Khouzam,"Don't complete --help flag when flag parsing disabled (#2061)  Fixes #2060  When a command sets `DisableFlagParsing = true` it requests the responsibility of doing all the flag parsing. Therefore even the `--help/-f/--version/-v` flags should not be automatically completed by Cobra in such a case.  Without this change the `--help/-h/--version/-v` flags can end up being completed twice for plugins: one time from cobra and one time from the plugin (which has set `DisableFlagParsing = true`).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3412,3415,,,0,2023-10-28 20:10:06,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3566,3582,,,0,2022-10-04 22:41:30,
completions_test.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3416,3545,,,0,2022-10-04 22:41:30,
completions_test.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3928,4018,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions_test.go,b4f979a,Dominik Roos,"completions: do not detect arguments with dash as 2nd char as flag (#1817)  Fixes #1816  Previously, arguments with a dash as the second character (e.g., 1-ff00:0:1) were detected as a flag by mistake. This resulted in auto completion misbehaving if such an argument was last in the argument list during invocation.",3583,3646,,,0,2023-01-03 00:58:36,
completions_test.go,a0a6ae0,Marc Khouzam,"Improve API to get flag completion function (#2063)  The new API is simpler and matches the `c.RegisterFlagCompletionFunc()` API.  By removing the global function `GetFlagCompletion()` we are more future proof if we ever move from a global map of flag completion functions to something associated with the command.  The commit also makes this API work with persistent flags by using `c.Flag(flagName)` instead of `c.Flags().Lookup(flagName)`.  The commit also adds unit tests.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3647,3736,,,0,2023-11-02 15:23:08,
completions_test.go,b711e87,Marc Khouzam,"Don't complete --help flag when flag parsing disabled (#2061)  Fixes #2060  When a command sets `DisableFlagParsing = true` it requests the responsibility of doing all the flag parsing. Therefore even the `--help/-f/--version/-v` flags should not be automatically completed by Cobra in such a case.  Without this change the `--help/-h/--version/-v` flags can end up being completed twice for plugins: one time from cobra and one time from the plugin (which has set `DisableFlagParsing = true`).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",3546,3565,,,0,2023-10-28 20:10:06,
completions_test.go,e63925d,Ville Skyttä,"Add env variable to suppress completion descriptions on create (#1938)  COBRA_COMPLETION_DESCRIPTIONS=0  or  <PROGRAM>_COMPLETION_DESCRIPTIONS=0 can now be used to disable shell completion descriptions.",3737,3927,,,0,2023-12-17 18:50:59,
completions.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Marc Khouzam,5f2ec3c,0,2022-09-16 11:55:56,2022-06-21 02:04:28
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",15,17,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",18,19,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",22,22,,,0,2020-04-03 19:43:43,
completions.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Gyanendra Mishra,3daa4b9,0,2023-03-06 02:28:31,2023-02-25 20:57:12
completions.go,e63925d,Ville Skyttä,"Add env variable to suppress completion descriptions on create (#1938)  COBRA_COMPLETION_DESCRIPTIONS=0  or  <PROGRAM>_COMPLETION_DESCRIPTIONS=0 can now be used to disable shell completion descriptions.",20,21,Ville Skyttä,3d8ac43,0,2023-12-17 18:50:59,2023-11-23 17:24:33
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",24,27,,,0,2020-04-03 19:43:43,
completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",23,23,Kyle Lemons,5738d6b,1,2021-07-02 15:25:47,2021-07-01 15:49:12
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",43,43,,,0,2020-04-06 17:28:44,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,28,35,,,0,2020-04-10 19:56:28,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",44,44,,,0,2020-04-03 19:43:43,
completions.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,38,38,Sebastiaan van Stijn,0745e55,0,2025-01-22 01:34:05,2024-12-28 22:41:43
completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",37,37,silenceshell,3c8a19e,1,2021-07-02 15:25:47,2021-06-30 21:49:30
completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",39,42,silenceshell,3c8a19e,1,2021-07-02 15:25:47,2021-06-30 21:49:30
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",45,45,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",36,36,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",46,46,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",62,62,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",63,63,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",57,58,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",61,61,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",59,59,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",60,60,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",56,56,,,0,2020-04-03 19:43:43,
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",47,55,Unai Martinez-Corral,652c755,0,2021-07-01 15:47:10,2021-02-08 00:08:50
completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,82,85,Yash Ladha,bf11ab6,0,2023-02-25 20:57:12,2022-12-25 20:08:39
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",64,64,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",65,65,,,0,2020-04-03 19:43:43,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",68,81,,,0,2020-06-29 19:52:14,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",66,66,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",67,67,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",92,92,,,0,2020-04-06 17:28:44,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",86,91,,,0,2020-06-29 19:52:14,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",93,93,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",96,97,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",95,95,,,0,2020-04-06 17:28:44,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",98,115,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",120,130,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,a97f9fd,ccoVeille,"fix CompletionFunc implementation (#2234)  The new type CompletionFunc could lead to a regression. This commit make the new `CompletionFunc` type a type alias instead, in case projects using Cobra have created their own similar type.  This commit also adds a test to ensure that the completion function remains backwards-compatible.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com>",132,132,Marc Khouzam,24ada7f,1,2025-02-16 18:08:14,2025-02-15 18:07:02
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",118,119,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",94,94,,,0,2020-06-29 19:52:14,
completions.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,131,131,Sebastiaan van Stijn,0745e55,0,2025-01-22 01:34:05,2024-12-28 22:41:43
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",133,137,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,6f84ef4,Marc Khouzam,"Provide option to hide default 'completion' cmd (#1541)  Fixes #1507  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",116,117,Kyle Lemons,5738d6b,0,2021-12-07 23:02:02,2021-07-01 15:49:12
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",145,147,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",139,140,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,141,143,Sebastiaan van Stijn,0745e55,0,2025-01-22 01:34:05,2024-12-28 22:41:43
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",144,144,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,150,152,Sebastiaan van Stijn,0745e55,0,2025-01-22 01:34:05,2024-12-28 22:41:43
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",153,154,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,138,138,Sebastiaan van Stijn,0745e55,0,2025-01-22 01:34:05,2024-12-28 22:41:43
completions.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,160,163,Sebastiaan van Stijn,0745e55,0,2025-01-22 01:34:05,2024-12-28 22:41:43
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",159,159,,,0,2020-04-03 19:43:43,
completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",168,169,Unai Martinez-Corral,652c755,1,2021-07-02 15:25:47,2021-02-08 00:08:50
completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",171,171,Unai Martinez-Corral,652c755,1,2021-07-02 15:25:47,2021-02-08 00:08:50
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",172,173,,,0,2020-04-03 19:43:43,
completions.go,3c8a19e,silenceshell,"fix RegisterFlagCompletionFunc concurrent map writes error (#1423)  * fix-RegisterFlagCompletionFunc-concurrent * set to root command * move to non-public fields",170,170,Unai Martinez-Corral,652c755,1,2021-06-30 21:49:30,2021-02-08 00:08:50
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",164,167,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",175,177,,,0,2020-04-03 19:43:43,
completions.go,a0a6ae0,Marc Khouzam,"Improve API to get flag completion function (#2063)  The new API is simpler and matches the `c.RegisterFlagCompletionFunc()` API.  By removing the global function `GetFlagCompletion()` we are more future proof if we ever move from a global map of flag completion functions to something associated with the command.  The commit also makes this API work with persistent flags by using `c.Flag(flagName)` instead of `c.Flags().Lookup(flagName)`.  The commit also adds unit tests.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",178,178,Yash Ladha,bf11ab6,0,2023-11-02 15:23:08,2022-12-25 20:08:39
completions.go,a0a6ae0,Marc Khouzam,"Improve API to get flag completion function (#2063)  The new API is simpler and matches the `c.RegisterFlagCompletionFunc()` API.  By removing the global function `GetFlagCompletion()` we are more future proof if we ever move from a global map of flag completion functions to something associated with the command.  The commit also makes this API work with persistent flags by using `c.Flag(flagName)` instead of `c.Flags().Lookup(flagName)`.  The commit also adds unit tests.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",180,184,Yash Ladha,bf11ab6,0,2023-11-02 15:23:08,2022-12-25 20:08:39
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",192,192,,,0,2020-04-03 19:43:43,
completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",174,174,Unai Martinez-Corral,652c755,1,2021-07-02 15:25:47,2021-02-08 00:08:50
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",195,196,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",194,194,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",193,193,,,0,2020-04-06 17:28:44,
completions.go,5d066b7,Simon Ser,"Introduce FixedCompletions (#1574)  Example usage:      choices := []string{""choice1"", ""choice2"", ""choice3""}     cmd.RegisterFlagCompletionFunc(cobra.FixedCompletions(choices, ShellCompDirectiveNoFileComp))",148,149,Unai Martinez-Corral,652c755,0,2022-03-18 01:37:54,2021-02-08 00:08:50
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",198,199,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",200,200,,,0,2020-04-03 19:43:43,
completions.go,bd4d165,Alexandru-Claudius Virtopeanu,feat: add getters for flag completions (#1943),185,191,Yash Ladha,bf11ab6,0,2023-09-26 00:04:25,2022-12-25 20:08:39
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",201,202,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",203,203,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",197,197,,,0,2020-04-03 19:43:43,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",204,209,,,0,2020-06-29 19:52:14,
completions.go,3daa4b9,Gyanendra Mishra,Add keeporder to shell completion (#1903)  This allows programs to request the shell to maintain the order of completions that was returned by the program,210,212,xuwu,87ea180,0,2023-02-25 20:57:12,2022-06-13 02:22:49
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",214,214,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",213,213,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",218,218,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",219,222,,,0,2020-04-03 19:43:43,
completions.go,5d066b7,Simon Ser,"Introduce FixedCompletions (#1574)  Example usage:      choices := []string{""choice1"", ""choice2"", ""choice3""}     cmd.RegisterFlagCompletionFunc(cobra.FixedCompletions(choices, ShellCompDirectiveNoFileComp))",155,158,Unai Martinez-Corral,652c755,0,2022-03-18 01:37:54,2021-02-08 00:08:50
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",215,216,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",226,226,,,0,2020-04-06 17:28:44,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",217,217,,,0,2020-06-29 19:52:14,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",224,225,,,0,2020-04-03 19:43:43,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,227,227,,,0,2020-04-10 19:56:28,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",235,243,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",234,234,,,0,2020-04-06 17:28:44,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",228,233,,,0,2020-04-03 19:43:43,
completions.go,e63925d,Ville Skyttä,"Add env variable to suppress completion descriptions on create (#1938)  COBRA_COMPLETION_DESCRIPTIONS=0  or  <PROGRAM>_COMPLETION_DESCRIPTIONS=0 can now be used to disable shell completion descriptions.",244,249,Marc Khouzam,a0a6ae0,0,2023-12-17 18:50:59,2023-11-02 15:23:08
completions.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",250,251,Marc Khouzam,a0a6ae0,1,2023-11-23 17:24:33,2023-11-02 15:23:08
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",252,252,,,0,2020-04-03 19:43:43,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,257,258,,,0,2020-04-10 19:56:28,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,260,260,,,0,2020-04-10 19:56:28,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",261,261,,,0,2020-06-29 19:52:14,
completions.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",223,223,Paul Holzinger,2d94892,1,2022-12-25 20:08:39,2021-05-03 16:42:00
completions.go,f464d6c,Marc Khouzam,Add Active Help support (#1482),256,256,Marc Khouzam,6f84ef4,0,2022-06-16 00:08:16,2021-12-07 23:02:02
completions.go,8a63648,Luap99,"Handle linebreaks in custom completions. (#1162)  If a command/flag description contains a linebreak then the shell completion script will interpret this as new command/flag.  To fix this we only use the first line from the description in the output.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",267,267,,,1,2020-09-09 17:27:42,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",268,274,,,0,2020-06-29 19:52:14,
completions.go,8a63648,Luap99,"Handle linebreaks in custom completions. (#1162)  If a command/flag description contains a linebreak then the shell completion script will interpret this as new command/flag.  To fix this we only use the first line from the description in the output.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",262,265,,,1,2020-09-09 17:27:42,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",279,281,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",277,278,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",283,290,,,0,2020-04-03 19:43:43,
completions.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",253,255,Unai Martinez-Corral,652c755,1,2023-11-23 17:24:33,2021-02-08 00:08:50
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",292,300,,,0,2020-04-03 19:43:43,
completions.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",301,308,Ville Skyttä,e63925d,1,2024-12-28 22:41:43,2023-12-17 18:50:59
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",310,314,,,0,2020-04-03 19:43:43,
completions.go,b84ef40,Marc Khouzam,"Rename BashCompDirectives to ShellCompDirectives (#1082)  Since the completion directives will be used for all shells, and that these names will be consumed by users, this is a more appropriate name.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",291,291,,,0,2020-04-06 17:28:44,
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",309,309,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",315,317,,,1,2020-09-09 15:34:51,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",318,318,,,0,2020-04-03 19:43:43,
completions.go,9054739,Marc Khouzam,"Remove __complete cmd for program without subcmds (#1563)  Fixes #1562  Programs that don't have sub-commands can accept any number of args. However, when doing shell completion for such programs, within the __complete code this very __complete command makes it that the program suddenly has a sub-command, and the call to Find() -> legacyArgs() will then return an error if there are more than one argument on the command-line being completed.  To avoid this, we first remove the __complete command in such a case so as to get back to having no sub-commands.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",323,333,Paul Holzinger,de187e8,1,2021-12-14 18:22:22,2021-07-02 15:25:47
completions.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",319,322,,,1,2020-09-09 15:34:51,
completions.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",334,334,,,1,2020-09-09 15:34:51,
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",337,337,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",338,338,,,0,2020-06-29 19:52:14,
completions.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",282,282,Marc Khouzam,6f84ef4,1,2023-11-23 17:24:33,2021-12-07 23:02:02
completions.go,6d00909,Lukas Malkmus,Pass context to completion (#1265),339,339,Unai Martinez-Corral,652c755,0,2021-05-03 16:33:57,2021-02-08 00:08:50
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",335,336,,,0,2020-04-03 19:43:43,
completions.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,179,179,Unai Martinez-Corral,652c755,0,2025-01-22 01:34:05,2021-02-08 00:08:50
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",340,340,,,0,2020-06-29 19:52:14,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",351,354,,,0,2020-06-29 19:52:14,
completions.go,b711e87,Marc Khouzam,"Don't complete --help flag when flag parsing disabled (#2061)  Fixes #2060  When a command sets `DisableFlagParsing = true` it requests the responsibility of doing all the flag parsing. Therefore even the `--help/-f/--version/-v` flags should not be automatically completed by Cobra in such a case.  Without this change the `--help/-h/--version/-v` flags can end up being completed twice for plugins: one time from cobra and one time from the plugin (which has set `DisableFlagParsing = true`).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",343,349,Unai Martinez-Corral,6d978a9,0,2023-10-28 20:10:06,2022-09-16 11:55:56
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",355,363,Marc Khouzam,95d23d2,0,2021-07-01 15:47:10,2021-05-03 16:54:00
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",367,367,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",364,366,,,0,2020-06-29 19:52:14,
completions.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",350,350,Paul Holzinger,de187e8,0,2022-10-04 22:41:30,2021-07-02 15:25:47
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",368,369,,,0,2020-06-29 19:52:14,
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",370,378,Unai Martinez-Corral,652c755,0,2021-07-01 15:47:10,2021-02-08 00:08:50
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",380,382,Unai Martinez-Corral,652c755,0,2021-07-01 15:47:10,2021-02-08 00:08:50
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",386,386,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",379,379,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",389,394,Paul Holzinger,de187e8,0,2021-11-01 19:01:33,2021-07-02 15:25:47
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",396,414,,,0,2020-06-29 19:52:14,
completions.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",259,259,Unai Martinez-Corral,652c755,1,2023-11-23 17:24:33,2021-02-08 00:08:50
completions.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",387,388,Paul Holzinger,de187e8,0,2022-10-04 22:41:30,2021-07-02 15:25:47
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",395,395,Unai Martinez-Corral,652c755,0,2021-07-01 15:47:10,2021-02-08 00:08:50
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",415,415,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",417,418,,,0,2020-04-03 19:43:43,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",416,416,,,0,2020-06-29 19:52:14,
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",420,421,Kyle Lemons,5738d6b,0,2021-11-01 19:01:33,2021-07-01 15:49:12
completions.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",383,385,Unai Martinez-Corral,652c755,0,2022-10-04 22:41:30,2021-02-08 00:08:50
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",425,425,Kyle Lemons,5738d6b,0,2021-11-01 19:01:33,2021-07-01 15:49:12
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",419,419,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",275,276,Unai Martinez-Corral,652c755,1,2023-11-23 17:24:33,2021-02-08 00:08:50
completions.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",266,266,Unai Martinez-Corral,652c755,1,2023-11-23 17:24:33,2021-02-08 00:08:50
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,428,429,,,0,2020-04-10 19:56:28,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",430,430,,,0,2020-06-29 19:52:14,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",432,437,,,0,2020-06-29 19:52:14,
completions.go,81d27c8,cui fliter,"fix some typos (#1625)  * fix some typos  Signed-off-by: cuishuang <imcusg@gmail.com>",426,426,Paul Holzinger,de187e8,1,2022-03-14 11:05:53,2021-07-02 15:25:47
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",431,431,Unai Martinez-Corral,652c755,0,2021-07-01 15:47:10,2021-02-08 00:08:50
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",427,427,Unai Martinez-Corral,652c755,0,2021-11-01 19:01:33,2021-02-08 00:08:50
completions.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",341,342,Unai Martinez-Corral,652c755,0,2022-10-04 22:41:30,2021-02-08 00:08:50
completions.go,5f2ec3c,Marc Khouzam,"Update shell completion to respect flag groups (#1659)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Marc Khouzam <marc.khouzam@montreal.ca>",422,424,Paul Holzinger,de187e8,0,2022-06-21 02:04:28,2021-07-02 15:25:47
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",440,440,,,0,2020-06-29 19:52:14,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",446,448,,,0,2020-06-29 19:52:14,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,449,449,,,0,2020-04-10 19:56:28,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",450,456,,,0,2020-06-29 19:52:14,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",462,466,,,0,2020-06-29 19:52:14,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,472,472,,,0,2020-04-10 19:56:28,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",468,471,,,0,2020-06-29 19:52:14,
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",467,467,Unai Martinez-Corral,652c755,0,2021-11-01 19:01:33,2021-02-08 00:08:50
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,473,473,,,0,2020-04-10 19:56:28,
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",474,479,Unai Martinez-Corral,652c755,0,2021-11-01 19:01:33,2021-02-08 00:08:50
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",496,496,,,0,2020-06-29 19:52:14,
completions.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",442,444,Paul Holzinger,de187e8,1,2024-12-28 22:41:43,2021-07-02 15:25:47
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",481,495,Unai Martinez-Corral,652c755,0,2021-11-01 19:01:33,2021-02-08 00:08:50
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",497,504,silenceshell,3c8a19e,0,2021-11-01 19:01:33,2021-06-30 21:49:30
completions.go,50258f1,Luap99,"Complete subcommands when TraverseChildren is set (#1171)  * Complete subcommands when TraverseChildren is true in custom completion  The current custom completion logic does not complete subcommands when a local flag is set. This is good unless TraverseChildren is set to true where local flags can be set on parent commands.  This commit allows subcommands to be completed if TraverseChildren is set to true on the root cmd.  Closes #1170  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>  * Complete subcommands when TraverseChildren is true in bash completion  The current bash completion logic does not complete subcommands when a local flag is set. There is also a bug where subcommands are sometimes still getting completed. see: #1172  If TraverseChildren is true we should allow subcommands to be completed even if a local flag is set.  Closes #1172  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",480,480,,,1,2020-09-09 15:34:51,
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",505,505,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",506,507,silenceshell,3c8a19e,0,2021-11-01 19:01:33,2021-06-30 21:49:30
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,510,510,,,0,2020-04-10 19:56:28,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,511,511,,,0,2020-04-10 19:56:28,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",508,508,,,0,2020-06-29 19:52:14,
completions.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",509,509,,,0,2020-06-16 20:49:26,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",524,524,,,0,2020-06-29 19:52:14,
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",512,523,Lukas Malkmus,6d00909,0,2021-11-01 19:01:33,2021-05-03 16:33:57
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",525,533,Lukas Malkmus,6d00909,0,2021-11-01 19:01:33,2021-05-03 16:33:57
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,541,542,,,0,2020-04-10 19:56:28,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,536,536,,,0,2020-04-10 19:56:28,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",534,535,,,0,2020-06-29 19:52:14,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,546,546,,,0,2020-04-10 19:56:28,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",549,549,,,0,2020-04-03 19:43:43,
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",543,545,Lukas Malkmus,6d00909,0,2021-11-01 19:01:33,2021-05-03 16:33:57
completions.go,d2c0cb3,Marc Khouzam,"DisableFlagParsing must disable flag completion (#1161)  When a command has set DisableFlagParsing=true, it means Cobra should not be handling flags for that command but should let the command handle them itself.  In fact, Cobra normally won't have been told at all about flags for this command.  Not knowing about the flags of the command also implies that Cobra cannot perform flag completion as it does not have the necessary info.  This commit still tries to do flag name completion, but when DisableFlagParsing==true, it continues on so that ValidArgsFunction will be called; this allows the program to handle completion for its own flags when DisableFlagParsing==true.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",537,540,Lukas Malkmus,6d00909,0,2021-11-01 19:01:33,2021-05-03 16:33:57
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,547,548,,,0,2020-04-10 19:56:28,
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",551,551,silenceshell,3c8a19e,0,2021-07-01 15:47:10,2021-06-30 21:49:30
completions.go,de187e8,Paul Holzinger,"Fix flag completion (#1438)  * Fix flag completion  The flag completion functions should not be stored in the root cmd. There is no requirement that the root cmd should be the same when `RegisterFlagCompletionFunc` was called. Storing the flags there does not work when you add the the flags to your cmd struct before you add the cmd to the parent/root cmd. The flags can no longer be found in the rigth place when the completion command is called and thus the flag completion does not work.  Also #1423 claims that this would be thread safe but we still have a map which will fail when accessed concurrently. To truly fix this issue use a RWMutex.  Fixes #1437 Fixes #1320  Signed-off-by: Paul Holzinger <pholzing@redhat.com>  * Fix trailing whitespaces in fish comp scripts  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",552,554,silenceshell,3c8a19e,1,2021-07-02 15:25:47,2021-06-30 21:49:30
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",558,560,,,0,2020-06-29 19:52:14,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",555,557,,,0,2020-04-03 19:43:43,
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",561,561,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",562,563,,,0,2020-06-29 19:52:14,
completions.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,550,550,Unai Martinez-Corral,6d978a9,0,2025-01-22 01:34:05,2022-09-16 11:55:56
completions.go,b711e87,Marc Khouzam,"Don't complete --help flag when flag parsing disabled (#2061)  Fixes #2060  When a command sets `DisableFlagParsing = true` it requests the responsibility of doing all the flag parsing. Therefore even the `--help/-f/--version/-v` flags should not be automatically completed by Cobra in such a case.  Without this change the `--help/-h/--version/-v` flags can end up being completed twice for plugins: one time from cobra and one time from the plugin (which has set `DisableFlagParsing = true`).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",457,461,Paul Holzinger,de187e8,0,2023-10-28 20:10:06,2021-07-02 15:25:47
completions.go,756ba6d,Gabe Cook,fix(completions): Complete map flags multiple times (#2174),441,441,Paul Holzinger,de187e8,1,2024-07-28 16:18:07,2021-07-02 15:25:47
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",564,565,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",566,568,,,0,2020-04-03 19:43:43,
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",581,581,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,582,582,,,0,2020-04-10 19:56:28,
completions.go,0745e55,Sebastiaan van Stijn,"completion: improve detection for flags that accept multiple values (#2210)  The completion code attempts to detect whether a flag can be specified more than once, and therefore should provide completion even if already set.  Currently, this code depends on conventions used in the pflag package, which uses an ""Array"" or ""Slice"" suffix or for some types a ""stringTo"" prefix.  Cobra allows custom value types to be used, which may not use the same convention for naming, and therefore currently aren't detected to allow multiple values.  The pflag module defines a [SliceValue] interface, which is implemented by the Slice and Array value types it provides (unfortunately, it's not currently implemented by the ""stringTo"" values).  This patch adds a reduced interface based on the [SliceValue] interface mentioned above to allow detecting Value-types that accept multiple values. Custom types can implement this interface to make completion work for those values.  I deliberately used a reduced interface to keep the requirements for this detection as low as possible, without enforcing the other methods defined in the interface (Append, Replace) which may not apply to all custom types.  Future improvements can likely still be made, considering either implementing the SliceValue interface for the ""stringTo"" values or defining a separate ""MapValue"" interface for those types.  Possibly providing the reduced interface as part of the pflag module and to export it.  [SliceValue]: https://github.com/spf13/pflag/blob/d5e0c0615acee7028e1e2740a11102313be88de1/flag.go#L193-L203  Signed-off-by: Sebastiaan van Stijn <github@gone.nl> Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",438,439,Paul Holzinger,de187e8,1,2024-12-28 22:41:43,2021-07-02 15:25:47
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",583,583,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,756ba6d,Gabe Cook,fix(completions): Complete map flags multiple times (#2174),445,445,Paul Holzinger,de187e8,1,2024-07-28 16:18:07,2021-07-02 15:25:47
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,587,589,,,0,2020-04-10 19:56:28,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,591,591,,,0,2020-04-10 19:56:28,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,584,585,,,0,2020-04-10 19:56:28,
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",590,590,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",586,586,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",603,603,,,0,2020-06-29 19:52:14,
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",602,602,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",608,608,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",569,573,silenceshell,3c8a19e,0,2022-10-04 22:41:30,2021-06-30 21:49:30
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",592,601,,,0,2020-06-29 19:52:14,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,604,607,,,0,2020-04-10 19:56:28,
completions.go,a684a6d,Marc Khouzam,Fish completion using Go completion (#1048)  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>,609,613,,,0,2020-04-10 19:56:28,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",616,638,,,0,2020-06-29 19:52:14,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",639,639,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",646,648,,,0,2020-04-03 19:43:43,
completions.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",614,615,Alessandro Arzilli,611e16c,0,2025-02-09 16:06:07,2025-01-27 14:43:43
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",655,655,,,0,2020-04-03 19:43:43,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",650,654,,,0,2020-06-29 19:52:14,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",656,656,,,0,2020-06-29 19:52:14,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",640,645,,,0,2020-06-29 19:52:14,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",667,669,,,0,2020-04-03 19:43:43,
completions.go,2d94892,Paul Holzinger,"Custom completion handle multiple shorhand flags together (#1258)  Flag definitions like `-asd` are not handled correctly by the custom completion logic. They should be treated as multiple flags. For details refer to #1257.  Fixes #1257  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",657,666,Unai Martinez-Corral,652c755,0,2021-05-03 16:42:00,2021-02-08 00:08:50
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",649,649,Unai Martinez-Corral,652c755,0,2021-07-01 15:47:10,2021-02-08 00:08:50
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",672,682,,,0,2020-04-03 19:43:43,
completions.go,2c5a0d3,Marc Khouzam,"Extend Go completions and revamp zsh comp (#1070) (#1070)  Replace the current Zsh completion with a Zsh completion solution based on Go completions. This allows to support custom completions (based on Go completions), but also to standardize the behavior of completion across all shells.  Also, add support to Go completions for the bash completion annotations:   BashCompFilenameExt (including Command.MarkFlagFilename() family)                        - still supported by zsh   BashCompSubdirsInDir - now supported by zsh   BashCompOneRequiredFlag (including Command.MarkFlagRequired() family)                        - now supported by zsh and fish  Finally, remove the suggestin of the = form of flag completion. The = form is supported, but it will not be suggested to avoid having duplicated suggestions.",670,671,,,0,2020-06-29 19:52:14,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",693,707,,,0,2020-04-03 19:43:43,
completions.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",575,580,silenceshell,3c8a19e,0,2022-10-04 22:41:30,2021-06-30 21:49:30
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",710,724,,,0,2020-04-03 19:43:43,
completions.go,2d94892,Paul Holzinger,"Custom completion handle multiple shorhand flags together (#1258)  Flag definitions like `-asd` are not handled correctly by the custom completion logic. They should be treated as multiple flags. For details refer to #1257.  Fixes #1257  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",683,692,Unai Martinez-Corral,652c755,0,2021-05-03 16:42:00,2021-02-08 00:08:50
completions.go,8607918,Gustavo Bazan,"feat: make InitDefaultCompletionCmd public (#1467)  * feat: make InitDefaultCompletionCmd public  * PR comments  * Update man_docs_test.go  * Update README.md",725,725,cui fliter,81d27c8,0,2022-10-10 23:06:30,2022-03-14 11:05:53
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",726,729,Unai Martinez-Corral,652c755,0,2021-02-15 17:47:01,2021-02-08 00:08:50
completions.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",730,731,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions.go,5d46ac9,Paul Holzinger,"custom comp: do not complete flags after args when interspersed is false (#1308)  If the interspersed option is set false and one arg is already set all following arguments are counted as arg and not parsed as flags. Because of that we should not offer flag completion. The same applies to arguments followed after `--`.  Signed-off-by: Paul Holzinger <paul.holzinger@web.de>",708,709,Unai Martinez-Corral,652c755,0,2021-07-01 15:47:10,2021-02-08 00:08:50
completions.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",574,574,Unai Martinez-Corral,652c755,0,2025-01-27 14:43:43,2021-02-08 00:08:50
completions.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",744,753,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions.go,6f84ef4,Marc Khouzam,"Provide option to hide default 'completion' cmd (#1541)  Fixes #1507  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",762,762,Unai Martinez-Corral,652c755,0,2021-12-07 23:02:02,2021-02-08 00:08:50
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",764,766,,,0,2021-02-15 17:47:01,
completions.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",767,782,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",732,743,,,0,2021-02-15 17:47:01,
completions.go,c3573e2,Frank Chiarulli Jr,"Completion: Capitalize short desc, and remove extra space from long (#1455)",756,757,Unai Martinez-Corral,652c755,0,2021-12-07 22:52:50,2021-02-08 00:08:50
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",758,761,,,0,2021-02-15 17:47:01,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",754,755,,,0,2021-02-15 17:47:01,
completions.go,c3573e2,Frank Chiarulli Jr,"Completion: Capitalize short desc, and remove extra space from long (#1455)",785,785,Unai Martinez-Corral,652c755,0,2021-12-07 22:52:50,2021-02-08 00:08:50
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",783,784,,,0,2021-02-15 17:47:01,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",790,794,,,0,2021-02-15 17:47:01,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",786,788,,,0,2021-02-15 17:47:01,
completions.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",763,763,Carlos Alexandro Becker,dd40ab0,0,2022-10-10 20:59:11,2021-12-07 22:51:48
completions.go,c3573e2,Frank Chiarulli Jr,"Completion: Capitalize short desc, and remove extra space from long (#1455)",789,789,Unai Martinez-Corral,652c755,0,2021-12-07 22:52:50,2021-02-08 00:08:50
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",797,798,,,0,2021-02-15 17:47:01,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",807,808,,,0,2021-02-15 17:47:01,
completions.go,dd40ab0,Carlos Alexandro Becker,feat: improve completions help formatting (#1444)  Signed-off-by: Carlos A Becker <caarlos0@gmail.com>,795,796,Unai Martinez-Corral,652c755,0,2021-12-07 22:51:48,2021-02-08 00:08:50
completions.go,dd40ab0,Carlos Alexandro Becker,feat: improve completions help formatting (#1444)  Signed-off-by: Carlos A Becker <caarlos0@gmail.com>,799,805,Unai Martinez-Corral,652c755,0,2021-12-07 22:51:48,2021-02-08 00:08:50
completions.go,87ea180,xuwu,Modify brew prefix path in macOS system (#1719),806,806,Unai Martinez-Corral,652c755,0,2022-06-13 02:22:49,2021-02-08 00:08:50
completions.go,c3573e2,Frank Chiarulli Jr,"Completion: Capitalize short desc, and remove extra space from long (#1455)",824,824,,,0,2021-12-07 22:52:50,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",810,813,,,0,2021-02-15 17:47:01,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",815,816,,,0,2021-02-15 17:47:01,
completions.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",817,819,,,0,2021-06-30 21:24:58,
completions.go,ee75a2b,meyermarcel,Remove trailing spaces from bash completion command description (#1520),809,809,,,0,2021-12-07 23:01:22,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",825,828,,,0,2021-02-15 17:47:01,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",820,823,,,0,2021-02-15 17:47:01,
completions.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",814,814,,,0,2021-06-30 21:24:58,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",830,830,,,0,2021-02-15 17:47:01,
completions.go,8cc7be2,Ondrej Sika,feat: Add how to load completions in your current zsh session (#1608),834,834,,,0,2022-03-17 21:55:16,
completions.go,dd40ab0,Carlos Alexandro Becker,feat: improve completions help formatting (#1444)  Signed-off-by: Carlos A Becker <caarlos0@gmail.com>,829,829,,,0,2021-12-07 22:51:48,
completions.go,45360a5,Marc Khouzam,"Allow sourcing zsh completion script (#1917)  Although it is not the recommended approach, sourcing a completion script is the simplest way to get people to try using shell completion. Not allowing it for zsh has turned out to complicate shell completion adoption.  Further, many tools modify the zsh script to allow sourcing.  This commit allows sourcing of the zsh completion script.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",833,833,Unai Martinez-Corral,652c755,0,2023-03-22 22:41:05,2021-02-08 00:08:50
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",835,835,,,0,2021-02-15 17:47:01,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",864,865,,,0,2021-02-15 17:47:01,
completions.go,dd40ab0,Carlos Alexandro Becker,feat: improve completions help formatting (#1444)  Signed-off-by: Carlos A Becker <caarlos0@gmail.com>,836,842,,,0,2021-12-07 22:51:48,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",868,869,,,0,2021-02-15 17:47:01,
completions.go,dd40ab0,Carlos Alexandro Becker,feat: improve completions help formatting (#1444)  Signed-off-by: Carlos A Becker <caarlos0@gmail.com>,866,867,,,0,2021-12-07 22:51:48,
completions.go,c3573e2,Frank Chiarulli Jr,"Completion: Capitalize short desc, and remove extra space from long (#1455)",863,863,,,0,2021-12-07 22:52:50,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",844,862,,,0,2021-02-15 17:47:01,
completions.go,8cc7be2,Ondrej Sika,feat: Add how to load completions in your current zsh session (#1608),831,832,,,0,2022-03-17 21:55:16,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",872,887,,,0,2021-02-15 17:47:01,
completions.go,87ea180,xuwu,Modify brew prefix path in macOS system (#1719),843,843,,,0,2022-06-13 02:22:49,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",889,890,,,0,2021-02-15 17:47:01,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",914,946,,,0,2020-04-03 19:43:43,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",948,952,,,0,2020-04-03 19:43:43,
completions.go,dd40ab0,Carlos Alexandro Becker,feat: improve completions help formatting (#1444)  Signed-off-by: Carlos A Becker <caarlos0@gmail.com>,870,871,,,0,2021-12-07 22:51:48,
completions.go,c3573e2,Frank Chiarulli Jr,"Completion: Capitalize short desc, and remove extra space from long (#1455)",888,888,,,0,2021-12-07 22:52:50,
completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,947,947,,,1,2021-02-08 00:08:50,
completions.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",893,913,,,0,2021-02-15 17:47:01,
completions.go,dd40ab0,Carlos Alexandro Becker,feat: improve completions help formatting (#1444)  Signed-off-by: Carlos A Becker <caarlos0@gmail.com>,891,892,,,0,2021-12-07 22:51:48,
completions.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,953,953,,,1,2021-02-08 00:08:50,
completions.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",954,974,,,0,2020-04-03 19:43:43,
completions.go,e63925d,Ville Skyttä,"Add env variable to suppress completion descriptions on create (#1938)  COBRA_COMPLETION_DESCRIPTIONS=0  or  <PROGRAM>_COMPLETION_DESCRIPTIONS=0 can now be used to disable shell completion descriptions.",975,1005,,,0,2023-12-17 18:50:59,
command_test.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),2,14,Yuval Goldberg,d689184,0,2022-09-16 11:55:56,2022-09-11 12:25:22
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,18,18,,,1,2016-10-10 14:56:48,
command_test.go,0da0687,Alexandr Burdiyan,Add support for context.Context,19,19,Bruce Downs,51f06c7,0,2020-02-20 06:29:50,2019-08-01 20:25:21
command_test.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Brian Pursley,ad6db7f,0,2023-03-06 02:28:31,2022-11-15 02:46:57
command_test.go,bd914e5,Pedro Mota,"fix: remove deprecated io/ioutils package (#2120)  ioutils.ReadAll is deprecated since Go 1.16. This commit replaces it with io.ReadAll. See https://pkg.go.dev/io/ioutil\#ReadAll for reference  Issue #2119",21,21,Nir Soffer,a73b9c3,1,2024-03-12 10:42:46,2023-12-18 00:58:57
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,20,20,,,1,2016-10-10 14:56:48,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,15,17,,,1,2015-03-13 02:36:49,
command_test.go,dc6e9ec,Mark Bates,added a flag to disable flags,22,22,,,0,2016-06-04 00:25:52,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,23,23,,,1,2015-03-13 02:36:49,
command_test.go,ea3c5be,Albert Nigmatzianov,Add TestHelpFlagInHelp,24,24,,,0,2017-04-26 19:24:14,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,28,29,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,30,36,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,f58a8d6,Albert Nigmatzianov,Add TestSortedFlags,26,27,,,0,2017-04-20 13:38:50,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,25,25,,,1,2015-03-13 02:36:49,
command_test.go,f628835,Kanji Yomoda,Replace deprecated SetOutput func with SetOut and SetErr in test (#1053),39,40,Joshua Harshman,6607e6b,0,2020-04-01 16:25:22,2020-03-27 20:38:32
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,48,49,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,70,73,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,6d00909,Lukas Malkmus,Pass context to completion (#1265),59,69,Alessio Treglia,40d34bc,0,2021-05-03 16:33:57,2020-10-01 15:28:00
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,52,58,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,0da0687,Alexandr Burdiyan,Add support for context.Context,37,38,Thomas Cyron,7b2c5ac,0,2020-02-20 06:29:50,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,74,85,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,88,107,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,86,87,Alessio Treglia,40d34bc,1,2021-02-08 00:08:50,2020-10-01 15:28:00
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,135,172,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,108,109,Alessio Treglia,40d34bc,1,2021-02-08 00:08:50,2020-10-01 15:28:00
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,110,132,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,0da0687,Alexandr Burdiyan,Add support for context.Context,41,47,Albert Nigmatzianov,65c8acb,0,2020-02-20 06:29:50,2017-11-09 06:56:43
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,174,176,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,f628835,Kanji Yomoda,Replace deprecated SetOutput func with SetOut and SetErr in test (#1053),50,51,Albert Nigmatzianov,65c8acb,0,2020-04-01 16:25:22,2017-11-09 06:56:43
command_test.go,6d00909,Lukas Malkmus,Pass context to completion (#1265),206,234,Unai Martinez-Corral,652c755,0,2021-05-03 16:33:57,2021-02-08 00:08:50
command_test.go,0da0687,Alexandr Burdiyan,Add support for context.Context,177,205,Bruce Downs,51f06c7,0,2020-02-20 06:29:50,2019-08-01 20:25:21
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,262,299,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,302,326,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,173,173,Bruce Downs,51f06c7,1,2021-02-08 00:08:50,2019-08-01 20:25:21
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,329,330,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,332,361,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,364,365,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,0da0687,Alexandr Burdiyan,Add support for context.Context,235,261,Thomas Cyron,7b2c5ac,0,2020-02-20 06:29:50,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,133,134,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,367,368,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,300,301,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,a73b9c3,Nir Soffer,"Fix help text for runnable plugin command  When creating a plugin without sub commands, the help text included the command name (kubectl-plugin) instead of the display name (kubectl plugin):      Usage:       kubectl-plugin [flags]  The issue is that the usage line for this case does not use the command path but the raw `Use` string, and this case was not tested.  Add a test for this case and fix UsageLine() to replace the command name with the display name.  Tested using https://github.com/nirs/kubernetes/tree/sample-cli-plugin-help",373,373,Nir Soffer,df547f5,1,2023-12-18 00:58:57,2023-12-18 00:58:57
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,362,363,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",369,372,vkhoroz,4cafa37,1,2023-11-02 12:15:26,2023-10-22 00:36:12
command_test.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",374,376,Ville Skyttä,6b5f577,1,2024-10-12 16:08:27,2024-04-01 12:42:08
command_test.go,a73b9c3,Nir Soffer,"Fix help text for runnable plugin command  When creating a plugin without sub commands, the help text included the command name (kubectl-plugin) instead of the display name (kubectl plugin):      Usage:       kubectl-plugin [flags]  The issue is that the usage line for this case does not use the command path but the raw `Use` string, and this case was not tested.  Add a test for this case and fix UsageLine() to replace the command name with the display name.  Tested using https://github.com/nirs/kubernetes/tree/sample-cli-plugin-help",394,394,Nir Soffer,df547f5,1,2023-12-18 00:58:57,2023-12-18 00:58:57
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,327,328,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",390,390,Ville Skyttä,6b5f577,1,2024-10-12 16:08:27,2024-04-01 12:42:08
command_test.go,a73b9c3,Nir Soffer,"Fix help text for runnable plugin command  When creating a plugin without sub commands, the help text included the command name (kubectl-plugin) instead of the display name (kubectl plugin):      Usage:       kubectl-plugin [flags]  The issue is that the usage line for this case does not use the command path but the raw `Use` string, and this case was not tested.  Add a test for this case and fix UsageLine() to replace the command name with the display name.  Tested using https://github.com/nirs/kubernetes/tree/sample-cli-plugin-help",391,392,Nir Soffer,df547f5,1,2023-12-18 00:58:57,2023-12-18 00:58:57
command_test.go,01ffff4,ZhuHaiCheng,chore: fix function name in comment (#2216)  Signed-off-by: zhuhaicity <zhuhai@52it.net>,393,393,Sebastiaan van Stijn,d1e9d85,1,2025-01-12 12:49:28,2024-12-28 22:07:03
command_test.go,a73b9c3,Nir Soffer,"Fix help text for runnable plugin command  When creating a plugin without sub commands, the help text included the command name (kubectl-plugin) instead of the display name (kubectl plugin):      Usage:       kubectl-plugin [flags]  The issue is that the usage line for this case does not use the command path but the raw `Use` string, and this case was not tested.  Add a test for this case and fix UsageLine() to replace the command name with the display name.  Tested using https://github.com/nirs/kubernetes/tree/sample-cli-plugin-help",377,389,Nir Soffer,df547f5,1,2023-12-18 00:58:57,2023-12-18 00:58:57
command_test.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",414,414,Ville Skyttä,6b5f577,1,2024-10-12 16:08:27,2024-04-01 12:42:08
command_test.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",396,398,Ville Skyttä,6b5f577,1,2024-10-12 16:08:27,2024-04-01 12:42:08
command_test.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",399,412,vkhoroz,4cafa37,1,2023-11-02 12:15:26,2023-10-22 00:36:12
command_test.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",395,395,vkhoroz,4cafa37,1,2023-11-02 12:15:26,2023-10-22 00:36:12
command_test.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",331,331,Thomas Cyron,7b2c5ac,0,2022-09-11 12:25:22,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,434,456,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",366,366,Thomas Cyron,7b2c5ac,0,2022-09-11 12:25:22,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,459,485,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,488,505,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,fd865a4,Jun Nishimura,minor corrections to unit tests (#2003),506,506,Unai Martinez-Corral,9e6b58a,0,2023-07-23 11:31:55,2023-03-06 02:28:31
command_test.go,df547f5,Nir Soffer,"Fix help text for plugins  When using `CommandDisplayNameAnnotation` we want to use it instead of the command name in `--help` message or in the default help command.  With current code we get the wrong text in the --help usage text:      Flags:       -h, --help   help for kubectl-plugin  And in the long description of the default help command:      $ kubectl cobraplugin help -h     Help provides help for any command in the application.     Simply type kubectl-plugin help [path to command] for full details.  The issue was hidden since the test checked only the Usage line.  Fixed by extracting a displayName() function and use it when creating FlagSet and when formatting the default help flag usage and the help command long description.  Enhance the TestPlugin to check all the lines including the command name.",423,431,Alessio Treglia,40d34bc,1,2023-12-18 00:58:57,2020-10-01 15:28:00
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,507,522,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",416,422,Alessio Treglia,40d34bc,1,2023-11-02 12:15:26,2020-10-01 15:28:00
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,525,542,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,544,556,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,486,487,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,559,571,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,457,458,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,523,524,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,573,596,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,597,597,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,df547f5,Nir Soffer,"Fix help text for plugins  When using `CommandDisplayNameAnnotation` we want to use it instead of the command name in `--help` message or in the default help command.  With current code we get the wrong text in the --help usage text:      Flags:       -h, --help   help for kubectl-plugin  And in the long description of the default help command:      $ kubectl cobraplugin help -h     Help provides help for any command in the application.     Simply type kubectl-plugin help [path to command] for full details.  The issue was hidden since the test checked only the Usage line.  Fixed by extracting a displayName() function and use it when creating FlagSet and when formatting the default help flag usage and the help command long description.  Enhance the TestPlugin to check all the lines including the command name.",413,413,Thomas Cyron,7b2c5ac,1,2023-12-18 00:58:57,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,598,612,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,613,613,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,614,759,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,557,558,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,762,788,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,760,761,Alessio Treglia,40d34bc,1,2021-02-08 00:08:50,2020-10-01 15:28:00
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,790,810,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",432,433,Thomas Cyron,7b2c5ac,1,2023-11-02 12:15:26,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,844,855,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,df547f5,Nir Soffer,"Fix help text for plugins  When using `CommandDisplayNameAnnotation` we want to use it instead of the command name in `--help` message or in the default help command.  With current code we get the wrong text in the --help usage text:      Flags:       -h, --help   help for kubectl-plugin  And in the long description of the default help command:      $ kubectl cobraplugin help -h     Help provides help for any command in the application.     Simply type kubectl-plugin help [path to command] for full details.  The issue was hidden since the test checked only the Usage line.  Fixed by extracting a displayName() function and use it when creating FlagSet and when formatting the default help flag usage and the help command long description.  Enhance the TestPlugin to check all the lines including the command name.",415,415,Thomas Cyron,7b2c5ac,1,2023-12-18 00:58:57,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,812,841,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,857,857,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,842,843,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,859,860,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,19e54c4,Nick Miyake,"Update error message for missing required flags (#580)  Make it so that first letter is not capitalized and rephrase to remove ""have/has"".",861,861,Thomas Cyron,7b2c5ac,1,2017-11-19 09:22:51,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,862,873,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,22b6179,Brian Pursley,"fix: show flags that shadow parent persistent flag in child help (#1776)  This fixes a bug where a child flag that shadows (has the same name as) a parent persistent flag would not be shown in the child command's help output and the parent flag would be shown instead under the global flags section.  This change makes the help output consistent with the observed behavior during execution, where the child flag is the one that is actually used.",789,789,Thomas Cyron,7b2c5ac,1,2022-08-28 16:46:39,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,858,858,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,856,856,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,22b6179,Brian Pursley,"fix: show flags that shadow parent persistent flag in child help (#1776)  This fixes a bug where a child flag that shadows (has the same name as) a parent persistent flag would not be shown in the child command's help output and the parent flag would be shown instead under the global flags section.  This change makes the help output consistent with the observed behavior during execution, where the child flag is the one that is actually used.",811,811,Albert Nigmatzianov,d6a4305,1,2022-08-28 16:46:39,2017-11-09 06:56:43
command_test.go,fd865a4,Jun Nishimura,minor corrections to unit tests (#2003),572,572,Thomas Cyron,7b2c5ac,0,2023-07-23 11:31:55,2017-10-12 18:25:33
command_test.go,fd865a4,Jun Nishimura,minor corrections to unit tests (#2003),543,543,Thomas Cyron,7b2c5ac,0,2023-07-23 11:31:55,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,875,875,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,882,882,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,877,880,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,884,887,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,889,895,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,19e54c4,Nick Miyake,"Update error message for missing required flags (#580)  Make it so that first letter is not capitalized and rephrase to remove ""have/has"".",888,888,Thomas Cyron,7b2c5ac,1,2017-11-19 09:22:51,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,927,949,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,881,881,Albert Nigmatzianov,65c8acb,1,2021-02-08 00:08:50,2017-11-09 06:56:43
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,876,876,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,950,950,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,951,962,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,874,874,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,963,963,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,5155946,Marc Khouzam,"Ignore required flags when DisableFlagParsing (#1095)  When a command request to DisableFlagParsing, it should not fail due to a missing required flag.  In fact, such a check will always fail since flags weren't parsed!  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",896,902,Albert Nigmatzianov,65c8acb,0,2020-05-08 01:18:16,2017-11-09 06:56:43
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,964,965,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,883,883,Albert Nigmatzianov,65c8acb,1,2021-02-08 00:08:50,2017-11-09 06:56:43
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,998,1020,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1021,1049,ZhuHaiCheng,01ffff4,0,2025-01-27 14:43:43,2025-01-12 12:49:28
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,903,903,Albert Nigmatzianov,65c8acb,1,2021-02-08 00:08:50,2017-11-09 06:56:43
command_test.go,5155946,Marc Khouzam,"Ignore required flags when DisableFlagParsing (#1095)  When a command request to DisableFlagParsing, it should not fail due to a missing required flag.  In fact, such a check will always fail since flags weren't parsed!  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",904,926,Albert Nigmatzianov,65c8acb,0,2020-05-08 01:18:16,2017-11-09 06:56:43
command_test.go,ab5cadc,Marc Khouzam,"Allow to reset the templates to the default (#2229)  Follow-up to #1956.  This commit allows a program to reset any of the tree templates to their default behaviour, as it was possible to do before the change of #1956.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",1050,1061,Alessandro Arzilli,611e16c,0,2025-02-06 15:25:44,2025-01-27 14:43:43
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1064,1071,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1072,1072,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1086,1092,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1085,1085,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1073,1084,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1093,1093,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1098,1098,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1097,1097,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1094,1094,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,22b6179,Brian Pursley,"fix: show flags that shadow parent persistent flag in child help (#1776)  This fixes a bug where a child flag that shadows (has the same name as) a parent persistent flag would not be shown in the child command's help output and the parent flag would be shown instead under the global flags section.  This change makes the help output consistent with the observed behavior during execution, where the child flag is the one that is actually used.",966,997,Dave Henderson,95f2f73,1,2022-08-28 16:46:39,2020-02-28 18:13:40
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1099,1099,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1101,1102,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1095,1096,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1103,1103,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1104,1112,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1113,1113,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1100,1100,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1114,1121,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1128,1128,,,0,2015-09-08 23:01:13,
command_test.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1125,1125,,,0,2015-09-08 23:01:13,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1124,1124,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1129,1153,ZhuHaiCheng,01ffff4,0,2025-01-27 14:43:43,2025-01-12 12:49:28
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1127,1127,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1126,1126,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,ab5cadc,Marc Khouzam,"Allow to reset the templates to the default (#2229)  Follow-up to #1956.  This commit allows a program to reset any of the tree templates to their default behaviour, as it was possible to do before the change of #1956.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",1154,1165,Alessandro Arzilli,611e16c,0,2025-02-06 15:25:44,2025-01-27 14:43:43
command_test.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1243,1254,Thomas Cyron,7b2c5ac,0,2017-12-01 21:37:16,2017-10-12 18:25:33
command_test.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1166,1167,Ville Skyttä,6b5f577,0,2025-01-27 14:43:43,2024-04-01 12:42:08
command_test.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1168,1178,Thomas Cyron,7b2c5ac,0,2017-12-01 21:37:16,2017-10-12 18:25:33
command_test.go,6607e6b,Joshua Harshman,"Partial Revert of #922 (#1068)  Issue Reference: https://github.com/spf13/cobra/issues/1056  https://github.com/spf13/cobra/pull/922 introduced a new error type that emitted when a command was not runnable. This caused all commands w/o a run function set to error w/ that message and a status code of 1.  This change reverts the addition of that new error. Similar functionality can be accomplished by leveraging RunE.",1122,1123,Thomas Cyron,7b2c5ac,1,2020-03-27 20:38:32,2017-10-12 18:25:33
command_test.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1300,1300,Thomas Cyron,7b2c5ac,0,2017-12-01 21:37:16,2017-10-12 18:25:33
command_test.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1179,1196,Jun Nishimura,fd865a4,1,2024-10-12 16:08:27,2023-07-23 11:31:55
command_test.go,95f2f73,Dave Henderson,Add short version flag -v when not otherwise set (#996)  Signed-off-by: Dave Henderson <dhenderson@gmail.com>,1197,1242,Albert Nigmatzianov,65c8acb,0,2020-02-28 18:13:40,2017-11-09 06:56:43
command_test.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1302,1311,Thomas Cyron,7b2c5ac,0,2017-12-01 21:37:16,2017-10-12 18:25:33
command_test.go,95f2f73,Dave Henderson,Add short version flag -v when not otherwise set (#996)  Signed-off-by: Dave Henderson <dhenderson@gmail.com>,1255,1266,Thomas Cyron,7b2c5ac,0,2020-02-28 18:13:40,2017-10-12 18:25:33
command_test.go,95f2f73,Dave Henderson,Add short version flag -v when not otherwise set (#996)  Signed-off-by: Dave Henderson <dhenderson@gmail.com>,1336,1347,Rajat Jindal,4dab30c,0,2020-02-28 18:13:40,2018-03-31 12:36:20
command_test.go,ccaecb1,Nick Miyake,"Ensure that '--version' flag works properly for root command (#595)  Make it so that, in the case that the root command is not runnable but has subcommands, specifying a '--version' flag will still run the ""version"" behavior.",1301,1301,Thomas Cyron,7b2c5ac,0,2017-12-07 07:49:35,2017-10-12 18:25:33
command_test.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1324,1335,Thomas Cyron,7b2c5ac,0,2017-12-01 21:37:16,2017-10-12 18:25:33
command_test.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1348,1357,Thomas Cyron,7b2c5ac,0,2017-12-01 21:37:16,2017-10-12 18:25:33
command_test.go,95f2f73,Dave Henderson,Add short version flag -v when not otherwise set (#996)  Signed-off-by: Dave Henderson <dhenderson@gmail.com>,1312,1323,Thomas Cyron,7b2c5ac,0,2020-02-28 18:13:40,2017-10-12 18:25:33
command_test.go,95f2f73,Dave Henderson,Add short version flag -v when not otherwise set (#996)  Signed-off-by: Dave Henderson <dhenderson@gmail.com>,1358,1390,Rajat Jindal,4dab30c,0,2020-02-28 18:13:40,2018-03-31 12:36:20
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1396,1398,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1395,1395,,,0,2015-09-08 23:01:13,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1391,1394,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1431,1477,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1402,1427,Thomas Cyron,7b2c5ac,0,2017-11-09 06:56:43,2017-10-12 18:25:33
command_test.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1399,1401,,,0,2015-09-08 23:01:13,
command_test.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1428,1430,,,0,2015-09-08 23:01:13,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1585,1641,,,0,2017-11-09 06:56:43,
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1642,1642,,,0,2017-11-09 06:56:43,
command_test.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1062,1063,Albert Nigmatzianov,65c8acb,0,2025-01-27 14:43:43,2017-11-09 06:56:43
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1643,1657,,,0,2017-11-09 06:56:43,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1658,1658,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1662,1663,,,0,2017-11-09 06:56:43,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1661,1661,,,1,2015-03-13 02:36:49,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1664,1664,,,1,2015-03-13 02:36:49,
command_test.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",1478,1584,Lukas Malkmus,6d00909,0,2022-09-11 12:25:22,2021-05-03 16:33:57
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1659,1660,,,0,2017-11-09 06:56:43,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1667,1667,,,1,2015-03-13 02:36:49,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1670,1670,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1671,1680,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1668,1669,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1665,1666,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1694,1697,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1708,1708,,,0,2017-11-09 06:56:43,
command_test.go,0c72800,Souma,Customizable error message prefix (#2023),1267,1299,Thomas Cyron,7b2c5ac,1,2023-09-08 17:29:06,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1729,1732,,,0,2017-11-09 06:56:43,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1734,1734,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1735,1735,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1738,1738,,,0,2017-11-09 06:56:43,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1737,1737,,,1,2015-03-13 02:36:49,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1740,1740,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1741,1741,,,0,2017-11-09 06:56:43,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1709,1728,Albert Nigmatzianov,65c8acb,0,2023-10-22 00:36:12,2017-11-09 06:56:43
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1733,1733,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1743,1743,,,1,2015-03-13 02:36:49,
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1681,1693,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1744,1744,,,0,2017-11-09 06:56:43,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1698,1707,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1736,1736,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1746,1746,,,1,2015-03-13 02:36:49,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1753,1753,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1754,1754,,,0,2017-11-09 06:56:43,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1739,1739,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,93278e2,Brendan Burns,Add mergePersistentFlags in strip flags since we now look at the flag set.,1756,1756,,,0,2015-03-16 23:15:32,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1747,1751,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1757,1757,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1759,1760,,,0,2017-11-09 06:56:43,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1752,1752,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1762,1763,,,0,2017-11-09 06:56:43,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1745,1745,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,93278e2,Brendan Burns,Add mergePersistentFlags in strip flags since we now look at the flag set.,1765,1765,,,0,2015-03-16 23:15:32,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1742,1742,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1766,1766,,,1,2015-03-13 02:36:49,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1768,1768,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1767,1767,,,0,2017-11-09 06:56:43,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1764,1764,Brian Pursley,22b6179,0,2023-10-22 00:36:12,2022-08-28 16:46:39
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1769,1776,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1785,1786,,,0,2017-11-09 06:56:43,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1787,1787,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1788,1792,,,0,2017-11-09 06:56:43,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1755,1755,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1794,1804,,,0,2017-11-09 06:56:43,
command_test.go,dc6e9ec,Mark Bates,added a flag to disable flags,1807,1807,,,0,2016-06-04 00:25:52,
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1793,1793,,,1,2015-03-13 02:36:49,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1758,1758,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1784,1784,Thomas Cyron,7b2c5ac,1,2021-02-08 00:08:50,2017-10-12 18:25:33
command_test.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,1805,1806,,,1,2015-03-13 02:36:49,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1808,1811,,,0,2017-11-09 06:56:43,
command_test.go,dc6e9ec,Mark Bates,added a flag to disable flags,1812,1812,,,0,2016-06-04 00:25:52,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1827,1846,,,0,2017-11-09 06:56:43,
command_test.go,dc6e9ec,Mark Bates,added a flag to disable flags,1847,1848,,,0,2016-06-04 00:25:52,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1813,1825,,,0,2017-11-09 06:56:43,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1849,1849,,,0,2016-06-15 14:27:34,
command_test.go,dc6e9ec,Mark Bates,added a flag to disable flags,1826,1826,,,0,2016-06-04 00:25:52,
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1877,1877,,,0,2017-11-09 06:56:43,
command_test.go,7faa7fc,Daniel Nephin,Merge persistent flags before checking for a help flag.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,1872,1872,,,0,2016-06-20 18:58:44,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1873,1876,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1850,1871,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1878,1909,,,0,2017-11-09 06:56:43,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1920,1920,,,0,2016-06-15 14:27:34,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1919,1919,,,0,2017-11-09 06:56:43,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1913,1918,,,0,2016-06-15 14:27:34,
command_test.go,d1371ec,Chris Broadfoot,"gofmt, govet, run those in Travis, add 1.7",1921,1921,,,0,2016-08-23 20:30:43,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1923,1924,,,0,2016-06-15 14:27:34,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1922,1922,,,0,2017-11-09 06:56:43,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1929,1931,,,0,2016-06-15 14:27:34,
command_test.go,7faa7fc,Daniel Nephin,Merge persistent flags before checking for a help flag.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,1910,1912,,,0,2016-06-20 18:58:44,
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1761,1761,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1925,1928,,,0,2017-11-09 06:56:43,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1933,1939,,,0,2016-06-15 14:27:34,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1940,1940,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1943,1943,,,0,2017-11-09 06:56:43,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1941,1941,,,0,2016-06-15 14:27:34,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1944,1945,,,0,2016-06-15 14:27:34,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,1946,1949,,,0,2017-11-09 06:56:43,
command_test.go,d1371ec,Chris Broadfoot,"gofmt, govet, run those in Travis, add 1.7",1942,1942,,,0,2016-08-23 20:30:43,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1950,1952,,,0,2016-06-15 14:27:34,
command_test.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1954,1954,,,0,2016-06-15 14:27:34,
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,1955,1955,,,1,2016-10-10 14:56:48,
command_test.go,7aeaa2c,Tamir Duberstein,"Avoid storing pointer to nil (#411)  * Fix shellcheck  Before this change:  	In - line 204: 	    declare -F $next_command >/dev/null && $next_command 	               ^-- SC2086: Double quote to prevent globbing and word splitting.  	--- FAIL: TestBashCompletions (0.34s) 		bash_completions_test.go:138: shellcheck failed: exit status 1  * Avoid storing pointer to nil  Before this change, the new test fails with:  	--- FAIL: TestSetOutput (0.00s) 		command_test.go:198: expected setting output to nil to revert back to stdout, got <nil>",2129,2129,,,1,2017-04-02 14:14:34,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2130,2133,,,0,2017-11-09 06:56:43,
command_test.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1956,2050,Joshua Carpeggiani,f848943,0,2022-10-10 20:59:11,2022-03-18 10:01:58
command_test.go,7aeaa2c,Tamir Duberstein,"Avoid storing pointer to nil (#411)  * Fix shellcheck  Before this change:  	In - line 204: 	    declare -F $next_command >/dev/null && $next_command 	               ^-- SC2086: Double quote to prevent globbing and word splitting.  	--- FAIL: TestBashCompletions (0.34s) 		bash_completions_test.go:138: shellcheck failed: exit status 1  * Avoid storing pointer to nil  Before this change, the new test fails with:  	--- FAIL: TestSetOutput (0.00s) 		command_test.go:198: expected setting output to nil to revert back to stdout, got <nil>",2134,2136,,,1,2017-04-02 14:14:34,
command_test.go,10cf7be,Marc Khouzam,"Check for group presence after full initialization (#1839)  Fixes #1831  By moving the check for help group existence to ""ExecuteC()"" we no longer need groups to be added before AddCommand() is called.  This provides more flexibility to developers and works better with the use of ""init()"" for command creation.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",2051,2128,Joshua Carpeggiani,f848943,0,2022-10-24 15:11:57,2022-03-18 10:01:58
command_test.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1777,1783,Thomas Cyron,7b2c5ac,0,2023-10-22 00:36:12,2017-10-12 18:25:33
command_test.go,e35034f,Alessio Treglia,Add tests,2137,2160,,,0,2019-06-07 14:48:23,
command_test.go,f2b07da,Juan Leni,fixing linter issues,2168,2168,,,0,2019-06-07 14:48:23,
command_test.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",1932,1932,Thomas Cyron,7b2c5ac,0,2022-09-11 12:25:22,2017-10-12 18:25:33
command_test.go,b635726,Juan Leni,considering stderr in UsageString,2161,2167,,,0,2019-06-07 14:48:23,
command_test.go,b635726,Juan Leni,considering stderr in UsageString,2169,2171,,,0,2019-06-07 14:48:23,
command_test.go,f2b07da,Juan Leni,fixing linter issues,2172,2172,,,0,2019-06-07 14:48:23,
command_test.go,b635726,Juan Leni,considering stderr in UsageString,2173,2176,,,0,2019-06-07 14:48:23,
command_test.go,40d34bc,Alessio Treglia,"Fix stderr printing functions (#894)  * Fix stderr printing functions  Follow-up of #822  * Errors go to stderr as per POSIX  * use PrintErrf() instead of extra call to Sprintf()  * Error messages should always be printed to os.Stderr.  * add test case for Print* redirection  Thanks: @bukowa for the patch.",2177,2198,,,1,2020-10-01 15:28:00,
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,2218,2218,,,1,2016-10-10 14:56:48,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2219,2219,,,0,2017-11-09 06:56:43,
command_test.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",1953,1953,Thomas Cyron,7b2c5ac,0,2022-09-11 12:25:22,2017-10-12 18:25:33
command_test.go,40d34bc,Alessio Treglia,"Fix stderr printing functions (#894)  * Fix stderr printing functions  Follow-up of #822  * Errors go to stderr as per POSIX  * use PrintErrf() instead of extra call to Sprintf()  * Error messages should always be printed to os.Stderr.  * add test case for Print* redirection  Thanks: @bukowa for the patch.",2205,2217,,,1,2020-10-01 15:28:00,
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,2220,2220,,,1,2016-10-10 14:56:48,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2221,2222,,,0,2017-11-09 06:56:43,
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,2227,2227,,,1,2016-10-10 14:56:48,
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,2223,2224,,,1,2016-10-10 14:56:48,
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,2232,2233,,,1,2016-10-10 14:56:48,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2226,2226,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2228,2231,,,0,2017-11-09 06:56:43,
command_test.go,40d34bc,Alessio Treglia,"Fix stderr printing functions (#894)  * Fix stderr printing functions  Follow-up of #822  * Errors go to stderr as per POSIX  * use PrintErrf() instead of extra call to Sprintf()  * Error messages should always be printed to os.Stderr.  * add test case for Print* redirection  Thanks: @bukowa for the patch.",2200,2203,,,1,2020-10-01 15:28:00,
command_test.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,2225,2225,,,1,2016-10-10 14:56:48,
command_test.go,f58a8d6,Albert Nigmatzianov,Add TestSortedFlags,2234,2234,,,0,2017-04-20 13:38:50,
command_test.go,f58a8d6,Albert Nigmatzianov,Add TestSortedFlags,2267,2268,,,0,2017-04-20 13:38:50,
command_test.go,f58a8d6,Albert Nigmatzianov,Add TestSortedFlags,2270,2270,,,0,2017-04-20 13:38:50,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2271,2272,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2275,2275,,,0,2017-11-09 06:56:43,
command_test.go,f58a8d6,Albert Nigmatzianov,Add TestSortedFlags,2273,2274,,,0,2017-04-20 13:38:50,
command_test.go,f58a8d6,Albert Nigmatzianov,Add TestSortedFlags,2276,2278,,,0,2017-04-20 13:38:50,
command_test.go,7d22e77,Albert Nigmatzianov,Fix incorrect merge of pflag.CommandLine to cmd.Flags()  Fix #443,2269,2269,,,1,2017-05-12 18:22:26,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2283,2283,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2279,2279,,,0,2017-11-09 06:56:43,
command_test.go,f58a8d6,Albert Nigmatzianov,Add TestSortedFlags,2280,2282,,,0,2017-04-20 13:38:50,
command_test.go,f58a8d6,Albert Nigmatzianov,Add TestSortedFlags,2284,2291,,,0,2017-04-20 13:38:50,
command_test.go,7d22e77,Albert Nigmatzianov,Fix incorrect merge of pflag.CommandLine to cmd.Flags()  Fix #443,2305,2305,,,1,2017-05-12 18:22:26,
command_test.go,7d22e77,Albert Nigmatzianov,Fix incorrect merge of pflag.CommandLine to cmd.Flags()  Fix #443,2292,2297,,,1,2017-05-12 18:22:26,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2298,2298,,,0,2017-11-09 06:56:43,
command_test.go,7d22e77,Albert Nigmatzianov,Fix incorrect merge of pflag.CommandLine to cmd.Flags()  Fix #443,2299,2303,,,1,2017-05-12 18:22:26,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2304,2304,,,0,2017-11-09 06:56:43,
command_test.go,99b5d83,Albert Nigmatzianov,Show messages if deprecated flags are used  Fix #463,2306,2310,,,1,2017-06-19 21:05:29,
command_test.go,99b5d83,Albert Nigmatzianov,Show messages if deprecated flags are used  Fix #463,2312,2312,,,1,2017-06-19 21:05:29,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2311,2311,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2315,2316,,,0,2017-11-09 06:56:43,
command_test.go,bd914e5,Pedro Mota,"fix: remove deprecated io/ioutils package (#2120)  ioutils.ReadAll is deprecated since Go 1.16. This commit replaces it with io.ReadAll. See https://pkg.go.dev/io/ioutil\#ReadAll for reference  Issue #2119",2199,2199,Thomas Cyron,7b2c5ac,1,2024-03-12 10:42:46,2017-10-12 18:25:33
command_test.go,99b5d83,Albert Nigmatzianov,Show messages if deprecated flags are used  Fix #463,2314,2314,,,1,2017-06-19 21:05:29,
command_test.go,8c6fa02,Albert Nigmatzianov,Fix InitDefaultHelpCmd when custom help command is set,2317,2318,,,1,2017-06-29 10:52:34,
command_test.go,99b5d83,Albert Nigmatzianov,Show messages if deprecated flags are used  Fix #463,2320,2320,,,1,2017-06-19 21:05:29,
command_test.go,bd914e5,Pedro Mota,"fix: remove deprecated io/ioutils package (#2120)  ioutils.ReadAll is deprecated since Go 1.16. This commit replaces it with io.ReadAll. See https://pkg.go.dev/io/ioutil\#ReadAll for reference  Issue #2119",2204,2204,Thomas Cyron,7b2c5ac,1,2024-03-12 10:42:46,2017-10-12 18:25:33
command_test.go,b9ca594,Paul Holzinger,"use errors.Is() to check for errors (#1730)  Since go 1.13 you can wrap errors. This make it no longer possible to compare with `==`, instead you have to compare with `errors.Is()`.  I noticed this problem because -h was no longer working after I stared wrapping the errors in my custom FlagErrorFunc function. Note that this is only a problem when a custom help flag is defined.  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",2235,2266,,,0,2022-06-21 02:02:33,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2321,2322,,,1,2017-10-07 21:29:11,
command_test.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,2319,2319,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2323,2325,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2326,2326,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2327,2328,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2333,2333,,,1,2017-10-07 21:29:11,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2329,2329,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2334,2334,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2330,2332,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2338,2338,,,1,2017-10-07 21:29:11,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2335,2336,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2337,2337,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2341,2344,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2339,2340,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2345,2346,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2351,2351,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2352,2352,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2347,2347,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2348,2350,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2354,2354,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2353,2353,,,1,2017-10-07 21:29:11,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2355,2356,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2359,2360,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2358,2358,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2357,2357,,,0,2017-11-09 06:56:43,
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,2313,2313,,,1,2021-02-08 00:08:50,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2361,2364,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2371,2371,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2370,2370,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2365,2369,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2372,2372,,,1,2017-10-07 21:29:11,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2376,2377,,,1,2017-10-07 21:29:11,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2379,2382,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2373,2375,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2378,2378,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2386,2387,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2383,2384,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2385,2385,,,1,2017-10-07 21:29:11,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2388,2389,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2390,2391,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2392,2392,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2393,2393,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2394,2394,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2395,2396,,,0,2017-11-09 06:56:43,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2397,2397,,,1,2017-10-07 21:29:11,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2398,2399,,,0,2017-11-09 06:56:43,
command_test.go,4d6af28,Di Xu,enforce required flags (#502),2402,2402,,,0,2017-10-10 03:44:33,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2404,2404,,,0,2017-11-09 06:56:43,
command_test.go,7b2c5ac,Thomas Cyron,"Create new buffer if not present yet (#549)  Fixes a nil dereference when TraverseChildren is used with multiple subcommands.",2403,2403,,,0,2017-10-12 18:25:33,
command_test.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",2400,2401,,,1,2017-10-07 21:29:11,
command_test.go,7b2c5ac,Thomas Cyron,"Create new buffer if not present yet (#549)  Fixes a nil dereference when TraverseChildren is used with multiple subcommands.",2405,2405,,,0,2017-10-12 18:25:33,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2406,2407,,,0,2017-11-09 06:56:43,
command_test.go,7b2c5ac,Thomas Cyron,"Create new buffer if not present yet (#549)  Fixes a nil dereference when TraverseChildren is used with multiple subcommands.",2408,2408,,,0,2017-10-12 18:25:33,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2409,2409,,,0,2017-11-09 06:56:43,
command_test.go,7b2c5ac,Thomas Cyron,"Create new buffer if not present yet (#549)  Fixes a nil dereference when TraverseChildren is used with multiple subcommands.",2410,2411,,,0,2017-10-12 18:25:33,
command_test.go,7b2c5ac,Thomas Cyron,"Create new buffer if not present yet (#549)  Fixes a nil dereference when TraverseChildren is used with multiple subcommands.",2413,2413,,,0,2017-10-12 18:25:33,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2414,2414,,,0,2017-11-09 06:56:43,
command_test.go,7b2c5ac,Thomas Cyron,"Create new buffer if not present yet (#549)  Fixes a nil dereference when TraverseChildren is used with multiple subcommands.",2415,2415,,,0,2017-10-12 18:25:33,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2412,2412,,,0,2017-11-09 06:56:43,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2416,2416,,,0,2017-11-09 06:56:43,
command_test.go,4d6af28,Di Xu,enforce required flags (#502),2417,2417,,,0,2017-10-10 03:44:33,
command_test.go,65c8acb,Albert Nigmatzianov,Improve tests,2418,2419,,,0,2017-11-09 06:56:43,
command_test.go,4d6af28,Di Xu,enforce required flags (#502),2420,2421,,,0,2017-10-10 03:44:33,
command_test.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",2434,2439,,,1,2018-02-04 16:58:53,
command_test.go,7cd9cc6,Di Xu,add test for c.Name() if c.Use gets changed (#548),2422,2433,,,0,2017-10-12 16:50:22,
command_test.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",2460,2460,,,1,2018-02-04 16:58:53,
command_test.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",2440,2457,,,1,2018-02-04 16:58:53,
command_test.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",2462,2478,,,1,2018-02-04 16:58:53,
command_test.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",2491,2496,,,1,2018-02-04 16:58:53,
command_test.go,4dab30c,Rajat Jindal,Add support for ignoring parse errors (#662),2497,2601,,,0,2018-03-31 12:36:20,
command_test.go,7fead4b,John McBride,Remove/replace SetOutput on Command - deprecated (#1078)  Replace SetOutput on Command - deprecated,2458,2459,,,0,2020-04-06 17:36:04,
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,2479,2490,,,1,2021-02-08 00:08:50,
command_test.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,2461,2461,,,1,2021-02-08 00:08:50,
command_test.go,1995054,Fraser Waters,Flow context to command in SetHelpFunc (#2241)  Fixes https://github.com/spf13/cobra/issues/2240,2924,2954,Marc Khouzam,40b5bc1,0,2025-02-21 12:46:14,2025-02-16 23:42:04
command_test.go,f848943,Joshua Carpeggiani,Add Command.SetContext (#1551)  Increases flexibility in how Contexts can be used with Cobra.,2602,2704,,,0,2022-03-18 10:01:58,
command_test.go,ad6db7f,Brian Pursley,"Create unit test illustrating unknown flag bug (#1854)  Created a unit test that tests the unknown flag error message when the unknown flag is located in different arg positions.",2885,2923,,,1,2022-11-15 02:46:57,
command_test.go,6b0bd30,Brian Pursley,"fix: don't remove flag value that matches subcommand name (#1781)  When the command searches args to find the arg matching a particular subcommand name, it needs to ignore flag values, as it is possible that the value for a flag might match the name of the sub command.  This change improves argsMinusFirstX() to ignore flag values when it searches for the X to exclude from the result.",2792,2880,,,1,2022-11-08 04:12:02,
command_test.go,ad6db7f,Brian Pursley,"Create unit test illustrating unknown flag bug (#1854)  Created a unit test that tests the unknown flag error message when the unknown flag is located in different arg positions.",2881,2883,,,1,2022-11-15 02:46:57,
command_test.go,6b5f577,Ville Skyttä,"More linting (#2099)  * Address gocritic findings, enable it  * Enable gosimple, no new findings to address",2884,2884,,,0,2024-04-01 12:42:08,
command_test.go,7039e1f,Francis Nickels III,Add '--version' flag to Help output (#1707),2705,2791,,,0,2022-09-30 18:26:05,
command.go,62fb674,spf13,Organize the files a bit better,2,5,,,0,2013-09-24 16:47:29,
command.go,6d978a9,Unai Martinez-Corral,add missing license headers (#1809),6,7,Yuval Goldberg,d689184,0,2022-09-16 11:55:56,2022-09-11 12:25:22
command.go,62fb674,spf13,Organize the files a bit better,17,20,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,8,14,,,0,2013-09-24 16:47:29,
command.go,9e6b58a,Unai Martinez-Corral,update copyright year (#1927),1,1,Dominik Roos,b4f979a,0,2023-03-06 02:28:31,2023-01-03 00:58:36
command.go,4061f41,Albert Nigmatzianov,Use pflag.ShorthandLookup,15,16,,,0,2017-05-05 06:08:38,
command.go,0da0687,Alexandr Burdiyan,Add support for context.Context,21,21,,,0,2020-02-20 06:29:50,
command.go,b9ca594,Paul Holzinger,"use errors.Is() to check for errors (#1730)  Since go 1.13 you can wrap errors. This make it no longer possible to compare with `==`, instead you have to compare with `errors.Is()`.  I noticed this problem because -h was no longer working after I stared wrapping the errors in my custom FlagErrorFunc function. Note that this is only a problem when a custom help flag is defined.  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",22,22,Unai Martinez-Corral,ea94a3d,0,2022-06-21 02:02:33,2022-06-21 02:00:50
command.go,62fb674,spf13,Organize the files a bit better,24,24,,,0,2013-09-24 16:47:29,
command.go,40b5bc1,Marc Khouzam,"Revert ""Make detection for test-binary more universal (#2173)"" (#2235)  This reverts commit d1e9d85fcf592461f3bc2f4b6d5e140c4c0aabf8.  Some programs set os.Args in their unit tests and this change would break those tests.  Ref: https://github.com/spf13/cobra/pull/2173#issuecomment-2661544195",26,26,Marc Khouzam,24ada7f,0,2025-02-16 23:42:04,2025-02-15 18:07:02
command.go,62fb674,spf13,Organize the files a bit better,23,23,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,28,28,,,0,2013-09-24 16:47:29,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,25,25,,,0,2013-11-01 22:36:24,
command.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",27,27,,,0,2016-06-15 14:27:34,
command.go,e0f326d,Sam Ghods,Fix root command without subcommands but with arguments  [close #108],29,29,,,1,2015-05-19 14:22:07,
command.go,e0f326d,Sam Ghods,Fix root command without subcommands but with arguments  [close #108],30,30,,,1,2015-05-19 14:22:07,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",36,38,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",33,35,Marc Khouzam,8b1eba4,1,2023-11-02 12:15:26,2023-10-27 10:23:45
command.go,4dab30c,Rajat Jindal,Add support for ignoring parse errors (#662),41,43,,,0,2018-03-31 12:36:20,
command.go,62fb674,spf13,Organize the files a bit better,31,32,,,0,2013-09-24 16:47:29,
command.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",39,39,Marc Khouzam,8b1eba4,1,2023-11-02 12:15:26,2023-10-27 10:23:45
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",45,49,Marc Khouzam,212ea40,0,2022-10-10 20:59:11,2022-10-04 22:41:30
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,51,51,,,1,2017-05-09 09:15:05,
command.go,62fb674,spf13,Organize the files a bit better,50,50,,,0,2013-09-24 16:47:29,
command.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",44,44,Marc Khouzam,212ea40,1,2022-12-25 20:08:39,2022-10-04 22:41:30
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,55,55,,,1,2017-05-09 09:15:05,
command.go,62fb674,spf13,Organize the files a bit better,64,64,,,0,2013-09-24 16:47:29,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,66,66,,,1,2017-05-09 09:15:05,
command.go,62fb674,spf13,Organize the files a bit better,52,54,,,0,2013-09-24 16:47:29,
command.go,8cfa4b4,Michael Muré,Add documentation for Use (#1188),57,63,,,0,2020-08-18 20:14:09,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,65,65,,,0,2017-05-09 09:33:56,
command.go,8816572,Sam Ghods,Replace prefix matching with aliases,67,67,,,0,2014-10-07 19:22:14,
command.go,a83a172,Fabiano Franz,Improve suggestions - add explicit SuggestFor attribute,71,71,,,0,2015-09-25 15:07:38,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,68,68,,,0,2017-05-09 09:33:56,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,73,73,,,1,2017-05-09 09:15:05,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,72,72,,,0,2017-05-09 09:33:56,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,69,70,,,1,2017-05-09 09:15:05,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,75,75,,,0,2017-05-09 09:33:56,
command.go,62fb674,spf13,Organize the files a bit better,74,74,,,0,2013-09-24 16:47:29,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,81,81,,,0,2017-05-09 09:33:56,
command.go,62fb674,spf13,Organize the files a bit better,80,80,,,0,2013-09-24 16:47:29,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,79,79,,,1,2017-05-09 09:15:05,
command.go,bf480fe,Eric Paris,"New ""example"" section of commands  We have a long and short description.  This adds an ""Example"" section. Which can used to create better docs than putting it all in Long.",83,83,,,0,2015-02-17 18:50:52,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,84,84,,,0,2017-05-09 09:33:56,
command.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",85,85,Lukas Malkmus,6d00909,0,2021-06-30 21:24:58,2021-05-03 16:33:57
command.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",86,86,Marc Khouzam,ab5cadc,0,2025-02-09 16:06:07,2025-02-06 15:25:44
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,82,82,,,1,2017-05-09 09:15:05,
command.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",88,89,,,0,2020-04-03 19:43:43,
command.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",40,40,,,0,2022-10-04 22:41:30,
command.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",87,87,namusyaka,7df62f7,0,2021-06-30 21:24:58,2020-12-04 19:34:11
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,91,91,,,0,2017-05-09 09:33:56,
command.go,1723331,Albert Nigmatzianov,Update documentation,92,94,,,0,2017-08-23 07:32:09,
command.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",56,56,,,1,2022-12-25 20:08:39,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,97,97,,,1,2017-05-09 09:15:05,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,95,95,,,1,2017-05-09 09:15:05,
command.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",96,96,,,0,2021-06-30 21:24:58,
command.go,1a0a490,Dr. Stefan Schimanski,Remove plural handling and add aliases for nouns in completion,98,98,,,0,2016-04-02 10:39:19,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,99,99,,,0,2017-05-09 09:33:56,
command.go,9b2e682,Eric Paris,Add bash autocompletion generator  Given a (potentially annotated) cobra command you can generate a bash completion script.,102,102,,,0,2015-04-08 00:13:49,
command.go,b361960,Marc Khouzam,"Bash completion V2 with completion descriptions (#1146)  * Bash completion v2  This v2 version of bash completion is based on Go completions. It also supports descriptions like the other shells.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Only consider matching completions for formatting  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Use bash compV2 for the default completion command  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  * Update comments that still referred to bash completion  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",100,101,,,0,2021-06-30 21:24:58,
command.go,90d2fd8,Albert Nigmatzianov,Group fields of Command,104,104,,,0,2017-05-09 09:25:41,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,103,103,,,0,2017-05-09 09:33:56,
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",76,78,Lukas Malkmus,6d00909,0,2022-10-10 20:59:11,2021-05-03 16:33:57
command.go,c3e48f9,Eric Paris,"Deprecated subcommands  They should still work, but shouldn't show up in help or usage output",105,105,,,0,2015-04-29 17:08:20,
command.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",108,108,Marc Khouzam,8b1eba4,1,2023-11-02 12:15:26,2023-10-27 10:23:45
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,106,106,,,0,2017-05-09 09:33:56,
command.go,99600f6,Daniel Nephin,Add a tags field for user defined tags on a Command. (#359)  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,109,109,,,0,2017-02-07 21:20:48,
command.go,99600f6,Daniel Nephin,Add a tags field for user defined tags on a Command. (#359)  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,107,107,,,0,2017-02-07 21:20:48,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,110,110,,,0,2017-05-09 09:33:56,
command.go,fad5931,Eric Paris,"Add docs, tests, and bit of rearrainging...",117,122,,,0,2015-04-30 18:08:47,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),111,112,,,0,2017-12-01 21:37:16,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),115,116,,,0,2017-12-01 21:37:16,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,123,123,,,1,2017-05-09 09:15:05,
command.go,95f2f73,Dave Henderson,Add short version flag -v when not otherwise set (#996)  Signed-off-by: Dave Henderson <dhenderson@gmail.com>,113,114,,,0,2020-02-28 18:13:40,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,127,127,,,1,2017-05-09 09:15:05,
command.go,fad5931,Eric Paris,"Add docs, tests, and bit of rearrainging...",128,128,,,0,2015-04-30 18:08:47,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,126,126,,,0,2017-05-09 09:33:56,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,129,129,,,1,2017-05-09 09:15:05,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,134,134,,,0,2015-08-31 01:03:16,
command.go,fad5931,Eric Paris,"Add docs, tests, and bit of rearrainging...",131,131,,,0,2015-04-30 18:08:47,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,133,133,,,1,2017-05-09 09:15:05,
command.go,2df6402,Alexander Thaller,added pre and post run hooks.,132,132,,,0,2015-04-30 16:44:01,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,130,130,,,0,2015-08-31 01:03:16,
command.go,fad5931,Eric Paris,"Add docs, tests, and bit of rearrainging...",139,139,,,0,2015-04-30 18:08:47,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,135,135,,,1,2017-05-09 09:15:05,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,138,138,,,0,2015-08-31 01:03:16,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,137,137,,,1,2017-05-09 09:15:05,
command.go,fad5931,Eric Paris,"Add docs, tests, and bit of rearrainging...",136,136,,,0,2015-04-30 18:08:47,
command.go,2df6402,Alexander Thaller,added pre and post run hooks.,140,140,,,0,2015-04-30 16:44:01,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,142,142,,,0,2015-08-31 01:03:16,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,146,146,,,0,2015-08-31 01:03:16,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,143,143,,,1,2017-05-09 09:15:05,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,145,145,,,1,2017-05-09 09:15:05,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,141,141,,,1,2017-05-09 09:15:05,
command.go,fbce60c,Alexander Thaller,added persistent pre/post commands.,144,144,,,0,2015-04-30 16:45:23,
command.go,eceb483,Albert Nigmatzianov,Divide fields of Command for readability,147,147,,,0,2017-05-09 09:33:56,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,151,152,,,1,2017-05-09 09:15:05,
command.go,4fb0a66,Dmytro Milinevskyi,flags: clarify documentation that LocalFlags related function do not modify the state (#2064),160,160,Nir Soffer,a73b9c3,0,2024-01-06 21:49:13,2023-12-18 00:58:57
command.go,90d2fd8,Albert Nigmatzianov,Group fields of Command,153,159,,,0,2017-05-09 09:25:41,
command.go,90d2fd8,Albert Nigmatzianov,Group fields of Command,161,162,,,0,2017-05-09 09:25:41,
command.go,4fb0a66,Dmytro Milinevskyi,flags: clarify documentation that LocalFlags related function do not modify the state (#2064),163,163,Nir Soffer,a73b9c3,0,2024-01-06 21:49:13,2023-12-18 00:58:57
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",174,174,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,90d2fd8,Albert Nigmatzianov,Group fields of Command,164,170,,,0,2017-05-09 09:25:41,
command.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,177,177,,,1,2016-10-10 14:56:48,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,171,173,,,1,2017-05-09 09:15:05,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,175,176,,,1,2017-05-09 09:15:05,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,180,181,,,1,2017-05-09 09:15:05,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,178,178,,,1,2017-05-09 09:15:05,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",179,179,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,90d2fd8,Albert Nigmatzianov,Group fields of Command,182,182,,,0,2017-05-09 09:25:41,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),191,191,,,0,2017-12-01 21:37:16,
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",185,190,Joshua Carpeggiani,f848943,0,2022-10-10 20:59:11,2022-03-18 10:01:58
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",192,192,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",193,193,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",197,202,,,0,2019-06-07 14:48:23,
command.go,4db577d,Albert Nigmatzianov,Fix docs for Command,183,184,,,1,2017-05-09 09:15:05,
command.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,203,203,namusyaka,7df62f7,1,2021-02-08 00:08:50,2020-12-04 19:34:11
command.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,205,206,namusyaka,7df62f7,1,2021-02-08 00:08:50,2020-12-04 19:34:11
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",148,150,,,0,2022-10-10 20:59:11,
command.go,62fb674,spf13,Organize the files a bit better,260,261,,,0,2013-09-24 16:47:29,
command.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",207,209,namusyaka,7df62f7,0,2021-02-15 17:47:01,2020-12-04 19:34:11
command.go,0da0687,Alexandr Burdiyan,Add support for context.Context,269,272,,,0,2020-02-20 06:29:50,
command.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,210,259,namusyaka,7df62f7,1,2021-02-08 00:08:50,2020-12-04 19:34:11
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",279,279,,,1,2017-01-24 16:30:45,
command.go,f848943,Joshua Carpeggiani,Add Command.SetContext (#1551)  Increases flexibility in how Contexts can be used with Cobra.,275,278,,,0,2022-03-18 10:01:58,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,280,284,,,0,2013-11-01 22:36:24,
command.go,3a1795b,Paul Meyer,Fix Command.Context comment (#1639),204,204,namusyaka,7df62f7,1,2022-03-21 17:35:35,2020-12-04 19:34:11
command.go,95d8a1e,Haoming Meng,Add notes to doc on preRun and postRun condition (#2041),124,125,,,0,2023-10-09 12:50:40,
command.go,371ae25,Sebastiaan van Stijn,"Fix deprecation comment for Command.SetOutput (#2172)  Deprecation comments should be at the start of a paragraph [1], and because of that have a whitespace above them [2];  > To signal that an identifier should not be used, add a paragraph to its > doc comment that begins with Deprecated: followed by some information > about the deprecation (...)  With the whitespace missing, some tools, including pkg.go.dev [3] don't detect it to be deprecated.  [1]: https://go.dev/wiki/Deprecated [2]: https://go.dev/doc/comment#paragraphs [3]: https://pkg.go.dev/github.com/spf13/cobra@v1.8.1#Command.SetOutput  Signed-off-by: Sebastiaan van Stijn <github@gone.nl>",287,287,Ville Skyttä,e94f6d0,1,2024-07-16 23:36:29,2024-06-01 10:31:11
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,285,286,,,0,2013-11-01 22:36:24,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,289,289,,,0,2013-11-01 22:36:24,
command.go,6c3c116,ccoVeille,feat: add CompletionFunc type to help with completions (#2220)  Also document that NoFilesCompletion and FixedCompletion can be used with RegisterFlagCompletionFunc.,90,90,Lukas Malkmus,6d00909,0,2025-01-22 01:34:05,2021-05-03 16:33:57
command.go,3a1795b,Paul Meyer,Fix Command.Context comment (#1639),262,268,,,1,2022-03-21 17:35:35,
command.go,cb27ce1,Juan Leni,Deprecate and maintain backwards compatibility,291,291,,,0,2019-06-07 14:48:23,
command.go,cb27ce1,Juan Leni,Deprecate and maintain backwards compatibility,288,288,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",290,290,,,0,2019-06-07 14:48:23,
command.go,0ea93dd,Juan Leni,Fixed linter issues,297,297,,,1,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",292,296,,,0,2019-06-07 14:48:23,
command.go,0ea93dd,Juan Leni,Fixed linter issues,302,302,,,1,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",303,305,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",307,309,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",298,301,,,0,2019-06-07 14:48:23,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",312,312,,,1,2017-01-24 16:30:45,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,310,311,,,0,2013-11-01 22:36:24,
command.go,51f06c7,Bruce Downs,Correct all complaints from golint  * i.e. * go get golang.org/x/lint/golint * go list ./... | xargs golint,306,306,,,1,2019-08-01 20:25:21,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,313,316,,,0,2013-11-01 22:36:24,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",317,317,,,1,2017-01-24 16:30:45,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,318,318,,,0,2013-11-01 22:36:24,
command.go,ab5cadc,Marc Khouzam,"Allow to reset the templates to the default (#2229)  Follow-up to #1956.  This commit allows a program to reset any of the tree templates to their default behaviour, as it was possible to do before the change of #1956.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",319,322,Alessandro Arzilli,611e16c,0,2025-02-06 15:25:44,2025-01-27 14:43:43
command.go,2a7647f,Paul Meyer,Clarify SetContext documentation (#1748),273,274,,,0,2022-08-30 02:12:56,
command.go,fcd0c5a,Albert Nigmatzianov,"Some fixes related to help command (#394)  * Add dots in the end of docs  * Make UsageTemplate show help command  Fix #366  * Fix output of help if it's invalid command",332,332,,,1,2017-02-28 19:17:48,
command.go,fcd0c5a,Albert Nigmatzianov,"Some fixes related to help command (#394)  * Add dots in the end of docs  * Make UsageTemplate show help command  Fix #366  * Fix output of help if it's invalid command",327,327,,,1,2017-02-28 19:17:48,
command.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,326,326,,,1,2016-10-10 14:56:48,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,324,325,,,0,2013-11-01 22:36:24,
command.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,328,331,,,1,2016-10-10 14:56:48,
command.go,0c72800,Souma,Customizable error message prefix (#2023),194,196,Joshua Carpeggiani,f848943,1,2023-09-08 17:29:06,2022-03-18 10:01:58
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",337,337,,,1,2017-01-24 16:30:45,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,333,336,,,0,2013-11-01 22:36:24,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,338,341,,,0,2013-11-01 22:36:24,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",357,357,,,1,2017-01-24 16:30:45,
command.go,ab5cadc,Marc Khouzam,"Allow to reset the templates to the default (#2229)  Follow-up to #1956.  This commit allows a program to reset any of the tree templates to their default behaviour, as it was possible to do before the change of #1956.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",359,362,Alessandro Arzilli,611e16c,0,2025-02-06 15:25:44,2025-01-27 14:43:43
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,358,358,,,0,2013-11-01 22:36:24,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,364,365,,,0,2013-11-01 22:36:24,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",363,363,Unai Martinez-Corral,285460d,0,2025-01-27 14:43:43,2023-08-29 14:04:59
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),366,367,,,0,2017-12-01 21:37:16,
command.go,ab5cadc,Marc Khouzam,"Allow to reset the templates to the default (#2229)  Follow-up to #1956.  This commit allows a program to reset any of the tree templates to their default behaviour, as it was possible to do before the change of #1956.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",368,371,Alessandro Arzilli,611e16c,0,2025-02-06 15:25:44,2025-01-27 14:43:43
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),373,374,,,0,2017-12-01 21:37:16,
command.go,d910a04,Anastasis Andronidis,Add Global Normalization Function  [close #110],380,384,,,0,2015-05-19 14:23:16,
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",343,350,,,0,2022-10-10 20:59:11,
command.go,d910a04,Anastasis Andronidis,Add Global Normalization Function  [close #110],385,391,,,0,2015-05-19 14:23:16,
command.go,fcd0c5a,Albert Nigmatzianov,"Some fixes related to help command (#394)  * Add dots in the end of docs  * Make UsageTemplate show help command  Fix #366  * Fix output of help if it's invalid command",392,392,,,1,2017-02-28 19:17:48,
command.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",342,342,,,1,2022-12-25 20:08:39,
command.go,20217d8,Fabiano Franz,Expose OutOrStdout and OutOrStderr and don't make assumptions if output is not set,393,393,,,0,2016-07-15 20:18:47,
command.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",351,351,,,1,2022-12-25 20:08:39,
command.go,20217d8,Fabiano Franz,Expose OutOrStdout and OutOrStderr and don't make assumptions if output is not set,398,398,,,0,2016-07-15 20:18:47,
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",352,356,,,0,2022-10-10 20:59:11,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,394,396,,,0,2016-07-06 15:51:57,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,399,401,,,0,2016-07-06 15:51:57,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",397,397,,,1,2017-01-24 16:30:45,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,412,412,,,0,2016-07-06 15:51:57,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",402,406,,,0,2019-06-07 14:48:23,
command.go,3c26245,Daniel Esponda,Correct documentation for InOrStdin (#929)  Documentation on function is incorrect,407,407,,,1,2020-02-20 18:42:29,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",408,411,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",422,441,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",413,414,,,0,2019-06-07 14:48:23,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,415,421,,,0,2016-07-06 15:51:57,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,448,448,,,0,2013-11-01 22:36:24,
command.go,5da9888,bogem,Edit documentation,443,443,,,0,2016-08-30 17:14:27,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,444,447,,,0,2013-11-01 22:36:24,
command.go,681a777,Albert Nigmatzianov,Delete checkHelpFunc,449,449,,,0,2017-04-23 07:17:44,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",372,372,,,0,2025-01-27 14:43:43,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,442,442,,,0,2016-07-06 15:51:57,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,450,451,,,0,2016-03-31 13:53:34,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,457,457,,,0,2013-11-01 22:36:24,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,455,455,,,0,2016-03-31 13:53:34,
command.go,d6bf4ef,Fabiano Franz,"Don't expose Usage() and Help() - our interfaces are UsageFunc, HelpFunc and UsageString",452,452,,,0,2016-07-15 20:18:59,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",453,454,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,40d34bc,Alessio Treglia,"Fix stderr printing functions (#894)  * Fix stderr printing functions  Follow-up of #822  * Errors go to stderr as per POSIX  * use PrintErrf() instead of extra call to Sprintf()  * Error messages should always be printed to os.Stderr.  * add test case for Print* redirection  Thanks: @bukowa for the patch.",456,456,,,1,2020-10-01 15:28:00,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,458,458,,,0,2016-03-31 13:53:34,
command.go,ded646f,Fabiano Franz,Restore Help() and Usage() for backwards compatibility,478,481,,,0,2016-07-20 15:02:56,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",462,474,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,459,460,,,0,2013-11-01 22:36:24,
command.go,5da9888,bogem,Edit documentation,483,483,,,0,2016-08-30 17:14:27,
command.go,5da9888,bogem,Edit documentation,475,477,,,0,2016-08-30 17:14:27,
command.go,27bf248,Eric Paris,"Redo HelpFunc() to work things other than the help subcommand  Today the HelpFunc() seemed to be tailor built for the `help` subcommand. Which has a rather weird purpose as its `Run` needs to find the actual command we want to get help about.  Instead make the HelpFunc() for a command be about that command, rather than having it search for some other command...",461,461,,,0,2015-09-01 18:25:32,
command.go,27bf248,Eric Paris,"Redo HelpFunc() to work things other than the help subcommand  Today the HelpFunc() seemed to be tailor built for the `help` subcommand. Which has a rather weird purpose as its `Run` needs to find the actual command we want to get help about.  Instead make the HelpFunc() for a command be about that command, rather than having it search for some other command...",482,482,,,0,2015-09-01 18:25:32,
command.go,681a777,Albert Nigmatzianov,Delete checkHelpFunc,485,486,,,0,2017-04-23 07:17:44,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,484,484,,,0,2013-11-01 22:36:24,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,487,487,,,0,2013-11-01 22:36:24,
command.go,681a777,Albert Nigmatzianov,Delete checkHelpFunc,488,491,,,0,2017-04-23 07:17:44,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",493,493,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,27bf248,Eric Paris,"Redo HelpFunc() to work things other than the help subcommand  Today the HelpFunc() seemed to be tailor built for the `help` subcommand. Which has a rather weird purpose as its `Run` needs to find the actual command we want to get help about.  Instead make the HelpFunc() for a command be about that command, rather than having it search for some other command...",497,497,,,0,2015-09-01 18:25:32,
command.go,0d9d2d4,Marc Khouzam,"Revert change so help is printed on stdout again (#1004)  Fixes #1002 For backwards compatibility reasons, and to follow the need of https://github.com/kubernetes/kubernetes/pull/26077#issuecomment-230818900 the help message should be printed on stdout.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",494,495,,,0,2019-12-23 18:38:24,
command.go,d6bf4ef,Fabiano Franz,"Don't expose Usage() and Help() - our interfaces are UsageFunc, HelpFunc and UsageString",492,492,,,0,2016-07-15 20:18:59,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",496,496,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,40d34bc,Alessio Treglia,"Fix stderr printing functions (#894)  * Fix stderr printing functions  Follow-up of #822  * Errors go to stderr as per POSIX  * use PrintErrf() instead of extra call to Sprintf()  * Error messages should always be printed to os.Stderr.  * add test case for Print* redirection  Thanks: @bukowa for the patch.",498,498,,,1,2020-10-01 15:28:00,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",503,516,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,499,502,,,0,2013-11-01 22:36:24,
command.go,ded646f,Fabiano Franz,Restore Help() and Usage() for backwards compatibility,520,524,,,0,2016-07-20 15:02:56,
command.go,0c72800,Souma,Customizable error message prefix (#2023),375,379,,,1,2023-09-08 17:29:06,
command.go,b635726,Juan Leni,considering stderr in UsageString,525,525,,,0,2019-06-07 14:48:23,
command.go,5da9888,bogem,Edit documentation,517,519,,,0,2016-08-30 17:14:27,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,526,526,,,0,2016-07-06 15:51:57,
command.go,b635726,Juan Leni,considering stderr in UsageString,527,527,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",528,528,,,0,2019-06-07 14:48:23,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",323,323,,,0,2025-01-27 14:43:43,
command.go,b635726,Juan Leni,considering stderr in UsageString,529,530,,,0,2019-06-07 14:48:23,
command.go,b635726,Juan Leni,considering stderr in UsageString,536,537,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",532,532,,,0,2019-06-07 14:48:23,
command.go,b635726,Juan Leni,considering stderr in UsageString,533,534,,,0,2019-06-07 14:48:23,
command.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,535,535,,,1,2021-02-08 00:08:50,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,531,531,,,0,2016-07-06 15:51:57,
command.go,b635726,Juan Leni,considering stderr in UsageString,539,540,,,0,2019-06-07 14:48:23,
command.go,4a716d1,Juan Leni,"Extending redirection to stdout, stderr, stdin",538,538,,,0,2019-06-07 14:48:23,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,541,543,,,0,2016-07-06 15:51:57,
command.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,544,559,,,1,2016-10-10 14:56:48,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,560,560,,,0,2016-03-31 13:53:34,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",561,561,,,0,2014-01-17 12:36:57,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",566,566,,,0,2014-01-17 12:36:57,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",562,562,,,1,2017-01-24 16:30:45,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",568,569,,,0,2014-01-17 12:36:57,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,567,567,,,0,2016-03-31 13:53:34,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",571,571,,,0,2014-01-17 12:36:57,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",563,565,,,0,2014-01-17 12:36:57,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,570,570,,,0,2016-03-31 13:53:34,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",573,575,,,0,2014-01-17 12:36:57,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",572,572,,,1,2017-01-24 16:30:45,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",578,579,,,0,2014-01-17 12:36:57,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,577,577,,,0,2016-03-31 13:53:34,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,580,580,,,0,2016-03-31 13:53:34,
command.go,a16cb24,Masahiro Sano,help displays command names instead of usage in Available Commands,581,581,,,0,2015-02-17 18:50:09,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",576,576,,,0,2014-01-17 12:36:57,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,592,592,,,0,2013-11-01 22:36:24,
command.go,a16cb24,Masahiro Sano,help displays command names instead of usage in Available Commands,588,589,,,0,2015-02-17 18:50:09,
command.go,a16cb24,Masahiro Sano,help displays command names instead of usage in Available Commands,583,585,,,0,2015-02-17 18:50:09,
command.go,a16cb24,Masahiro Sano,help displays command names instead of usage in Available Commands,586,586,,,0,2015-02-17 18:50:09,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,587,587,,,0,2016-03-31 13:53:34,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",591,591,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",590,590,,,1,2017-01-24 16:30:45,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",582,582,,,1,2017-01-24 16:30:45,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,595,598,,,0,2013-11-01 22:36:24,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",593,594,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",600,600,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",603,603,,,1,2017-01-24 16:30:45,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,601,602,,,0,2013-11-01 22:36:24,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",604,604,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,599,599,,,0,2016-03-31 13:53:34,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,605,605,,,0,2013-11-01 22:36:24,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",606,607,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,608,611,,,0,2013-11-01 22:36:24,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),616,616,,,0,2017-12-01 21:37:16,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",617,617,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,612,612,,,0,2016-03-31 13:53:34,
command.go,74ce44d,spf13,Add ability to cast a command to a commander,614,615,,,0,2013-09-29 05:57:50,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",613,613,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),618,618,,,0,2017-12-01 21:37:16,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",619,620,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,f4f10f6,Albert Nigmatzianov,Simplify stripFlags,659,659,,,0,2017-04-24 13:20:01,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),621,625,,,0,2017-12-01 21:37:16,
command.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,656,658,,,1,2015-03-13 02:36:49,
command.go,4061f41,Albert Nigmatzianov,Use pflag.ShorthandLookup,654,655,,,0,2017-05-05 06:08:38,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",626,639,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,660,661,,,1,2015-03-13 02:36:49,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),640,641,,,0,2017-12-01 21:37:16,
command.go,92ea23a,Eric Paris,"Fix subcommand locations with NoOptDefValue flags (#391)  If one ran a command like  ./root --boolFlag subcmd1 subcmd2  Thing worked fine. The code recognized that --boolFlag followed by a space meant the next word was not the argument to --boolFlag. But other flag types with a NoOptDefValue (like a Count flag) would not ignore the ""argument"".  On a command like:  ./root --countflag subcmd1 subcmd2  The processor, when looking for a subcommand, would first throw out the `--countflag subcmd1` and then look for subcmd2 under root.  The fix is to ignore the next word after any NoOptDefVal flag, not just boolean flags.",662,662,,,1,2017-02-23 13:12:51,
command.go,9890b7b,Albert Nigmatzianov,Simplify stripFlags function,675,675,,,0,2017-04-23 20:42:38,
command.go,4061f41,Albert Nigmatzianov,Use pflag.ShorthandLookup,663,671,,,0,2017-05-05 06:08:38,
command.go,bbdea35,Brendan Burns,Fix stripFlags to be more intelligent about what it parses.,672,674,,,1,2015-03-13 02:36:49,
command.go,93278e2,Brendan Burns,Add mergePersistentFlags in strip flags since we now look at the flag set.,678,678,,,0,2015-03-16 23:15:32,
command.go,10a8494,spf13,Support for flags before commands,679,680,,,0,2014-06-17 16:32:27,
command.go,10a8494,spf13,Support for flags before commands,676,677,,,0,2014-06-17 16:32:27,
command.go,f4f10f6,Albert Nigmatzianov,Simplify stripFlags,681,681,,,0,2017-04-24 13:20:01,
command.go,9890b7b,Albert Nigmatzianov,Simplify stripFlags function,682,685,,,0,2017-04-23 20:42:38,
command.go,f4f10f6,Albert Nigmatzianov,Simplify stripFlags,686,686,,,0,2017-04-24 13:20:01,
command.go,c439c4f,Di Xu,Terminate the stripping of flags when -- is found (#649),688,690,,,0,2018-03-19 06:20:04,
command.go,51b7cf5,Albert Nigmatzianov,"Fix tests so they give correct args (#445)  * Fix tests so they give correct args  Shell already deletes all quotes and unite args under quotes, so we don't need to test it.  * Simplify stripFlags  * Fix 'unused' and 'gosimple' complaints",691,702,,,1,2017-05-14 12:51:04,
command.go,51b7cf5,Albert Nigmatzianov,"Fix tests so they give correct args (#445)  * Fix tests so they give correct args  Shell already deletes all quotes and unite args under quotes, so we don't need to test it.  * Simplify stripFlags  * Fix 'unused' and 'gosimple' complaints",687,687,,,1,2017-05-14 12:51:04,
command.go,10a8494,spf13,Support for flags before commands,703,703,,,0,2014-06-17 16:32:27,
command.go,10a8494,spf13,Support for flags before commands,706,711,,,0,2014-06-17 16:32:27,
command.go,51b7cf5,Albert Nigmatzianov,"Fix tests so they give correct args (#445)  * Fix tests so they give correct args  Shell already deletes all quotes and unite args under quotes, so we don't need to test it.  * Simplify stripFlags  * Fix 'unused' and 'gosimple' complaints",704,705,,,1,2017-05-14 12:51:04,
command.go,36aee64,deads2k,prevent removal of valid arguments,712,713,,,0,2015-04-28 11:58:26,
command.go,6b0bd30,Brian Pursley,"fix: don't remove flag value that matches subcommand name (#1781)  When the command searches args to find the arg matching a particular subcommand name, it needs to ignore flag values, as it is possible that the value for a flag might match the name of the sub command.  This change improves argsMinusFirstX() to ignore flag values when it searches for the X to exclude from the result.",714,739,Marc Khouzam,10cf7be,1,2022-11-08 04:12:02,2022-10-24 15:11:57
command.go,10a8494,spf13,Support for flags before commands,745,746,,,0,2014-06-17 16:32:27,
command.go,10a8494,spf13,Support for flags before commands,748,749,,,0,2014-06-17 16:32:27,
command.go,36aee64,deads2k,prevent removal of valid arguments,747,747,,,0,2015-04-28 11:58:26,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",752,754,,,1,2017-10-07 21:29:11,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",750,750,,,1,2017-10-07 21:29:11,
command.go,99600f6,Daniel Nephin,Add a tags field for user defined tags on a Command. (#359)  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,755,755,,,0,2017-02-07 21:20:48,
command.go,6b0bd30,Brian Pursley,"fix: don't remove flag value that matches subcommand name (#1781)  When the command searches args to find the arg matching a particular subcommand name, it needs to ignore flag values, as it is possible that the value for a flag might match the name of the sub command.  This change improves argsMinusFirstX() to ignore flag values when it searches for the X to exclude from the result.",741,744,Paul Meyer,2a7647f,1,2022-11-08 04:12:02,2022-08-30 02:12:56
command.go,fb2146e,spf13,Add support for help command,756,756,,,0,2013-09-24 20:03:22,
command.go,55ff474,spf13,Finding command based on args cleaned up,758,759,,,0,2013-09-29 05:59:13,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",767,768,,,1,2017-10-07 21:29:11,
command.go,e0f326d,Sam Ghods,Fix root command without subcommands but with arguments  [close #108],757,757,,,1,2015-05-19 14:22:07,
command.go,55ff474,spf13,Finding command based on args cleaned up,766,766,,,0,2013-09-29 05:59:13,
command.go,d0bb3e3,Eric Paris,"rework Find() to make it more obvious what is happening  We had lots of quirky if statements like `commandFound.Name() == c.Name() && len(stripFlags(args, c)) > 0 && commandFound.Name() != args[0]` which embeed all sorts of artifacts which are hard to parse. So in general, just try to simplify and make stuff readable.",761,765,,,0,2015-06-29 19:44:56,
command.go,e0f326d,Sam Ghods,Fix root command without subcommands but with arguments  [close #108],760,760,,,1,2015-05-19 14:22:07,
command.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",740,740,Marc Khouzam,10cf7be,1,2023-11-23 17:24:33,2022-10-24 15:11:57
command.go,55ff474,spf13,Finding command based on args cleaned up,773,773,,,0,2013-09-29 05:59:13,
command.go,e0f326d,Sam Ghods,Fix root command without subcommands but with arguments  [close #108],771,771,,,1,2015-05-19 14:22:07,
command.go,62fb674,spf13,Organize the files a bit better,772,772,,,0,2013-09-24 16:47:29,
command.go,e0f326d,Sam Ghods,Fix root command without subcommands but with arguments  [close #108],774,774,,,1,2015-05-19 14:22:07,
command.go,d0bb3e3,Eric Paris,"rework Find() to make it more obvious what is happening  We had lots of quirky if statements like `commandFound.Name() == c.Name() && len(stripFlags(args, c)) > 0 && commandFound.Name() != args[0]` which embeed all sorts of artifacts which are hard to parse. So in general, just try to simplify and make stuff readable.",770,770,,,0,2015-06-29 19:44:56,
command.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,775,776,,,1,2017-07-23 07:57:27,
command.go,62fb674,spf13,Organize the files a bit better,777,777,,,0,2013-09-24 16:47:29,
command.go,55ff474,spf13,Finding command based on args cleaned up,778,778,,,0,2013-09-29 05:59:13,
command.go,62fb674,spf13,Organize the files a bit better,779,780,,,0,2013-09-24 16:47:29,
command.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,789,789,,,1,2017-07-23 07:57:27,
command.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,781,781,,,1,2017-07-23 07:57:27,
command.go,d89c499,Eric Paris,"Allow commands to explicitly state if they do, or do not take arbitrary arguments  Check that arguments are in ValidArgs  If a command defined cmd.ValidArgs check that the argument is actually in ValidArgs and fail if it is not.",782,787,,,0,2017-07-23 07:57:27,
command.go,d89c499,Eric Paris,"Allow commands to explicitly state if they do, or do not take arbitrary arguments  Check that arguments are in ValidArgs  If a command defined cmd.ValidArgs check that the argument is actually in ValidArgs and fail if it is not.",793,794,,,0,2017-07-23 07:57:27,
command.go,d89c499,Eric Paris,"Allow commands to explicitly state if they do, or do not take arbitrary arguments  Check that arguments are in ValidArgs  If a command defined cmd.ValidArgs check that the argument is actually in ValidArgs and fail if it is not.",791,791,,,0,2017-07-23 07:57:27,
command.go,d89c499,Eric Paris,"Allow commands to explicitly state if they do, or do not take arbitrary arguments  Check that arguments are in ValidArgs  If a command defined cmd.ValidArgs check that the argument is actually in ValidArgs and fail if it is not.",796,797,,,0,2017-07-23 07:57:27,
command.go,6b0bd30,Brian Pursley,"fix: don't remove flag value that matches subcommand name (#1781)  When the command searches args to find the arg matching a particular subcommand name, it needs to ignore flag values, as it is possible that the value for a flag might match the name of the sub command.  This change improves argsMinusFirstX() to ignore flag values when it searches for the X to exclude from the result.",769,769,,,1,2022-11-08 04:12:02,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",798,800,,,1,2017-10-07 21:29:11,
command.go,b4f979a,Dominik Roos,"completions: do not detect arguments with dash as 2nd char as flag (#1817)  Fixes #1816  Previously, arguments with a dash as the second character (e.g., 1-ff00:0:1) were detected as a flag by mistake. This resulted in auto completion misbehaving if such an argument was last in the argument list during invocation.",751,751,,,0,2023-01-03 00:58:36,
command.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",802,802,,,1,2018-02-04 16:58:53,
command.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",795,795,,,1,2023-11-23 17:24:33,
command.go,0c72800,Souma,Customizable error message prefix (#2023),642,653,,,1,2023-09-08 17:29:06,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",814,814,,,1,2017-10-07 21:29:11,
command.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",815,815,,,1,2018-02-04 16:58:53,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",803,810,,,1,2017-10-07 21:29:11,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",816,861,,,1,2017-10-07 21:29:11,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",862,862,,,1,2017-01-24 16:30:45,
command.go,3afa4db,Fabiano Franz,Improve suggestions - prefix will match,864,866,,,0,2015-09-25 14:41:47,
command.go,3afa4db,Fabiano Franz,Improve suggestions - prefix will match,871,872,,,0,2015-09-25 14:41:47,
command.go,a83a172,Fabiano Franz,Improve suggestions - add explicit SuggestFor attribute,863,863,,,0,2015-09-25 15:07:38,
command.go,a83a172,Fabiano Franz,Improve suggestions - add explicit SuggestFor attribute,867,870,,,0,2015-09-25 15:07:38,
command.go,a83a172,Fabiano Franz,Improve suggestions - add explicit SuggestFor attribute,873,877,,,0,2015-09-25 15:07:38,
command.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,884,884,,,0,2015-11-08 14:58:38,
command.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",792,792,,,1,2023-11-23 17:24:33,
command.go,3afa4db,Fabiano Franz,Improve suggestions - prefix will match,878,882,,,0,2015-09-25 14:41:47,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,885,887,,,1,2017-04-20 13:38:50,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",883,883,,,1,2017-01-24 16:30:45,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",891,891,,,1,2017-01-24 16:30:45,
command.go,fb2146e,spf13,Add support for help command,892,892,,,0,2013-09-24 20:03:22,
command.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,888,888,,,0,2015-11-08 14:58:38,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,893,894,,,1,2017-04-20 13:38:50,
command.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",801,801,,,0,2022-09-11 12:25:22,
command.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",790,790,,,1,2023-11-23 17:24:33,
command.go,62fb674,spf13,Organize the files a bit better,895,895,,,0,2013-09-24 16:47:29,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,896,896,,,1,2017-04-20 13:38:50,
command.go,fb2146e,spf13,Add support for help command,897,898,,,0,2013-09-24 20:03:22,
command.go,5144a3a,Austin Riendeau,add a flag to disable autogen tag in man and markdown generators  Inherits from parent commands all the way to root,889,890,,,0,2015-11-08 14:58:38,
command.go,a2845e7,spf13,fixed spf13/cobra#1 spf13/hugo#88,905,905,,,1,2013-10-01 01:54:46,
command.go,edde52e,Eric Paris,Provide the length of Args when a -- is found in commandline  This allows a program to know what args came before the -- and what args came after.,901,904,,,0,2015-09-16 16:31:41,
command.go,65c8acb,Albert Nigmatzianov,Improve tests,899,900,,,0,2017-11-09 06:56:43,
command.go,62fb674,spf13,Organize the files a bit better,906,906,,,0,2013-09-24 16:47:29,
command.go,fe69f2e,Albert Nigmatzianov,Make initHelpFlag public  Used for solving #424,916,916,,,0,2017-05-06 22:45:39,
command.go,62fb674,spf13,Organize the files a bit better,908,909,,,0,2013-09-24 16:47:29,
command.go,3d8ac43,Ville Skyttä,"Micro-optimizations (#1957)  * Avoid redundant string splits  There likely isn't actually more than once to split in the source strings in these cases, but avoid doing so anyway as we're only interested in the first.  * Avoid redundant completion output target evaluations  The target is not to be changed while outputting completions, so resolve it only once.  * Avoid redundant active help enablement evaluations  The enablement state is not to be changed during completion output, so evaluate it only once.  * Preallocate some slices and maps with known size  * Avoid some unnecessary looping  * Use strings.Builder to construct suggestions",788,788,,,1,2023-11-23 17:24:33,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),914,914,,,0,2017-12-01 21:37:16,
command.go,ae28810,Eric Paris,Fix the late init help flag,915,915,,,1,2015-09-01 15:31:23,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),917,917,,,0,2017-12-01 21:37:16,
command.go,c3e48f9,Eric Paris,"Deprecated subcommands  They should still work, but shouldn't show up in help or usage output",910,913,,,0,2015-04-29 17:08:20,
command.go,a2845e7,spf13,fixed spf13/cobra#1 spf13/hugo#88,919,920,,,1,2013-10-01 01:54:46,
command.go,b9e25fa,Eric Paris,"Slight formatting change, to make next commit more readable",922,922,,,0,2015-04-06 20:02:08,
command.go,ae28810,Eric Paris,Fix the late init help flag,918,918,,,1,2015-09-01 15:31:23,
command.go,823f689,Alexander Guy,RunE commands should be considered runnable.,925,925,,,0,2015-09-02 17:59:31,
command.go,fe69f2e,Albert Nigmatzianov,Make initHelpFlag public  Used for solving #424,923,924,,,0,2017-05-06 22:45:39,
command.go,67feb81,Daniel Nephin,Add support for setting a function to handle flag parsing errors.  The default pflag error is to only print the bad flag. This enables an application to include a usage message or other details about the error.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,921,921,,,1,2016-10-10 14:56:48,
command.go,fe69f2e,Albert Nigmatzianov,Make initHelpFlag public  Used for solving #424,929,929,,,0,2017-05-06 22:45:39,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,933,933,,,0,2016-07-06 15:51:57,
command.go,ae28810,Eric Paris,Fix the late init help flag,927,928,,,1,2015-09-01 15:31:23,
command.go,ae28810,Eric Paris,Fix the late init help flag,930,932,,,1,2015-09-01 15:31:23,
command.go,b9e25fa,Eric Paris,"Slight formatting change, to make next commit more readable",937,937,,,0,2015-04-06 20:02:08,
command.go,ccaecb1,Nick Miyake,"Ensure that '--version' flag works properly for root command (#595)  Make it so that, in the case that the root command is not runnable but has subcommands, specifying a '--version' flag will still run the ""version"" behavior.",934,934,,,0,2017-12-07 07:49:35,
command.go,62fb674,spf13,Organize the files a bit better,936,936,,,0,2013-09-24 16:47:29,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),938,945,,,0,2017-12-01 21:37:16,
command.go,0a7a850,Eric Paris,"Make error handling more obvious  Again, the code looks a little more like a middle-schooler's code. But that just makes it easier to understand and maintain.",935,935,,,1,2015-06-29 19:45:01,
command.go,285460d,Unai Martinez-Corral,command: temporarily disable G602 due to securego/gosec#1005 (#2022),811,813,,,0,2023-08-29 14:04:59,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),948,954,,,0,2017-12-01 21:37:16,
command.go,6607e6b,Joshua Harshman,"Partial Revert of #922 (#1068)  Issue Reference: https://github.com/spf13/cobra/issues/1056  https://github.com/spf13/cobra/pull/922 introduced a new error type that emitted when a command was not runnable. This caused all commands w/o a run function set to error w/ that message and a status code of 1.  This change reverts the addition of that new error. Similar functionality can be accomplished by leveraging RunE.",956,956,,,1,2020-03-27 20:38:32,
command.go,ccaecb1,Nick Miyake,"Ensure that '--version' flag works properly for root command (#595)  Make it so that, in the case that the root command is not runnable but has subcommands, specifying a '--version' flag will still run the ""version"" behavior.",955,955,,,0,2017-12-07 07:49:35,
command.go,b9e25fa,Eric Paris,"Slight formatting change, to make next commit more readable",963,963,,,0,2015-04-06 20:02:08,
command.go,ccaecb1,Nick Miyake,"Ensure that '--version' flag works properly for root command (#595)  Make it so that, in the case that the root command is not runnable but has subcommands, specifying a '--version' flag will still run the ""version"" behavior.",957,958,,,0,2017-12-07 07:49:35,
command.go,b9e25fa,Eric Paris,"Slight formatting change, to make next commit more readable",959,959,,,0,2015-04-06 20:02:08,
command.go,dc6e9ec,Mark Bates,added a flag to disable flags,960,960,,,0,2016-06-04 00:25:52,
command.go,dc6e9ec,Mark Bates,added a flag to disable flags,964,966,,,0,2016-06-04 00:25:52,
command.go,42e6ce3,Anastasis Andronidis,Fixed Persistent-Run function propagation,973,973,,,1,2015-05-04 01:42:55,
command.go,8003b74,Nir Soffer,"Remove fully inactivated linters (#2148)  * Remove fully inactivated linters  Currently golangci-lint fails with these errors:  ERRO [linters_context] golint: This linter is fully inactivated: it will not produce any reports. ERRO [linters_context] interfacer: This linter is fully inactivated: it will not produce any reports. ERRO [linters_context] maligned: This linter is fully inactivated: it will not produce any reports.  I could not find any docs explaining what ""fully inactivated"" mean, but based this PR[1] it seems that these linters do nothing now. Removing the linters fixes this issue without changing linting, as they did not produce any report.  Looking in the linters docs[2] I did not find a replacement for ""interfacer"" and ""malinged"" linters. ""stylecheck"" seems to be a replacement for ""golint"", but we need to fix the code to enable it.  [1] https://github.com/golangci/golangci-lint/pull/4436 [2] https://golangci-lint.run/usage/linters/  * Add stylecheck linter, replacement for golint  This revealed 2 capitalized error messages.  https://golangci-lint.run/usage/linters/#stylecheck",907,907,,,1,2024-05-19 02:12:02,
command.go,2df6402,Alexander Thaller,added pre and post run hooks.,967,967,,,0,2015-04-30 16:44:01,
command.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,968,971,,,1,2017-07-23 07:57:27,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,985,985,,,0,2015-08-31 01:03:16,
command.go,72ee37f,Viktor Stanchev,fix bug with PersistentPreRunE,986,986,,,1,2015-09-30 07:09:17,
command.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",974,984,Unai Martinez-Corral,6d978a9,0,2023-10-22 00:36:12,2022-09-16 11:55:56
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",946,947,Francis Nickels III,7039e1f,0,2025-01-27 14:43:43,2022-09-30 18:26:05
command.go,42e6ce3,Anastasis Andronidis,Fixed Persistent-Run function propagation,993,993,,,1,2015-05-04 01:42:55,
command.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",972,972,Unai Martinez-Corral,6d978a9,0,2023-10-22 00:36:12,2022-09-16 11:55:56
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,987,988,,,0,2015-08-31 01:03:16,
command.go,93d1913,Yann Soubeyrand,"Add OnFinalize method (#1788)  This method is the OnInitialize counterpart. Like OnInitialize which allows loading the configuration before each command is executed, OnFinalize allows saving the configuration after each command has been executed.",961,962,Unai Martinez-Corral,652c755,0,2022-10-03 14:52:50,2021-02-08 00:08:50
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,999,1003,,,0,2015-08-31 01:03:16,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,992,992,,,0,2015-08-31 01:03:16,
command.go,42e6ce3,Anastasis Andronidis,Fixed Persistent-Run function propagation,997,997,,,1,2015-05-04 01:42:55,
command.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",989,991,,,0,2023-10-22 00:36:12,
command.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",994,996,Haoming Meng,95d8a1e,0,2023-10-22 00:36:12,2023-10-09 12:50:40
command.go,2df6402,Alexander Thaller,added pre and post run hooks.,1004,1006,,,0,2015-04-30 16:44:01,
command.go,fbce60c,Alexander Thaller,added persistent pre/post commands.,998,998,,,0,2015-04-30 16:45:23,
command.go,4d6af28,Di Xu,enforce required flags (#502),1008,1009,,,0,2017-10-10 03:44:33,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,1014,1025,,,0,2015-08-31 01:03:16,
command.go,42e6ce3,Anastasis Andronidis,Fixed Persistent-Run function propagation,1028,1028,,,1,2015-05-04 01:42:55,
command.go,2df6402,Alexander Thaller,added pre and post run hooks.,1026,1027,,,0,2015-04-30 16:44:01,
command.go,68b6b24,John Schnake,"Add ability to mark flags as required or exclusive as a group (#1654)  This change adds two features for dealing with flags:  - requiring flags be provided as a group (or not at all)  - requiring flags be mutually exclusive of each other  By utilizing the flag annotations we can mark which flag groups a flag is a part of and during the parsing process we track which ones we have seen or not.  A flag may be a part of multiple groups. The list of flags and the type of group (required together or exclusive) make it a unique group.  Signed-off-by: John Schnake <jschnake@vmware.com>",1011,1013,,,0,2022-04-17 21:04:57,
command.go,42e6ce3,Anastasis Andronidis,Fixed Persistent-Run function propagation,1037,1037,,,1,2015-05-04 01:42:55,
command.go,fce8d8a,Skeet WU,Expose ValidateRequiredFlags and ValidateFlagGroups (#1760),1010,1010,,,0,2022-09-27 10:27:48,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,1036,1036,,,0,2015-08-31 01:03:16,
command.go,9174039,Austin Riendeau,#67 creates RunE functions to allow for errors to populate to the top,1029,1032,,,0,2015-08-31 01:03:16,
command.go,fce8d8a,Skeet WU,Expose ValidateRequiredFlags and ValidateFlagGroups (#1760),1007,1007,,,0,2022-09-27 10:27:48,
command.go,42e6ce3,Anastasis Andronidis,Fixed Persistent-Run function propagation,1041,1041,,,1,2015-05-04 01:42:55,
command.go,2df6402,Alexander Thaller,added pre and post run hooks.,1043,1043,,,0,2015-04-30 16:44:01,
command.go,fbce60c,Alexander Thaller,added persistent pre/post commands.,1042,1042,,,0,2015-04-30 16:45:23,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",926,926,,,0,2025-01-27 14:43:43,
command.go,62fb674,spf13,Organize the files a bit better,1045,1046,,,0,2013-09-24 16:47:29,
command.go,b9e25fa,Eric Paris,"Slight formatting change, to make next commit more readable",1044,1044,,,0,2015-04-06 20:02:08,
command.go,7cebca3,spf13,Add support for an InitializeConfig method as defined on Cobra by the user,1051,1052,,,0,2014-06-27 19:45:51,
command.go,0da0687,Alexandr Burdiyan,Add support for context.Context,1059,1059,,,0,2020-02-20 06:29:50,
command.go,864687a,spf13,"Adding ""OnInitialize()"" method instead of directly setting a property. Now can have multiple initializers.",1048,1050,,,0,2014-07-11 14:57:53,
command.go,7cebca3,spf13,Add support for an InitializeConfig method as defined on Cobra by the user,1047,1047,,,0,2014-06-27 19:45:51,
command.go,0da0687,Alexandr Burdiyan,Add support for context.Context,1062,1066,,,0,2020-02-20 06:29:50,
command.go,e606913,Albert Nigmatzianov,Fix typos,1067,1067,,,1,2017-05-28 10:56:30,
command.go,6d00909,Lukas Malkmus,Pass context to completion (#1265),1060,1061,,,0,2021-05-03 16:33:57,
command.go,3f60599,Austin Riendeau,Creates the ExecuteC function while maintaining Execute signature,1070,1074,,,0,2015-11-17 20:01:58,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1068,1069,,,0,2013-11-01 22:36:24,
command.go,0da0687,Alexandr Burdiyan,Add support for context.Context,1085,1088,,,0,2020-02-20 06:29:50,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1089,1090,,,0,2013-11-01 22:36:24,
command.go,3f60599,Austin Riendeau,Creates the ExecuteC function while maintaining Execute signature,1084,1084,,,0,2015-11-17 20:01:58,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1083,1083,,,1,2017-01-24 16:30:45,
command.go,3f60599,Austin Riendeau,Creates the ExecuteC function while maintaining Execute signature,1091,1091,,,0,2015-11-17 20:01:58,
command.go,6d00909,Lukas Malkmus,Pass context to completion (#1265),1075,1082,,,0,2021-05-03 16:33:57,
command.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1038,1040,Marc Khouzam,b312f0a,0,2023-10-22 00:36:12,2021-02-15 17:47:01
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1092,1093,,,0,2013-11-01 22:36:24,
command.go,193b182,Frank Schroeder,Issue #195: Compile mousetrap only on Windows  * Create command_win.go and command_notwin.go for windows only code * Move call to mousetrap hook into separate preExecHook() function,1094,1096,,,1,2015-11-24 00:52:16,
command.go,beda194,bep,Add mousetrap for Windows users  Fixes #80,1097,1098,,,0,2015-04-01 19:14:40,
command.go,52ae6a1,Albert Nigmatzianov,Make initHelpCmd public (#436)  Useful for solving #424,1100,1100,,,0,2017-05-20 17:23:33,
command.go,10cf7be,Marc Khouzam,"Check for group presence after full initialization (#1839)  Fixes #1831  By moving the check for help group existence to ""ExecuteC()"" we no longer need groups to be added before AddCommand() is called.  This provides more flexibility to developers and works better with the use of ""init()"" for command creation.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",1101,1101,Gustavo Bazan,8607918,0,2022-10-24 15:11:57,2022-10-10 23:06:30
command.go,b312f0a,Marc Khouzam,"Create 'completion' command automatically (#1192)  Make it easier for programs to provide shell completion by creating the 'completion' command automatically.  If a 'completion' command is already provided by the program, Cobra will use that one instead.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1099,1099,namusyaka,7df62f7,0,2021-02-15 17:47:01,2020-12-04 19:34:11
command.go,5755ecf,umarcor,"[TrivialPatches] Typos in README.md, fix and update CI, update projects list... (#840)  * update Example in README.md (#769)  * specify the color as the required arg (#777)  * command: fix typo in docstring of InheritedFlags (#779)  * add istio to the list of projects built with Cobra (#786)  * remove redundant 'else' (#806)  * add mattermost-server as a project built with Cobra (#824)  * update README.md (#826)  Fix the comment: consistent with others  * add uber/prototool as a project built with Cobra (#831)  * fix(ci): use go vet, update to Go 1.12, update shellcheck to v0.4.6 (#832)  * add go.mod and go.sum (#833)  * chore(travis): move 'diff' job to separate stage in Travis (#839)  * chore(travis): use language configuration list instead of explicit entries in matrix.include (#839)  * chore(travis): update shellcheck-docker to v0.6.0 (#839)  * update(README.md): separate projects by commas, instead of using a list  * chore: update viper to v1.3.2 and go-md2man to v1.0.10  * fix: convert CRLF to LF when comparing files  * use kyoh86/richgo to provide colored test outputs",1102,1102,,,1,2019-03-20 21:21:26,
command.go,93d1913,Yann Soubeyrand,"Add OnFinalize method (#1788)  This method is the OnInitialize counterpart. Like OnInitialize which allows loading the configuration before each command is executed, OnFinalize allows saving the configuration after each command has been executed.",1053,1058,,,0,2022-10-03 14:52:50,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1106,1106,,,0,2013-11-01 22:36:24,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1107,1108,,,0,2013-11-01 22:36:24,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1103,1103,,,0,2013-11-01 22:36:24,
command.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",1109,1109,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
command.go,40b5bc1,Marc Khouzam,"Revert ""Make detection for test-binary more universal (#2173)"" (#2235)  This reverts commit d1e9d85fcf592461f3bc2f4b6d5e140c4c0aabf8.  Some programs set os.Args in their unit tests and this change would break those tests.  Ref: https://github.com/spf13/cobra/pull/2173#issuecomment-2661544195",1104,1105,Marc Khouzam,24ada7f,0,2025-02-16 23:42:04,2025-02-15 18:07:02
command.go,b80aeb1,Marc Khouzam,"Add support for custom completions in Go (#1035)  This commit allows programs using Cobra to code their custom completions in Go instead of Bash.  The new ValidArgsFunction field is added for commands, similarly to ValidArgs.  For flags, the new function Command.RegisterFlagCompletionFunc() is added.  When either of the above functions is used, the bash completion script will call the new hidden command '__complete', passing it all command-line arguments. The '__complete' command will call the function specified by Command.ValidArgsFunction or by Command.RegisterFlagCompletionFunc to obtain completions from the program itself.  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1110,1111,,,0,2020-04-03 19:43:43,
command.go,24ada7f,Marc Khouzam,"Remove the default ""completion"" cmd if it is alone (#1559)  When a program has no sub-commands, its root command can accept arguments.  If we add the default ""completion"" command to such programs they will now have a sub-command and will no longer accept arguments.  What we do instead for this special case, is only add the ""completion"" command if it is being called, or if it is being completed itself.  We want to have the ""completion"" command for such programs because it will allow the completion of flags and of arguments (if provided by the program).  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",1112,1118,ccoVeille,8cb30f9,0,2025-02-15 18:07:02,2025-02-09 16:06:07
command.go,9a9d01c,Eric Paris,"Better error message  Calling `cobra-test echo times one two turkey` where `one` and `two` are valid arguments but `turkey` is not now results in.  Error: invalid argument ""turkey"" for ""cobra-test echo times"" Run 'cobra-test echo times --help' for usage.",1126,1129,,,1,2015-06-29 21:09:41,
command.go,0a7a850,Eric Paris,"Make error handling more obvious  Again, the code looks a little more like a middle-schooler's code. But that just makes it easier to understand and maintain.",1125,1125,,,1,2015-06-29 19:45:01,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",1119,1124,,,1,2017-10-07 21:29:11,
command.go,f6e1a2d,Austin Riendeau,[silence-errors]: -m adds a way for errors to silenced down the stack,1130,1130,,,0,2015-10-26 01:58:53,
command.go,f6e1a2d,Austin Riendeau,[silence-errors]: -m adds a way for errors to silenced down the stack,1133,1133,,,0,2015-10-26 01:58:53,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1135,1135,,,0,2013-11-01 22:36:24,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",1136,1136,,,1,2017-10-07 21:29:11,
command.go,4cafa37,vkhoroz,"Allow running persistent run hooks of all parents (#2044)  Currently, only one of the persistent pre-runs and post-runs is executed. It is always the first one found in the parents chain, starting at this command. Expected behavior is to execute all parents' persistent pre-runs and post-runs.  Dependent projects implemented various workarounds for this: - manually building persistent hook chains (in every hook). - applying some kind of monkey-patching on top of Cobra.  This change eliminates the necessity for such workarounds by allowing to set a global variable EnableTraverseRunHooks.  Tickets: - https://github.com/spf13/cobra/issues/216 - https://github.com/spf13/cobra/issues/252  Signed-off-by: Volodymyr Khoroz <volodymyr.khoroz@foundries.io>",1033,1035,,,0,2023-10-22 00:36:12,
command.go,3f60599,Austin Riendeau,Creates the ExecuteC function while maintaining Execute signature,1134,1134,,,0,2015-11-17 20:01:58,
command.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",1137,1141,,,1,2018-02-04 16:58:53,
command.go,40d34bc,Alessio Treglia,"Fix stderr printing functions (#894)  * Fix stderr printing functions  Follow-up of #822  * Errors go to stderr as per POSIX  * use PrintErrf() instead of extra call to Sprintf()  * Error messages should always be printed to os.Stderr.  * add test case for Print* redirection  Thanks: @bukowa for the patch.",1132,1132,,,1,2020-10-01 15:28:00,
command.go,0a7a850,Eric Paris,"Make error handling more obvious  Again, the code looks a little more like a middle-schooler's code. But that just makes it easier to understand and maintain.",1148,1148,,,1,2015-06-29 19:45:01,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1149,1149,,,0,2013-11-01 22:36:24,
command.go,0da0687,Alexandr Burdiyan,Add support for context.Context,1142,1147,,,0,2020-02-20 06:29:50,
command.go,2bd8a73,Sascha Holzleiter,"always show help if requested, even if SilenceErrors is enabled",1150,1151,,,0,2015-12-24 13:52:49,
command.go,7df62f7,namusyaka,fix typos (#1274),1157,1157,,,1,2020-12-04 19:34:11,
command.go,03aabcd,Austin Riendeau,adds inheritance for SilenceErrors,1159,1159,,,0,2015-10-26 03:17:39,
command.go,2bd8a73,Sascha Holzleiter,"always show help if requested, even if SilenceErrors is enabled",1153,1156,,,0,2015-12-24 13:52:49,
command.go,2244c39,Austin Riendeau,[silence-errors]: adds comments around code,1158,1158,,,0,2015-10-26 23:42:06,
command.go,7df62f7,namusyaka,fix typos (#1274),1163,1163,,,1,2020-12-04 19:34:11,
command.go,0a7a850,Eric Paris,"Make error handling more obvious  Again, the code looks a little more like a middle-schooler's code. But that just makes it easier to understand and maintain.",1161,1161,,,1,2015-06-29 19:45:01,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1168,1168,,,0,2013-11-01 22:36:24,
command.go,e606913,Albert Nigmatzianov,Fix typos,1169,1169,,,1,2017-05-28 10:56:30,
command.go,871b0ed,James Bowes,Ensure the usage command is printed only once  Reverse a swap in logic introduced in #169 that would cause the usage output to be printed twice.  Fixes #171,1162,1162,,,0,2015-10-31 13:22:19,
command.go,871b0ed,James Bowes,Ensure the usage command is printed only once  Reverse a swap in logic introduced in #169 that would cause the usage output to be printed twice.  Fixes #171,1164,1167,,,0,2015-10-31 13:22:19,
command.go,b9ca594,Paul Holzinger,"use errors.Is() to check for errors (#1730)  Since go 1.13 you can wrap errors. This make it no longer possible to compare with `==`, instead you have to compare with `errors.Is()`.  I noticed this problem because -h was no longer working after I stared wrapping the errors in my custom FlagErrorFunc function. Note that this is only a problem when a custom help flag is defined.  Signed-off-by: Paul Holzinger <pholzing@redhat.com>",1152,1152,,,0,2022-06-21 02:02:33,
command.go,0c72800,Souma,Customizable error message prefix (#2023),1160,1160,Gustavo Bazan,8607918,1,2023-09-08 17:29:06,2022-10-10 23:06:30
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1170,1171,,,0,2013-11-01 22:36:24,
command.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,1172,1173,,,1,2017-07-23 07:57:27,
command.go,f20b4e9,Daniel Nephin,Refactor TakesArgs to use an interface for arg validation.  Fix some typos in README and comments. Move arg validation to after flag validation so that the help flag is run first. Pass the same args to ValidateArgs as the Run methods receive. Update README.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,1175,1178,,,1,2017-07-23 07:57:27,
command.go,4d6af28,Di Xu,enforce required flags (#502),1199,1202,,,0,2017-10-10 03:44:33,
command.go,19e54c4,Nick Miyake,"Update error message for missing required flags (#580)  Make it so that first letter is not capitalized and rephrase to remove ""have/has"".",1198,1198,,,1,2017-11-19 09:22:51,
command.go,4d6af28,Di Xu,enforce required flags (#502),1185,1197,,,0,2017-10-10 03:44:33,
command.go,5155946,Marc Khouzam,"Ignore required flags when DisableFlagParsing (#1095)  When a command request to DisableFlagParsing, it should not fail due to a missing required flag.  In fact, such a check will always fail since flags weren't parsed!  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>",1181,1184,,,0,2020-05-08 01:18:16,
command.go,7faa7fc,Daniel Nephin,Merge persistent flags before checking for a help flag.  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,1220,1220,,,0,2016-06-20 18:58:44,
command.go,fe69f2e,Albert Nigmatzianov,Make initHelpFlag public  Used for solving #424,1216,1217,,,0,2017-05-06 22:45:39,
command.go,fe69f2e,Albert Nigmatzianov,Make initHelpFlag public  Used for solving #424,1219,1219,,,0,2017-05-06 22:45:39,
command.go,d83a1d7,Albert Nigmatzianov,Add comment for InitDefaultHelpFlag,1218,1218,,,0,2017-05-07 08:52:40,
command.go,fce8d8a,Skeet WU,Expose ValidateRequiredFlags and ValidateFlagGroups (#1760),1179,1180,,,0,2022-09-27 10:27:48,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1221,1221,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,ea94a3d,Unai Martinez-Corral,undefined or nil Args default to ArbitraryArgs (#1612),1174,1174,,,0,2022-06-21 02:00:50,
command.go,867d414,Albert Nigmatzianov,Initialize help flag in initHelpCmd  Fix #302,1222,1222,,,1,2017-04-26 19:24:14,
command.go,867d414,Albert Nigmatzianov,Initialize help flag in initHelpCmd  Fix #302,1228,1228,,,1,2017-04-26 19:24:14,
command.go,867d414,Albert Nigmatzianov,Initialize help flag in initHelpCmd  Fix #302,1225,1226,,,1,2017-04-26 19:24:14,
command.go,0c72800,Souma,Customizable error message prefix (#2023),1131,1131,,,1,2023-09-08 17:29:06,
command.go,10cf7be,Marc Khouzam,"Check for group presence after full initialization (#1839)  Fixes #1831  By moving the check for help group existence to ""ExecuteC()"" we no longer need groups to be added before AddCommand() is called.  This provides more flexibility to developers and works better with the use of ""init()"" for command creation.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",1203,1215,,,0,2022-10-24 15:11:57,
command.go,ae28810,Eric Paris,Fix the late init help flag,1232,1233,,,1,2015-09-01 15:31:23,
command.go,bab6d45,Eric Paris,Initialize the --help flag as late as possible  This should let users overwrite it with something custom. Like the help sub-command.,1231,1231,,,0,2015-08-30 16:10:14,
command.go,df547f5,Nir Soffer,"Fix help text for plugins  When using `CommandDisplayNameAnnotation` we want to use it instead of the command name in `--help` message or in the default help command.  With current code we get the wrong text in the --help usage text:      Flags:       -h, --help   help for kubectl-plugin  And in the long description of the default help command:      $ kubectl cobraplugin help -h     Help provides help for any command in the application.     Simply type kubectl-plugin help [path to command] for full details.  The issue was hidden since the test checked only the Usage line.  Fixed by extracting a displayName() function and use it when creating FlagSet and when formatting the default help flag usage and the help command long description.  Enhance the TestPlugin to check all the lines including the command name.",1224,1224,Yann Soubeyrand,93d1913,1,2023-12-18 00:58:57,2022-10-03 14:52:50
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1234,1248,,,0,2017-12-01 21:37:16,
command.go,95f2f73,Dave Henderson,Add short version flag -v when not otherwise set (#996)  Signed-off-by: Dave Henderson <dhenderson@gmail.com>,1251,1255,,,0,2020-02-28 18:13:40,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1250,1250,,,0,2017-12-01 21:37:16,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1223,1223,Yann Soubeyrand,93d1913,1,2024-10-12 16:08:27,2022-10-03 14:52:50
command.go,8c6fa02,Albert Nigmatzianov,Fix InitDefaultHelpCmd when custom help command is set,1264,1264,,,1,2017-06-29 10:52:34,
command.go,52ae6a1,Albert Nigmatzianov,Make initHelpCmd public (#436)  Useful for solving #424,1260,1263,,,0,2017-05-20 17:23:33,
command.go,b1ec2ce,Nick Miyake,Add support for --version flag (#584),1257,1259,,,0,2017-12-01 21:37:16,
command.go,52ae6a1,Albert Nigmatzianov,Make initHelpCmd public (#436)  Useful for solving #424,1265,1266,,,0,2017-05-20 17:23:33,
command.go,8c6fa02,Albert Nigmatzianov,Fix InitDefaultHelpCmd when custom help command is set,1268,1272,,,1,2017-06-29 10:52:34,
command.go,9b6c926,Clayton Coleman,"When no subcommands are registered, omit command help output  For a single root command with a Run method, the help output still contains 'help [command]' as a subcommand (because Help is always added). Since the only subcommand would be 'help', the help is better off omitted.  This change allows a command to be used both as a subcommand or a root command without having to define a custom help that elides the help command when no subcommands are added.  Instead, the default help command is only added when subcommands are present.",1267,1267,,,0,2014-11-12 04:43:27,
command.go,df547f5,Nir Soffer,"Fix help text for plugins  When using `CommandDisplayNameAnnotation` we want to use it instead of the command name in `--help` message or in the default help command.  With current code we get the wrong text in the --help usage text:      Flags:       -h, --help   help for kubectl-plugin  And in the long description of the default help command:      $ kubectl cobraplugin help -h     Help provides help for any command in the application.     Simply type kubectl-plugin help [path to command] for full details.  The issue was hidden since the test checked only the Usage line.  Fixed by extracting a displayName() function and use it when creating FlagSet and when formatting the default help flag usage and the help command long description.  Enhance the TestPlugin to check all the lines including the command name.",1227,1227,,,1,2023-12-18 00:58:57,
command.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1274,1275,Marc Khouzam,ab5cadc,0,2025-02-09 16:06:07,2025-02-06 15:25:44
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1229,1230,,,0,2025-01-27 14:43:43,
command.go,8cb30f9,ccoVeille,"feat: add CompletionWithDesc helper (#2231)  The code has also been refactored to use a type alias for completion and a completion helper  Using a type alias is a non-breaking change and it makes the code more readable and easier to understand.  Signed-off-by: ccoVeille <3875889+ccoVeille@users.noreply.github.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1287,1287,Marc Khouzam,ab5cadc,0,2025-02-09 16:06:07,2025-02-06 15:25:44
command.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",1276,1286,,,0,2020-06-16 20:49:26,
command.go,0431872,Marc Khouzam,"Add completion for help command (#1136)  * Don't exclude 'help' from bash completions  Fixes #1000.  * Provide completion for the help command  1- Show 'help' as a possible completion 2- Provide completions for the help command itself  Signed-off-by: Marc Khouzam <marc.khouzam@montreal.ca>  Co-authored-by: Zaven Muradyan <voithos@google.com>",1288,1292,,,0,2020-06-16 20:49:26,
command.go,212ea40,Marc Khouzam,"Include --help and --version flag in completion (#1813)  Fixes #1786  The --help, -h, --version and -v flags are normally added when the `execute()` function is called on a command.  When doing completion we don't call `execute()` so we need to add these flags explicitly to the command being completed.  Also, we disable all further completions if the 'help' or 'version' flags are present on the command-line.  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com>",1256,1256,,,0,2022-10-04 22:41:30,
command.go,8c6fa02,Albert Nigmatzianov,Fix InitDefaultHelpCmd when custom help command is set,1298,1298,,,1,2017-06-29 10:52:34,
command.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1297,1297,,,1,2021-02-08 00:08:50,
command.go,1995054,Fraser Waters,Flow context to command in SetHelpFunc (#2241)  Fixes https://github.com/spf13/cobra/issues/2240,1299,1303,Marc Khouzam,40b5bc1,0,2025-02-21 12:46:14,2025-02-16 23:42:04
command.go,8c6fa02,Albert Nigmatzianov,Fix InitDefaultHelpCmd when custom help command is set,1293,1296,,,1,2017-06-29 10:52:34,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1249,1249,,,1,2024-10-12 16:08:27,
command.go,8c6fa02,Albert Nigmatzianov,Fix InitDefaultHelpCmd when custom help command is set,1307,1308,,,1,2017-06-29 10:52:34,
command.go,652c755,Unai Martinez-Corral,Use golangci-lint (#1044)  Use golangci-lint. Repair warnings and errors resulting from linting.,1306,1306,,,1,2021-02-08 00:08:50,
command.go,8c6fa02,Albert Nigmatzianov,Fix InitDefaultHelpCmd when custom help command is set,1310,1310,,,1,2017-06-29 10:52:34,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1311,1311,,,0,2013-11-01 22:36:24,
command.go,7be4bed,Tamir Duberstein,"remove help command before adding it (#399)  This fixes an issue where each Execute call grows the number of times `help` appears in the help command by 1.",1312,1312,,,1,2017-03-14 17:12:53,
command.go,62fb674,spf13,Organize the files a bit better,1317,1317,,,0,2013-09-24 16:47:29,
command.go,0dacccf,Diego Becciolini,Improve consistency of flags when using SetGlobalNormalizationFunc (#522)  Fix #521,1318,1318,,,1,2017-10-02 10:00:25,
command.go,79bdde5,spf13,Refactored code to eliminate need for a commander. Much simpler interface now.,1313,1315,,,0,2013-11-01 22:36:24,
command.go,9b6c926,Clayton Coleman,"When no subcommands are registered, omit command help output  For a single root command with a Run method, the help output still contains 'help [command]' as a subcommand (because Help is always added). Since the only subcommand would be 'help', the help is better off omitted.  This change allows a command to be used both as a subcommand or a root command without having to define a custom help that elides the help command when no subcommands are added.  Instead, the default help command is only added when subcommands are present.",1320,1320,,,0,2014-11-12 04:43:27,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1273,1273,Marc Khouzam,212ea40,1,2024-10-12 16:08:27,2022-10-04 22:41:30
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1309,1309,,,0,2022-10-10 20:59:11,
command.go,62fb674,spf13,Organize the files a bit better,1319,1319,,,0,2013-09-24 16:47:29,
command.go,7039e1f,Francis Nickels III,Add '--version' flag to Help output (#1707),1304,1305,,,0,2022-09-30 18:26:05,
command.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1316,1316,,,0,2017-11-09 06:56:43,
command.go,3d89ed4,Albert Nigmatzianov,"Add only missing persistent flags of parents in mergePersistentFlags  As persistent flags of parents can only be added, we don't need to always check them every time, so make updateParentsPflags return only added flags.  Performance improvement: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     5595          4412          -21.14% BenchmarkLocalFlags-4         3235          2667          -17.56%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     39             24             -38.46% BenchmarkLocalFlags-4         21             15             -28.57%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     1000          600           -40.00% BenchmarkLocalFlags-4         544           408           -25.00%",1321,1321,,,0,2017-04-20 13:38:50,
command.go,62fb674,spf13,Organize the files a bit better,1322,1323,,,0,2013-09-24 16:47:29,
command.go,5da9888,bogem,Edit documentation,1324,1324,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1332,1332,,,0,2013-09-24 16:47:29,
command.go,2e73a96,awilliams,"Right aligns ""Use"" and ""Additional help topics"" even if they are longer than the min padding",1348,1356,,,0,2014-01-17 12:36:57,
command.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1333,1333,,,0,2016-06-15 14:27:34,
command.go,e1e66f7,Ahsanul Haque,Code commentary,1341,1341,,,0,2014-12-19 04:10:25,
command.go,62fb674,spf13,Organize the files a bit better,1342,1347,,,0,2013-09-24 16:47:29,
command.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1325,1331,,,0,2016-06-15 14:27:34,
command.go,62fb674,spf13,Organize the files a bit better,1338,1340,,,0,2013-09-24 16:47:29,
command.go,77530f5,Fabiano Franz,Help command must use Stdout instead of Stderr,1334,1334,,,0,2016-07-06 15:51:57,
command.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1335,1337,,,0,2016-06-15 14:27:34,
command.go,62fb674,spf13,Organize the files a bit better,1365,1365,,,0,2013-09-24 16:47:29,
command.go,d910a04,Anastasis Andronidis,Add Global Normalization Function  [close #110],1362,1364,,,0,2015-05-19 14:23:16,
command.go,a16cb24,Masahiro Sano,help displays command names instead of usage in Available Commands,1357,1360,,,0,2015-02-17 18:50:09,
command.go,62fb674,spf13,Organize the files a bit better,1367,1369,,,0,2013-09-24 16:47:29,
command.go,d95d1b8,Nan Xiao,Update command.go  Fix typo in AddCommand method.,1361,1361,,,1,2015-12-16 08:14:10,
command.go,ab97c7a,Andrey Kurilin,"Sort commands by their names  The slice of commands are sorted now automatically while Commands are called. To turn off this feature, EnableCommandSorting variable is added.",1366,1366,,,0,2016-06-15 14:27:34,
command.go,6096009,Kevin Peng,Fixed Small Comment Typo  small error in function description,1400,1400,,,1,2016-05-17 17:17:01,
command.go,5da9888,bogem,Edit documentation,1434,1434,,,0,2016-08-30 17:14:27,
command.go,f479c92,Étienne Vallette d'Osia,"Add Command's RemoveCommand method  This method removes children commands of an existing command.  This allows to build CLI clients that can be extended by 3rd party tools, for instance by adding commands _and replacing the “version” command_.  For now the 1st defined command will be executed, so it is not possible to override an existing command. But anyway, deleting old command then adding a new one is the ultimate way to be certain there is no confusion.",1401,1433,,,0,2015-03-13 02:44:11,
command.go,62fb674,spf13,Organize the files a bit better,1435,1435,,,0,2013-09-24 16:47:29,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1441,1441,,,0,2017-05-08 12:22:04,
command.go,20217d8,Fabiano Franz,Expose OutOrStdout and OutOrStderr and don't make assumptions if output is not set,1436,1436,,,0,2016-07-15 20:18:47,
command.go,62fb674,spf13,Organize the files a bit better,1440,1440,,,0,2013-09-24 16:47:29,
command.go,5da9888,bogem,Edit documentation,1439,1439,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1437,1438,,,0,2013-09-24 16:47:29,
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1370,1384,,,0,2022-10-10 20:59:11,
command.go,62fb674,spf13,Organize the files a bit better,1445,1445,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,1442,1443,,,0,2013-09-24 16:47:29,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1446,1446,,,0,2017-05-08 12:22:04,
command.go,62fb674,spf13,Organize the files a bit better,1447,1448,,,0,2013-09-24 16:47:29,
command.go,5da9888,bogem,Edit documentation,1444,1444,,,0,2016-08-30 17:14:27,
command.go,2169adb,aawsome,"Add groups for commands in help (#1003)  * Add tests for grouping commands * Adds Additional Command section in help  Signed-off-by: Marc Khouzam <marc.khouzam@gmail.com> Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1386,1399,,,0,2022-10-10 20:59:11,
command.go,618bc00,Juan Leni,Allow for explicit output to err/stderr,1449,1455,,,0,2019-06-07 14:48:23,
command.go,40d34bc,Alessio Treglia,"Fix stderr printing functions (#894)  * Fix stderr printing functions  Follow-up of #822  * Errors go to stderr as per POSIX  * use PrintErrf() instead of extra call to Sprintf()  * Error messages should always be printed to os.Stderr.  * add test case for Print* redirection  Thanks: @bukowa for the patch.",1456,1456,,,1,2020-10-01 15:28:00,
command.go,62fb674,spf13,Organize the files a bit better,1465,1465,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,1468,1468,,,0,2013-09-24 16:47:29,
command.go,40d34bc,Alessio Treglia,"Fix stderr printing functions (#894)  * Fix stderr printing functions  Follow-up of #822  * Errors go to stderr as per POSIX  * use PrintErrf() instead of extra call to Sprintf()  * Error messages should always be printed to os.Stderr.  * add test case for Print* redirection  Thanks: @bukowa for the patch.",1461,1461,,,1,2020-10-01 15:28:00,
command.go,618bc00,Juan Leni,Allow for explicit output to err/stderr,1462,1463,,,0,2019-06-07 14:48:23,
command.go,e1e66f7,Ahsanul Haque,Code commentary,1464,1464,,,0,2014-12-19 04:10:25,
command.go,618bc00,Juan Leni,Allow for explicit output to err/stderr,1457,1460,,,0,2019-06-07 14:48:23,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1466,1467,,,0,2017-05-08 12:22:04,
command.go,bf11ab6,Yash Ladha,"fix: func name in doc strings (#1885)  Corrected the function name at the start of doc strings, as per the convention outlined in official go documentation: https://go.dev/blog/godoc",1385,1385,,,1,2022-12-25 20:08:39,
command.go,5da9888,bogem,Edit documentation,1481,1481,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1482,1482,,,0,2013-09-24 16:47:29,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1478,1478,,,0,2017-05-08 12:22:04,
command.go,62fb674,spf13,Organize the files a bit better,1479,1480,,,0,2013-09-24 16:47:29,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1483,1483,,,0,2017-05-08 12:22:04,
command.go,62fb674,spf13,Organize the files a bit better,1485,1485,,,0,2013-09-24 16:47:29,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1487,1487,,,0,2017-05-08 12:22:04,
command.go,df547f5,Nir Soffer,"Fix help text for plugins  When using `CommandDisplayNameAnnotation` we want to use it instead of the command name in `--help` message or in the default help command.  With current code we get the wrong text in the --help usage text:      Flags:       -h, --help   help for kubectl-plugin  And in the long description of the default help command:      $ kubectl cobraplugin help -h     Help provides help for any command in the application.     Simply type kubectl-plugin help [path to command] for full details.  The issue was hidden since the test checked only the Usage line.  Fixed by extracting a displayName() function and use it when creating FlagSet and when formatting the default help flag usage and the help command long description.  Enhance the TestPlugin to check all the lines including the command name.",1470,1471,,,1,2023-12-18 00:58:57,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1489,1489,,,0,2017-05-08 12:22:04,
command.go,a73b9c3,Nir Soffer,"Fix help text for runnable plugin command  When creating a plugin without sub commands, the help text included the command name (kubectl-plugin) instead of the display name (kubectl plugin):      Usage:       kubectl-plugin [flags]  The issue is that the usage line for this case does not use the command path but the raw `Use` string, and this case was not tested.  Add a test for this case and fix UsageLine() to replace the command name with the display name.  Tested using https://github.com/nirs/kubernetes/tree/sample-cli-plugin-help",1486,1486,,,1,2023-12-18 00:58:57,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1484,1484,,,1,2024-10-12 16:08:27,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1472,1474,,,1,2024-10-12 16:08:27,
command.go,34ceca5,Daniel Nephin,Disable flags in UseLine (#552)  Signed-off-by: Daniel Nephin <dnephin@gmail.com>,1490,1492,,,0,2017-11-19 07:58:54,
command.go,62fb674,spf13,Organize the files a bit better,1495,1495,,,0,2013-09-24 16:47:29,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1493,1494,,,0,2017-05-08 12:22:04,
command.go,4d2c4af,Albert Nigmatzianov,"Improve template mechanisms  * Delete Eq, Gt, appendIfNotPresent and trim functions  * Add ""[flags]"" in UseLine  * Simplify other functions  * Simplify templates  Minor performance improvement. Benchmark for command with 4 flags and one child command: benchmark                   old ns/op     new ns/op     delta BenchmarkCmdUsageFunc-4     335860        319290        -4.93%  benchmark                   old allocs     new allocs     delta BenchmarkCmdUsageFunc-4     562            543            -3.38%  benchmark                   old bytes     new bytes     delta BenchmarkCmdUsageFunc-4     21623         21037         -2.71%",1496,1496,,,0,2017-05-08 12:22:04,
command.go,62fb674,spf13,Organize the files a bit better,1497,1498,,,0,2013-09-24 16:47:29,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1499,1499,,,1,2017-01-24 16:30:45,
command.go,5da9888,bogem,Edit documentation,1500,1500,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1513,1528,,,0,2013-09-24 16:47:29,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1511,1512,,,1,2017-04-20 13:38:50,
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1529,1529,,,1,2017-04-27 13:10:57,
command.go,62fb674,spf13,Organize the files a bit better,1501,1510,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,1530,1541,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,1546,1546,,,0,2013-09-24 16:47:29,
command.go,890302a,Nir Soffer,"Support usage as plugin for tools like kubectl (#2018)  In this case the executable is `kubectl-plugin`, but we run it as:      kubectl plugin  And the help text should reflect the actual usage of the command.  To create a plugin, add the cobra.CommandDisplayNameAnnotation:      rootCmd := &cobra.Command{         Use: ""plugin"",         Annotations: map[string]string{             cobra.CommandDisplayNameAnnotation: ""kubectl plugin"",         }     }  Internally this change modifies CommandPath() for the root command to return the command display name instead of the command name. This is used for error messages, help text generation, and completions.  CommandPath() is expected to have spaces and code using it already handle spaces (e.g replacing with _), so hopefully this does not break anything.  Fixes: #2017  Signed-off-by: Nir Soffer <nsoffer@redhat.com>",1475,1477,,,1,2023-11-02 12:15:26,
command.go,40f1880,Albert Nigmatzianov,Delete name field from Command (#547)  Discussion: https://github.com/spf13/cobra/pull/422#discussion_r143918343,1547,1547,,,0,2017-10-11 14:15:37,
command.go,40f1880,Albert Nigmatzianov,Delete name field from Command (#547)  Discussion: https://github.com/spf13/cobra/pull/422#discussion_r143918343,1542,1545,,,0,2017-10-11 14:15:37,
command.go,62fb674,spf13,Organize the files a bit better,1548,1549,,,0,2013-09-24 16:47:29,
command.go,a0bd6c1,Ian Walter,Fixing golint warnings  * Moving final return outside of if-else * Removing type declarations that Go can infer from values * Cleaning up some existing comments * Changing snake_case variables to camelCase,1550,1550,,,0,2016-03-31 13:53:34,
command.go,8816572,Sam Ghods,Replace prefix matching with aliases,1554,1559,,,0,2014-10-07 19:22:14,
command.go,8816572,Sam Ghods,Replace prefix matching with aliases,1551,1552,,,0,2014-10-07 19:22:14,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",1569,1572,,,1,2017-10-07 21:29:11,
command.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",1573,1573,,,1,2018-02-04 16:58:53,
command.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",1560,1568,,,1,2018-02-04 16:58:53,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",1574,1577,,,1,2017-10-07 21:29:11,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1590,1590,,,1,2017-01-24 16:30:45,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1469,1469,,,1,2024-10-12 16:08:27,
command.go,8816572,Sam Ghods,Replace prefix matching with aliases,1586,1589,,,0,2014-10-07 19:22:14,
command.go,eb58983,Tim Peoples,"Add `CalledAs` method to cobra.Command (w/ tests) (#567)  * Add `CalledAs` method to Command (w/ tests)  The `CalledAs` method returns the name of the command or alias that invoked the command -- as long as the command was actually invoked. Otherwise, it returns the empty string.  The opens up possibilies for commands to behave differently based on which alias invoked the command (in the same vein as Linux programs which adjust their behavior based on the value of argv[0]).  * Fixed formatting",1578,1578,,,1,2018-02-04 16:58:53,
command.go,bf480fe,Eric Paris,"New ""example"" section of commands  We have a long and short description.  This adds an ""Example"" section. Which can used to create better docs than putting it all in Long.",1591,1594,,,0,2015-02-17 18:50:52,
command.go,83b1f03,Daniel Nephin,"Add a TraverseChildren option to allow for flags on each command in the hierarchy (#299)  Fix #277  Fix #467",1579,1585,,,1,2017-10-07 21:29:11,
command.go,5da9888,bogem,Edit documentation,1595,1595,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1598,1599,,,0,2013-09-24 16:47:29,
command.go,5da9888,bogem,Edit documentation,1600,1600,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1601,1604,,,0,2013-09-24 16:47:29,
command.go,a73b9c3,Nir Soffer,"Fix help text for runnable plugin command  When creating a plugin without sub commands, the help text included the command name (kubectl-plugin) instead of the display name (kubectl plugin):      Usage:       kubectl-plugin [flags]  The issue is that the usage line for this case does not use the command path but the raw `Use` string, and this case was not tested.  Add a test for this case and fix UsageLine() to replace the command name with the display name.  Tested using https://github.com/nirs/kubernetes/tree/sample-cli-plugin-help",1488,1488,,,1,2023-12-18 00:58:57,
command.go,62fb674,spf13,Organize the files a bit better,1596,1596,,,0,2013-09-24 16:47:29,
command.go,823f689,Alexander Guy,RunE commands should be considered runnable.,1597,1597,,,0,2015-09-02 17:59:31,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1605,1605,,,0,2015-09-08 23:01:13,
command.go,5da9888,bogem,Edit documentation,1606,1606,,,0,2016-08-30 17:14:27,
command.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",1553,1553,,,0,2022-09-11 12:25:22,
command.go,3eac143,Eric Paris,Update IsAvailableCommand checks  This slightly changes IsAvailableCommand in that a non-runnable command with a runnable subcommand is now 'Available'  We also use IsAvailableCommand in the rest of the codebase instead of half kinda sorta doing it incorrectly other places.,1608,1610,,,0,2015-09-09 02:48:12,
command.go,3eac143,Eric Paris,Update IsAvailableCommand checks  This slightly changes IsAvailableCommand in that a non-runnable command with a runnable subcommand is now 'Available'  We also use IsAvailableCommand in the rest of the codebase instead of half kinda sorta doing it incorrectly other places.,1616,1620,,,0,2015-09-09 02:48:12,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1607,1607,,,0,2015-09-08 23:01:13,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1611,1611,,,0,2015-09-08 23:01:13,
command.go,24b4b01,Eric Paris,"Do not cound ""help"" as ""Available""",1612,1615,,,0,2015-09-11 22:25:28,
command.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,1623,1628,,,0,2017-03-09 15:37:15,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1629,1630,,,0,2015-09-08 23:01:13,
command.go,f453e87,Eric Paris,"Update help template  The template had gotten out of control. It was basically unparsable. This does a little more work in functions and a little less in the template. Overall it should be basically the same. It might output the 'additional help topics' in a couple of fewer places, but I doubt people complain too much...",1635,1635,,,0,2015-06-30 00:06:04,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1633,1634,,,0,2015-09-08 23:01:13,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1621,1622,,,0,2015-09-08 23:01:13,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1631,1632,,,1,2015-03-20 18:55:05,
command.go,f453e87,Eric Paris,"Update help template  The template had gotten out of control. It was basically unparsable. This does a little more work in functions and a little less in the template. Overall it should be basically the same. It might output the 'additional help topics' in a couple of fewer places, but I doubt people complain too much...",1637,1637,,,0,2015-06-30 00:06:04,
command.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,1636,1636,,,0,2017-03-09 15:37:15,
command.go,6e17f4e,bogem,Fix typos,1645,1645,,,1,2016-08-20 07:04:53,
command.go,f453e87,Eric Paris,"Update help template  The template had gotten out of control. It was basically unparsable. This does a little more work in functions and a little less in the template. Overall it should be basically the same. It might output the 'additional help topics' in a couple of fewer places, but I doubt people complain too much...",1642,1642,,,0,2015-06-30 00:06:04,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1638,1639,,,1,2015-03-20 18:55:05,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1643,1644,,,1,2015-03-20 18:55:05,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1646,1646,,,0,2015-09-08 23:01:13,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1640,1641,,,0,2015-09-08 23:01:13,
command.go,5da9888,bogem,Edit documentation,1647,1647,,,0,2016-08-30 17:14:27,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1648,1648,,,1,2015-03-20 18:55:05,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1650,1650,,,1,2015-03-20 18:55:05,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1649,1649,,,0,2015-09-08 23:01:13,
command.go,0960ff7,Albert Nigmatzianov,Rename IsHelpCommand to IsAdditionalHelpTopicCommand (#398)  Fixes #393,1651,1651,,,0,2017-03-09 15:37:15,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1652,1654,,,1,2015-03-20 18:55:05,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1657,1659,,,1,2015-03-20 18:55:05,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1655,1656,,,0,2015-09-08 23:01:13,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1660,1660,,,0,2015-09-08 23:01:13,
command.go,5da9888,bogem,Edit documentation,1661,1661,,,0,2016-08-30 17:14:27,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1662,1662,,,0,2015-09-08 23:01:13,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1665,1665,,,1,2015-03-20 18:55:05,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1663,1664,,,0,2015-09-08 23:01:13,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1666,1666,,,0,2015-09-08 23:01:13,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1667,1669,,,1,2015-03-20 18:55:05,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1670,1670,,,0,2015-09-08 23:01:13,
command.go,f634327,Pavol Loffay,Fix typo (#573),1671,1671,,,1,2017-11-08 10:47:54,
command.go,6d2f1d2,Steve Domino,"Ability to hide commands from usage/help text  Added the ability to have hidden commands that cobra will still run as intended, however they won't show up in any usage/help text  adding internal field to command  private is a better name  hiding private commands in default help/usage  opting for 'hidden' over 'private'  updating all 'help command' checks to exclude hidden commands  updating how commands are displayed in usage/help text by updating/adding some methods. added tests for hidden/deprecated commands  making command hidden when testing hidden command execution  test now leverage the included suite and are much less custom. also removed deprecation tests, once I discovered them in cobra_test.go  updating hidden command test to be more reliable  removing unnecessary () when checking len(c.Deprecated)  updating command comments to be godoc friendly",1672,1672,,,0,2015-09-08 23:01:13,
command.go,fd10548,Eric Paris,"Fix additional help topics template  The additional help topics were really hard to ever get to show.  The required conditionals were difficult to meet and did not seem to really be logical.  Problems I see: 1) the top level command could never have additional topics. 2) you must have at least one sibling command AND one subcommand 3) we had the AND above, but then test both conditionals a second time 4) if the sub command was runnable we wouldn't print anything 5) if the sibling commands were not runnable we wouldn't print anything 4+5) it's possible that we printed ""Additional help topics:"" with nothing following it 6) We always printed ourselves as a sibling in the additional info  Whew, I think I fixed all of those!  Again, using https://github.com/eparis/readable-golang-template I'm actually able to visualize the template and see this craziness.  The conditionals BEFORE this change:  {{if .HasParent}}         {{if and (gt .Commands 0) (gt .Parent.Commands 1) }}                 Additional help topics:                 {{if gt .Commands 0 }}                         {{range .Commands}}                                 {{if not .Runnable}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}                 {{if gt .Parent.Commands 1 }}                         {{range .Parent.Commands}}                                 {{if .Runnable}}                                         {{if not (eq .Name $cmd.Name) }}                                         {{end}}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}  The conditionals AFTER this change:  {{if or (.HasHelpSubCommands) (.HasRunnableSiblings)}}         Additional help topics:         {{if .HasHelpSubCommands}}                 {{range .Commands}}                         {{if not .Runnable}}                                 {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                         {{end}}                 {{end}}         {{end}}         {{if .HasRunnableSiblings }}                 {{range .Parent.Commands}}                         {{if .Runnable}}                                 {{if not (eq .Name $cmd.Name) }}                                         {{rpad .CommandPath .CommandPathPadding}} {{.Short}}                                 {{end}}                         {{end}}                 {{end}}         {{end}} {{end}}",1673,1675,,,1,2015-03-20 18:55:05,
command.go,3a7eb14,Shamus Taylor,fix grammatical error in command.go (#626),1681,1681,,,1,2018-02-02 06:04:56,
command.go,5da9888,bogem,Edit documentation,1676,1676,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1677,1680,,,0,2013-09-24 16:47:29,
command.go,d910a04,Anastasis Andronidis,Add Global Normalization Function  [close #110],1682,1685,,,0,2015-05-19 14:23:16,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1686,1686,,,1,2017-01-24 16:30:45,
command.go,5da9888,bogem,Edit documentation,1687,1687,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1688,1689,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,1697,1699,,,0,2013-09-24 16:47:29,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1696,1696,,,1,2017-04-20 13:38:50,
command.go,62fb674,spf13,Organize the files a bit better,1695,1695,,,0,2013-09-24 16:47:29,
command.go,5da9888,bogem,Edit documentation,1700,1700,,,0,2016-08-30 17:14:27,
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1691,1694,,,1,2017-04-27 13:10:57,
command.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',1702,1704,,,0,2016-06-03 16:44:58,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1719,1719,,,1,2017-04-20 13:38:50,
command.go,efb045e,fabianofranz,Restores the ability to fetch local only flags,1716,1718,,,0,2015-02-11 22:12:48,
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1721,1724,,,1,2017-04-27 13:10:57,
command.go,7bf964e,Eric Paris,Do not show subcommands in bash completion if a local flag was specified  If a user specifies a flag to a command which doesn't make sense to a subcommand do not show subcommands as a suggestion.  This also changes things to show both 'required flags' and 'commands' instead of only 'required flags',1706,1713,,,0,2016-06-03 16:44:58,
command.go,5da9888,bogem,Edit documentation,1714,1714,,,0,2016-08-30 17:14:27,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1705,1705,Nir Soffer,a73b9c3,1,2024-10-12 16:08:27,2023-12-18 00:58:57
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1725,1725,,,1,2017-04-20 13:38:50,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1730,1731,,,1,2017-04-20 13:38:50,
command.go,0dacccf,Diego Becciolini,Improve consistency of flags when using SetGlobalNormalizationFunc (#522)  Fix #521,1727,1729,,,1,2017-10-02 10:00:25,
command.go,e135867,Albert Nigmatzianov,"Make parentsPflags more flexible  updateParentsPflags returns nothing, so you can use it independent of mergePersistentFlags. A little performance impact.",1726,1726,,,0,2017-04-20 13:38:50,
command.go,e135867,Albert Nigmatzianov,"Make parentsPflags more flexible  updateParentsPflags returns nothing, so you can use it independent of mergePersistentFlags. A little performance impact.",1737,1737,,,0,2017-04-20 13:38:50,
command.go,e8bd799,Eric Paris,"Display pflag.CommandLine flags as if they were declared on the parent  ```go package main  import ( 	""github.com/spf13/cobra"" 	""github.com/spf13/pflag"" )  func main() { 	cmd := &cobra.Command{ 		Use:   ""min"", 		Short: ""minimal command"", 		Run:   func(_ *cobra.Command, _ []string) {}, 	}  	pflag.String(""oncmdline"", ""oncmdline"", ""oncmdline"") 	cmd.Execute() } ```  Is a minimal cobra program.  When --help is displayed without this patch you only get:  But with the patch --oncmdline is shows under flags.",1736,1736,,,1,2015-08-17 05:31:08,
command.go,22b6179,Brian Pursley,"fix: show flags that shadow parent persistent flag in child help (#1776)  This fixes a bug where a child flag that shadows (has the same name as) a parent persistent flag would not be shown in the child command's help output and the parent flag would be shown instead under the global flags section.  This change makes the help output consistent with the observed behavior during execution, where the child flag is the one that is actually used.",1732,1733,,,1,2022-08-28 16:46:39,
command.go,efb045e,fabianofranz,Restores the ability to fetch local only flags,1740,1741,,,0,2015-02-11 22:12:48,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1738,1739,,,1,2017-04-20 13:38:50,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1690,1690,,,1,2024-10-12 16:08:27,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1734,1735,,,1,2017-04-20 13:38:50,
command.go,4fb0a66,Dmytro Milinevskyi,flags: clarify documentation that LocalFlags related function do not modify the state (#2064),1715,1715,,,0,2024-01-06 21:49:13,
command.go,5755ecf,umarcor,"[TrivialPatches] Typos in README.md, fix and update CI, update projects list... (#840)  * update Example in README.md (#769)  * specify the color as the required arg (#777)  * command: fix typo in docstring of InheritedFlags (#779)  * add istio to the list of projects built with Cobra (#786)  * remove redundant 'else' (#806)  * add mattermost-server as a project built with Cobra (#824)  * update README.md (#826)  Fix the comment: consistent with others  * add uber/prototool as a project built with Cobra (#831)  * fix(ci): use go vet, update to Go 1.12, update shellcheck to v0.4.6 (#832)  * add go.mod and go.sum (#833)  * chore(travis): move 'diff' job to separate stage in Travis (#839)  * chore(travis): use language configuration list instead of explicit entries in matrix.include (#839)  * chore(travis): update shellcheck-docker to v0.6.0 (#839)  * update(README.md): separate projects by commas, instead of using a list  * chore: update viper to v1.3.2 and go-md2man to v1.0.10  * fix: convert CRLF to LF when comparing files  * use kyoh86/richgo to provide colored test outputs",1742,1742,,,1,2019-03-20 21:21:26,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1747,1747,,,1,2017-04-20 13:38:50,
command.go,4fb0a66,Dmytro Milinevskyi,flags: clarify documentation that LocalFlags related function do not modify the state (#2064),1743,1743,Ville Skyttä,3d8ac43,0,2024-01-06 21:49:13,2023-11-23 17:24:33
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1749,1752,,,1,2017-04-27 13:10:57,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1720,1720,,,1,2024-10-12 16:08:27,
command.go,b96dd75,Eric Paris,new InheritedFlags() command to tell all flags which persisted from a parent,1744,1746,,,0,2015-02-17 18:52:53,
command.go,5c91469,Jeff Lowdermilk,"Explicitly support local flags overwriting persistent/inherited flags  The current (desired) behavior when a Command specifies a flag that has the same name as a persistent/inherited flag, is that the local definition takes precedence. This change updates the various Flag subset functions to respect that behavior: * LocalFlags: now returns only the set of flags and persistent flags   attached to the Command itself. * InheritedFlags: now returns only the set of persistent flags inherited   from the Command's parent(s), excluding any that are overwritten by a   local flag. * NonInheritedFlags: changed to an alias of LocalFlags. * AllPersistentFlags: removed as not very useful; it returned the set   of all persistent flags attached to the Command and its parent(s).  Default UsageTemplate updated to use LocalFlags and InheritedFlags",1754,1754,,,0,2015-03-12 23:41:00,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1753,1753,,,1,2017-04-20 13:38:50,
command.go,4fb0a66,Dmytro Milinevskyi,flags: clarify documentation that LocalFlags related function do not modify the state (#2064),1701,1701,,,0,2024-01-06 21:49:13,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1764,1764,,,1,2017-04-20 13:38:50,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1755,1755,,,1,2017-04-20 13:38:50,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1760,1762,,,1,2017-04-20 13:38:50,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1765,1765,,,1,2017-04-20 13:38:50,
command.go,0dacccf,Diego Becciolini,Improve consistency of flags when using SetGlobalNormalizationFunc (#522)  Fix #521,1756,1759,,,1,2017-10-02 10:00:25,
command.go,b96dd75,Eric Paris,new InheritedFlags() command to tell all flags which persisted from a parent,1766,1767,,,0,2015-02-17 18:52:53,
command.go,5c91469,Jeff Lowdermilk,"Explicitly support local flags overwriting persistent/inherited flags  The current (desired) behavior when a Command specifies a flag that has the same name as a persistent/inherited flag, is that the local definition takes precedence. This change updates the various Flag subset functions to respect that behavior: * LocalFlags: now returns only the set of flags and persistent flags   attached to the Command itself. * InheritedFlags: now returns only the set of persistent flags inherited   from the Command's parent(s), excluding any that are overwritten by a   local flag. * NonInheritedFlags: changed to an alias of LocalFlags. * AllPersistentFlags: removed as not very useful; it returned the set   of all persistent flags attached to the Command and its parent(s).  Default UsageTemplate updated to use LocalFlags and InheritedFlags",1763,1763,,,0,2015-03-12 23:41:00,
command.go,5da9888,bogem,Edit documentation,1774,1774,,,0,2016-08-30 17:14:27,
command.go,5da9888,bogem,Edit documentation,1768,1768,,,0,2016-08-30 17:14:27,
command.go,f8e1ec5,Eric Paris,new NonInheritedFlags() which give all flags which were not persisted from a parent command,1770,1770,,,0,2015-02-17 18:52:53,
command.go,f8e1ec5,Eric Paris,new NonInheritedFlags() which give all flags which were not persisted from a parent command,1772,1773,,,0,2015-02-17 18:52:53,
command.go,62fb674,spf13,Organize the files a bit better,1775,1776,,,0,2013-09-24 16:47:29,
command.go,5c91469,Jeff Lowdermilk,"Explicitly support local flags overwriting persistent/inherited flags  The current (desired) behavior when a Command specifies a flag that has the same name as a persistent/inherited flag, is that the local definition takes precedence. This change updates the various Flag subset functions to respect that behavior: * LocalFlags: now returns only the set of flags and persistent flags   attached to the Command itself. * InheritedFlags: now returns only the set of persistent flags inherited   from the Command's parent(s), excluding any that are overwritten by a   local flag. * NonInheritedFlags: changed to an alias of LocalFlags. * AllPersistentFlags: removed as not very useful; it returned the set   of all persistent flags attached to the Command and its parent(s).  Default UsageTemplate updated to use LocalFlags and InheritedFlags",1771,1771,,,0,2015-03-12 23:41:00,
command.go,d6a4305,Albert Nigmatzianov,Edit ResetFlags and ResetCommands descriptions,1786,1786,,,0,2017-11-09 06:56:43,
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1778,1781,,,1,2017-04-27 13:10:57,
command.go,62fb674,spf13,Organize the files a bit better,1782,1785,,,0,2013-09-24 16:47:29,
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1788,1789,,,1,2017-04-27 13:10:57,
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1791,1791,,,1,2017-04-27 13:10:57,
command.go,62fb674,spf13,Organize the files a bit better,1787,1787,,,0,2013-09-24 16:47:29,
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1793,1793,,,1,2017-04-27 13:10:57,
command.go,0dacccf,Diego Becciolini,Improve consistency of flags when using SetGlobalNormalizationFunc (#522)  Fix #521,1794,1797,,,1,2017-10-02 10:00:25,
command.go,62fb674,spf13,Organize the files a bit better,1798,1799,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,1801,1804,,,0,2013-09-24 16:47:29,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1805,1805,,,1,2017-01-24 16:30:45,
command.go,62fb674,spf13,Organize the files a bit better,1806,1809,,,0,2013-09-24 16:47:29,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1800,1800,,,1,2017-01-24 16:30:45,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1748,1748,,,1,2024-10-12 16:08:27,
command.go,4fb0a66,Dmytro Milinevskyi,flags: clarify documentation that LocalFlags related function do not modify the state (#2064),1769,1769,,,0,2024-01-06 21:49:13,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1810,1810,,,1,2017-01-24 16:30:45,
command.go,efb045e,fabianofranz,Restores the ability to fetch local only flags,1811,1814,,,0,2015-02-11 22:12:48,
command.go,5c91469,Jeff Lowdermilk,"Explicitly support local flags overwriting persistent/inherited flags  The current (desired) behavior when a Command specifies a flag that has the same name as a persistent/inherited flag, is that the local definition takes precedence. This change updates the various Flag subset functions to respect that behavior: * LocalFlags: now returns only the set of flags and persistent flags   attached to the Command itself. * InheritedFlags: now returns only the set of persistent flags inherited   from the Command's parent(s), excluding any that are overwritten by a   local flag. * NonInheritedFlags: changed to an alias of LocalFlags. * AllPersistentFlags: removed as not very useful; it returned the set   of all persistent flags attached to the Command and its parent(s).  Default UsageTemplate updated to use LocalFlags and InheritedFlags",1816,1819,,,0,2015-03-12 23:41:00,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1815,1815,,,1,2017-01-24 16:30:45,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1820,1820,,,1,2017-01-24 16:30:45,
command.go,5da9888,bogem,Edit documentation,1821,1821,,,0,2016-08-30 17:14:27,
command.go,e14e47b,John Schnake,"Issue #267: Ensure hidden flags/subcommands do not change help  If a command has one flag which is hidden, it should not, for instance, show the `Flags: ` heading.  Likewise there are other items in the help template which should respect hidden/deprecated state.",1827,1830,,,1,2016-04-27 17:33:23,
command.go,e14e47b,John Schnake,"Issue #267: Ensure hidden flags/subcommands do not change help  If a command has one flag which is hidden, it should not, for instance, show the `Flags: ` heading.  Likewise there are other items in the help template which should respect hidden/deprecated state.",1822,1825,,,1,2016-04-27 17:33:23,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1777,1777,,,1,2024-10-12 16:08:27,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1831,1831,,,1,2017-01-24 16:30:45,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1837,1837,,,1,2017-01-24 16:30:45,
command.go,0f056af,Oleg Atamanenko,"Added godocs to public methods. (#386)  * Added godocs to public methods.  * Fix gofmt formatting.",1826,1826,,,1,2017-01-24 16:30:45,
command.go,5da9888,bogem,Edit documentation,1832,1832,,,0,2016-08-30 17:14:27,
command.go,e14e47b,John Schnake,"Issue #267: Ensure hidden flags/subcommands do not change help  If a command has one flag which is hidden, it should not, for instance, show the `Flags: ` heading.  Likewise there are other items in the help template which should respect hidden/deprecated state.",1833,1836,,,1,2016-04-27 17:33:23,
command.go,e14e47b,John Schnake,"Issue #267: Ensure hidden flags/subcommands do not change help  If a command has one flag which is hidden, it should not, for instance, show the `Flags: ` heading.  Likewise there are other items in the help template which should respect hidden/deprecated state.",1839,1842,,,1,2016-04-27 17:33:23,
command.go,5da9888,bogem,Edit documentation,1838,1838,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1844,1853,,,0,2013-09-24 16:47:29,
command.go,5da9888,bogem,Edit documentation,1843,1843,,,0,2016-08-30 17:14:27,
command.go,5da9888,bogem,Edit documentation,1854,1854,,,0,2016-08-30 17:14:27,
command.go,e135867,Albert Nigmatzianov,"Make parentsPflags more flexible  updateParentsPflags returns nothing, so you can use it independent of mergePersistentFlags. A little performance impact.",1860,1862,,,0,2017-04-20 13:38:50,
command.go,62fb674,spf13,Organize the files a bit better,1863,1866,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,1855,1859,,,0,2013-09-24 16:47:29,
command.go,dc6e9ec,Mark Bates,added a flag to disable flags,1869,1871,,,0,2016-06-04 00:25:52,
command.go,5da9888,bogem,Edit documentation,1867,1867,,,0,2016-08-30 17:14:27,
command.go,99b5d83,Albert Nigmatzianov,Show messages if deprecated flags are used  Fix #463,1868,1868,,,1,2017-06-19 21:05:29,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1790,1790,,,1,2024-10-12 16:08:27,
command.go,99b5d83,Albert Nigmatzianov,Show messages if deprecated flags are used  Fix #463,1876,1876,,,1,2017-06-19 21:05:29,
command.go,99b5d83,Albert Nigmatzianov,Show messages if deprecated flags are used  Fix #463,1872,1872,,,1,2017-06-19 21:05:29,
command.go,7b2c5ac,Thomas Cyron,"Create new buffer if not present yet (#549)  Fixes a nil dereference when TraverseChildren is used with multiple subcommands.",1873,1875,,,0,2017-10-12 18:25:33,
command.go,5da9888,bogem,Edit documentation,1891,1891,,,0,2016-08-30 17:14:27,
command.go,62fb674,spf13,Organize the files a bit better,1889,1890,,,0,2013-09-24 16:47:29,
command.go,0da0687,Alexandr Burdiyan,Add support for context.Context,1879,1879,,,0,2020-02-20 06:29:50,
command.go,62fb674,spf13,Organize the files a bit better,1877,1877,,,0,2013-09-24 16:47:29,
command.go,99b5d83,Albert Nigmatzianov,Show messages if deprecated flags are used  Fix #463,1882,1888,,,1,2017-06-19 21:05:29,
command.go,4dab30c,Rajat Jindal,Add support for ignoring parse errors (#662),1880,1881,,,0,2018-03-31 12:36:20,
command.go,4dab30c,Rajat Jindal,Add support for ignoring parse errors (#662),1878,1878,,,0,2018-03-31 12:36:20,
command.go,e135867,Albert Nigmatzianov,"Make parentsPflags more flexible  updateParentsPflags returns nothing, so you can use it independent of mergePersistentFlags. A little performance impact.",1905,1905,,,0,2017-04-20 13:38:50,
command.go,efb045e,fabianofranz,Restores the ability to fetch local only flags,1892,1895,,,0,2015-02-11 22:12:48,
command.go,e135867,Albert Nigmatzianov,"Make parentsPflags more flexible  updateParentsPflags returns nothing, so you can use it independent of mergePersistentFlags. A little performance impact.",1899,1899,,,0,2017-04-20 13:38:50,
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1792,1792,,,1,2024-10-12 16:08:27,
command.go,e135867,Albert Nigmatzianov,"Make parentsPflags more flexible  updateParentsPflags returns nothing, so you can use it independent of mergePersistentFlags. A little performance impact.",1901,1901,,,0,2017-04-20 13:38:50,
command.go,3d89ed4,Albert Nigmatzianov,"Add only missing persistent flags of parents in mergePersistentFlags  As persistent flags of parents can only be added, we don't need to always check them every time, so make updateParentsPflags return only added flags.  Performance improvement: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     5595          4412          -21.14% BenchmarkLocalFlags-4         3235          2667          -17.56%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     39             24             -38.46% BenchmarkLocalFlags-4         21             15             -28.57%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     1000          600           -40.00% BenchmarkLocalFlags-4         544           408           -25.00%",1896,1898,,,0,2017-04-20 13:38:50,
command.go,3d89ed4,Albert Nigmatzianov,"Add only missing persistent flags of parents in mergePersistentFlags  As persistent flags of parents can only be added, we don't need to always check them every time, so make updateParentsPflags return only added flags.  Performance improvement: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     5595          4412          -21.14% BenchmarkLocalFlags-4         3235          2667          -17.56%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     39             24             -38.46% BenchmarkLocalFlags-4         21             15             -28.57%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     1000          600           -40.00% BenchmarkLocalFlags-4         544           408           -25.00%",1902,1904,,,0,2017-04-20 13:38:50,
command.go,7d22e77,Albert Nigmatzianov,Fix incorrect merge of pflag.CommandLine to cmd.Flags()  Fix #443,1900,1900,,,1,2017-05-12 18:22:26,
command.go,3d89ed4,Albert Nigmatzianov,"Add only missing persistent flags of parents in mergePersistentFlags  As persistent flags of parents can only be added, we don't need to always check them every time, so make updateParentsPflags return only added flags.  Performance improvement: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     5595          4412          -21.14% BenchmarkLocalFlags-4         3235          2667          -17.56%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     39             24             -38.46% BenchmarkLocalFlags-4         21             15             -28.57%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     1000          600           -40.00% BenchmarkLocalFlags-4         544           408           -25.00%",1911,1911,,,0,2017-04-20 13:38:50,
command.go,3d7bff8,Albert Nigmatzianov,"Revert ""Get rid of flagErrorBuf (#417)""  This reverts commit b655df6ce84126fe9272a3cd4d70555a3a4cfed4.  Reason for revert: duplicate errors from flag. More in #426  Fix #426",1910,1910,,,1,2017-04-27 13:10:57,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1908,1908,,,1,2017-04-20 13:38:50,
command.go,3d89ed4,Albert Nigmatzianov,"Add only missing persistent flags of parents in mergePersistentFlags  As persistent flags of parents can only be added, we don't need to always check them every time, so make updateParentsPflags return only added flags.  Performance improvement: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     5595          4412          -21.14% BenchmarkLocalFlags-4         3235          2667          -17.56%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     39             24             -38.46% BenchmarkLocalFlags-4         21             15             -28.57%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     1000          600           -40.00% BenchmarkLocalFlags-4         544           408           -25.00%",1906,1906,,,0,2017-04-20 13:38:50,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1912,1912,,,1,2017-04-20 13:38:50,
command.go,e135867,Albert Nigmatzianov,"Make parentsPflags more flexible  updateParentsPflags returns nothing, so you can use it independent of mergePersistentFlags. A little performance impact.",1907,1907,,,0,2017-04-20 13:38:50,
command.go,458d797,Albert Nigmatzianov,Add merging of CommandLine flags to Root command,1918,1919,,,0,2017-04-20 13:38:50,
command.go,e135867,Albert Nigmatzianov,"Make parentsPflags more flexible  updateParentsPflags returns nothing, so you can use it independent of mergePersistentFlags. A little performance impact.",1920,1921,,,0,2017-04-20 13:38:50,
command.go,6202b59,Albert Nigmatzianov,Refactor flags mechanisms  I think It's more obvious now to understand the inheritance of flags.  Fix #403 Fix #404  Performance improvements: benchmark                     old ns/op     new ns/op     delta BenchmarkInheritedFlags-4     6536          5595          -14.40% BenchmarkLocalFlags-4         3193          3235          +1.32%  benchmark                     old allocs     new allocs     delta BenchmarkInheritedFlags-4     49             39             -20.41% BenchmarkLocalFlags-4         23             21             -8.70%  benchmark                     old bytes     new bytes     delta BenchmarkInheritedFlags-4     2040          1000          -50.98% BenchmarkLocalFlags-4         1008          544           -46.03%,1922,1922,,,1,2017-04-20 13:38:50,
command.go,0dacccf,Diego Becciolini,Improve consistency of flags when using SetGlobalNormalizationFunc (#522)  Fix #521,1914,1917,,,1,2017-10-02 10:00:25,
command.go,62fb674,spf13,Organize the files a bit better,1923,1923,,,0,2013-09-24 16:47:29,
command.go,62fb674,spf13,Organize the files a bit better,1913,1913,,,0,2013-09-24 16:47:29,
command.go,4f9ef8c,styee,"Update command.go (#2248)  Fix spelling in the help output.  topcis -> topics",2028,2028,Fraser Waters,1995054,1,2025-03-07 14:53:22,2025-02-21 12:46:14
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",2029,2072,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,d689184,Yuval Goldberg,"Support for case-insensitive command names (#1802)  Add a global `EnableCaseInsensitive` variable to allow case-insensitive command names.  The variable supports commands names and aliases globally.  Resolves #1382",1924,1934,,,0,2022-09-11 12:25:22,
command.go,611e16c,Alessandro Arzilli,"Allow linker to perform deadcode elimination for program using Cobra (#1956)  * Restructure code to let linker perform deadcode elimination step  Cobra, in its default configuration, will execute a template to generate help, usage and version outputs. Text/template execution calls MethodByName and MethodByName disables dead code elimination in the Go linker, therefore all programs that make use of cobra will be linked with dead code elimination disabled, even if they end up replacing the default usage, help and version formatters with a custom function and no actual text/template evaluations are ever made at runtime.  Dead code elimination in the linker helps reduce disk space and memory utilization of programs. For example, for the simple example program used by TestDeadcodeElimination 40% of the final executable size is dead code. For a more realistic example, 12% of the size of Delve's executable is deadcode.  This PR changes Cobra so that, in its default configuration, it does not automatically inhibit deadcode elimination by:  1. changing Cobra's default behavior to emit output for usage and help using    simple Go functions instead of template execution 2. quarantining all calls to template execution into SetUsageTemplate,    SetHelpTemplate and SetVersionTemplate so that the linker can statically    determine if they are reachable  Co-authored-by: Marc Khouzam <marc.khouzam@gmail.com>",1935,2027,ccoVeille,6c3c116,0,2025-01-27 14:43:43,2025-01-22 01:34:05
command.go,5bef9d8,Nir Soffer,"Fix --version help and output for plugins (#2180)  * Fix --version help with CommandDisplayNameAnnotation  When setting Command.Version, a --version option is added. The help message for the --version command did not consider the command display name:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl-plugin  With this change the help test is consistent with other flags:      Flags:       -h, --help      help for kubectl plugin       -v, --version   version for kubectl plugin  * Make command DisplayName() public  This allows using the display name in templates or other code that want to use the same value.  * Use display name in version template  The version template used `{{.Name}}` but for plugins you want to use `{{.DisplayName}}` to be consistent with other help output.  With this change will show:      $ kubectl plugin --version     kubectl plugin version 1.0.0",1909,1909,,,1,2024-10-12 16:08:27,
